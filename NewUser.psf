<File version="3.2">
  <FileID>80d6d2ae-6b1a-4a7d-8c65-7dfd6023b6a5</FileID>
  <Preview>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
BEEQBOE55I83AH/z3/mX/+l/uAsKgiAIgvDT5J//x79XBuB//WEGYPHiJf/x//7v/y//19/jdg2C
IAiCIPxE+bv/xf/8/2Dbtu3/u3eY/25Nnjzl32zbtuOfVOZ/0hyDIAiCIAg/Vbb/0/YdH//TjBkz
/qF3mBeJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQi
kUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKR
SCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFI
JBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgk
EolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQS
iUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJ
RCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolE
IpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQi
kUgkEolEoj9aP/vZ/w9NNKBzJNYajgAAAABJRU5ErkJggg==</Preview>
  <Form>AZIJ16Gbl88AACODCAAAAAAABADtfVtz4kqy7rsj/B8c62mfqBU7QXedmFkRtrlfZXMTvJyQQAIEkkCAAP36
k1mS3XYb29jd7ek1MzWxPI0xRVZWVuaXWV+V/tG2PWe83fx1eXF19Y/0xdX2uHL++UfnuNk6/v8O
5sEk3G/+txRGfvrzz6tTb/151XeizTwM/in9b47+9+fV7W653UXOPwNnt42s5Z9Xxs5ezsd159gN
F07wT1tVLXksK3ldlJycpv9xFVg+fjP113L2vY0T/XE1ns2Xkwj/+o/bMNhG4XLzBxcWxTWicOVE
22P2sevdNuyMraVTmPtOQKLgn6p/XuXlf8DDn7730WY4cf74q4Tf9O5nbqzx4jZchtEff0nCn1eS
iP+pZ31qGoW7YFL1ranTsI7hbvvHX60wcN797O1y7gTbzjxBEWUNRybltXc/RGP546+OMw2dq171
zyt99f7QcAKcbGiZ0hvz6eysz/k3YTRxos72uCRFzg/OpDMPpsv3R1cdh8HD1OK7N/PAio5/XV9f
31xf966L+PP6unhdvb4J6Z/9Kb0zHfL3b6+v59eL6+uGVMTX0yr96d319Lo+vcO3ywX822bh+vry
Iu3hNqzh79WZdH19e+c99KDd4C9rI+ohTL8L2y39SN/PGv66UKAeLy/2e+n6aYP3miHqwLxQcSHR
je6zty4v3v30icYMTwa90T4AG3kVG9b18pB+eXkhG5/pD0CPbRG0AdvErD4pAjh97YiyiXJgxKw/
DwLIb+0BgMog/oCM2kDfGKwxzgU40tkgVEGxOjaw9qTnwlQINZBYwQbo5yf2+12SHvVGcx+z+8sL
p6fC3M/JoOzMiQuh7BiQNAQPJP2IMldtD2ARTgRghankviWo519eSMCc+cCEuUA9Wu1hDFOxhTK5
IgPwRN1g+rpq4L+KKPMkvjeY668aoLum8H2HNKeRwoBpm1oM8/JGAVm57cUwyo1NYGgET/9ac9QA
FKFnxaxhexF+ba0HWrd4ML719tgCuV2ARXDo4yiTuxjae7UAzA2Uh87ASABinCVQ6bUnthrgS6Uu
SLWwDax7eeENDfyzbv5h9DSfB/u4AenGbxuMRbINOg47e19hcQy5plgHZi4erAvHwLCT0uXF1kBN
5yrglvM90Lu9vPs4+xIot3cTgy0WYhf/uLHPesTOVRD1qAuqZdku24XYrdoWd48jFfTYhe3a74A4
8e4Mtovq0eNcSTHzl2KC024/m1Vl5y5A7UzwG71psYJ6C6ute1DLURhDXncz+2LRWnGZ7VUMWMr1
Gs4UKWslsy7Iu8YzI9TiygF79GYx6W1SUGEZTG5A7gso072z7AJGOVI3ah1HFasgbD3qxlzEsFUd
FbVAevy2ZvhMqbv48sIHVrS8BGbCHu1puTNc1GNXBFwjCkj93MCAwn5TyeaSy4ivG6C0vfDZKnRF
HfWmBTcb0IVhIYBxfrMHcTZtGboy7JrgDIo5EEdOE/TjIGmAG9Qc0Ct3OeOpyaCZf2dvuNZccIVt
A7Z1vwfysTWm8fgVmFdGA5RZGris5foNWIarHCj+fBlD/Tj2uExP18JrjQaFc40zo+zQwTBjJtKq
00WQna5HlqkZ6B8Mj7Rwqrf99Q81igsnG48DZfpReBEHag9x4Pso8DlPnuk5h37kbL19vL3Rm5Fo
wCpTyWDyNjIh2ahoB67E3ogjP0m2GBItNrC33LbQAqWMEYFdWzkPvGppD+ptjGt+pTjRhzr9iGyF
veZC7dAAWA5rHq4ZF9eIYHYb4AhNCb28cHkxwLgQ1AKQdg3vg+N7RzZ1p8ag2Tc7l905eRPcQTOP
Pjhou6xsI0iYlodS5pPL4zyusirDcBPY4qm48NGGk96F46ajg1xTe8BuLi9GiUveRwZ5xHqonO1I
hIU4q6E3WrdjVrIwNs3EmgFyuT3HsCax7qvdvyebTYbez41j8KslC79hhaNs2EkCS3NZBq0srg3Y
a0YFcppFcUEuobtiddsTMZ7uVZBmOZS6v1gVKEB9yESwNwMjMHobiWJT0ICZH6Km8wdCOpNFAWJL
6AKzlzJ3jiLgFyA2au89xB1jLwbPvGYgrXaGwYoYF0oRrOrtZTaqsxqO7EhxIDBYxUqyHuX73OUF
9imEAQ7QqUw5inj08+QBGzHGrnxgVhADNDFuHPYoc93OFWBqztYYBWrHc2aBq0zYuvcg30hdijyF
GBZmVeM4xEDz170Uv53ojXvitdyKYD3MjxGHHFBmnBmMZcFNAyS/MjMw+u1eGzuPXYgtae1vrDba
Vyvks4+aDcOJCbp3f4hTDPBGUzDmAqKbAshbjIAdN5VhXs7pIB72ZszkXfQaVE3I59p5vYCan7QR
GwUttCanaENu7Ig0UjQRlyKQ+kJvaUTmjcd8HTwVtLW2wnU8RuuZlRcyrtvoPmZNzEVRbyp6mpcy
uAJDTLlZF1DdxQS9TdSOcdUhYtTcRpLFhSfNRAwD5cuLA2JIdSdun3VmIErl0jJhVbURWU9F7ktA
l2wBcfFYbD/7exoD/j3KFjNzVu7CJJ/bgVqfodHtNfpb97kxpxlHNMjFLA4kDzZrtstkemwc96o4
L0uJVSAcHkIQV7NmrIujnEiufMUdz0Nk4ZGn4AiuLg+9APxhfw4sWUnZqntmvdxoJIY+WCtHM2A5
rxhAWJUTUB1xZ7xwAohmIshPKnVcI0I31nFlDQuIroa17IsfJgHnV+tokctKdi5CU4wMrvlnhsO/
nC/FQ6NjYXaAqx5ndzldGLgGRg2EKw1MPiqHDWGfx865leBc5vAbMAvSmVVswKQsLxHFrpQHRBjH
DEeqtgPEjMZBdZ/a15PWzemIrvZ1FQLppoY2ryAGnbhFA4LKFjHpAboG63lVwr2YqZnPrYP8HX4n
sP1qVEEZthPQjUesrhtGDid4KrioR9eDDJk9zikZOs2+QZnXEFF2mgXJrfydy3qTBXojsX+NPjpB
b3TnFFVYSEoV84Wl/EyPkXJ5gR1zhLeoHqtoxsqDm9Ddbi4b+verjluDOAkQg85vMR4XrIIL84FE
uFfaxgblTQnmgoKGXnm2RSSNPhVjlVm7w5npoV43mF087VFibgRxY6eBOn9cSCibG8gvM1yRXq+V
tg1BdbXlKCHW2agbYIQeK1ledWt1Ebr6U5WvulhH2UYFD7OiJoqe3/VdNqW+MfvPPe1bcQL02nHj
0Wt/P/fpOt1eXuDczRaBB1apGKJvHDUNPW92ad1qeRCXs1aMq6hrg1MuCqgst+XqOXrfzk8PIN7Q
3ycjRBGY/ewe8tOs8ZVuvh67uEzdI2KlSox5ZhDq6K36x56hyyPMiTACLjUZxPsJypCYmHFMSjmU
oe+2DV0cYsR2/QOuw5U2jJm1CLuYxAo2j68nHPy7qIbPDp8pBoSgxsKki/7NuwHtVsZ1LG3qDdjZ
9QBUQbq82GAeFasRYh2vgurv5DDQye1uluE+8UZntFOycS/Nc2T8h5TlUXmKXem0Vg4azz7NZ27n
rJHCT8llPtW+9VanHzz7uUl/QfW1rFGljGdBzWb72ce/0+kP5gvc/r4tjC/LjD7cuH/jkSIhy7oH
Jm7RoT8ppvzrZHuC38hiRcqqxVY8BnWdi2KKHA0IV8wB3TaFOM3Kv162Z40XJniWpBeMJGa71Qgz
FLHURlQxR7xWdQYYeaq7MqhHXGRUcRG/SrbnjSOZYI3OsXFs2hCOagqI8hLjQG6QFGDSzyXoo6fN
mCF+G2P8nA9rIijz1Zoiy+7MgurnZHvWuL/z5Z0Hx7GNyPlYt2JdG3pdcPxijuq9eQ+9tj5MbIxd
dxIiaa+F+ae9MFHz+S3IzAkNmEkIudAPn8Apn5ftWeNrRt7ZIeY0pb3LrMuLmW9gJGkmPMIaGHEL
EcyDG8QdM8Bc8HaUeIh7FxSBfbSOio3obGauQpAHfUzOPLn9DRT9RAtBx4S9UVUR4C7ZJOBLoxnK
sES9FS3MaWYCZiTSMmqhBQeoPLFloOb7ErqHMscpwh7fv19h3l8fI0K8vJiKsxViHdN3AQ278UPi
vRhpjCsKhJY9AKXctAxWGHku5dQP2WTLRhSxlvsH0JIa5mEY4NBTbA3EmKUjz0+bdoJZuE9oa4Q5
C2uOF12YBsstTZj/MnE5X7ZnDWMmotLKXDbYJqgA1SYkju8M1hp3cUJ9RB3KoGG60DpEhENkxLg4
QPp6lcUeJLYwRan3aA1tKkumCJHyLGZMFhG4lUkCynETuS+3NT5iIXxVodcXYW9bCy5jnObUXlAF
zLFTvU2niwSONtsC62KKiGvJDR4mhVZSTnNiiOt9fKd2QJnvxpjXz8VrxKuTDcrccvpdlHmlUr1X
paLtp5rmVhLQzU7isq6Tp3wBM1aqf+wNYPdjnFvMKAqgtXM4l3O5TQHMfr7HwfF5TFnSVt5GsBmN
ApT5iBZ8h/6NpBYkPauQ3E58zLKruxbPYT60O+XJGE8xxSLNRrUDo0pBi1eBMMOoVBnIEwHRvrpC
TCm1YPYCYj2XmdZpuvcyF9BLr4ajDlrHATXLrQPXIfqOQ3Lv6tKkjNHcUt50zM8shOcsGDNl0MTy
DtfEpIgruzx9qCt1qG60Gc22oItWHmhdn7UPaPDdJ1J351AXwRe3RZDkPa+4YM4z8ze4blsH9H+l
WdUDRLaLN3p7bDyZXVNtdb1a6bhiF01I9x+8sqRghtsYAFh5dLYqFBLq7exFne1vdfM4c8VNrZFV
qrgtlKnWRZ48f4v5QTwCtovUytudUU3DCNRs368x6SUYBXr5bB0PLy+cnAf5MeZyTIwRBpwuB3L4
6FFV+/vsku9GMSPCDDmJMM9y2dEXTfRve4lXPinfxNzOEQ53IB1blPIru9cKjtwT7DWjAdv1ukfx
dOk2gF2PkoB2FhVeJ6K9IaikOczptlXbCezHt/hPW9AzK3w2pzwn1l0X08LGJI+54bwkYvQbiyCV
MDrqYGHEHgs6ZpdG4XBi1WW9Uf2DVRyBV4EMRCqbHcauBSIVeR2K6BYRfaV6O9mwc0Rnbv/yIh+z
8VI2ILaP+ivWwvGc5hoC6N0WxvTOJOciyqhi/qoHhqEfRssurKzBimQL0Ds+/TB30DKLRciN42vE
JYs26If+0YOV3D9i/A0xm5TRUuBp9eKp3myqVY1Fx4Bjo9MD1TKHLusvqiocxhiRTzfMkiNAhLZF
fyivDV4n90yOltCC/a7BqvNq9LjuHluaM6O/Y+pmXYFRbu+A3GIDDAnitksVZYW0hLK91BPf8ZJY
NyRrwe9MvGUBNsNZEWPV/chl94tRBTPe5AUweLQQXt9AmXxeVzJ0YXCMYeK3iiDebC0D7nKtl6tO
3Yn4oV1zjP5vWHCpjtRcq9lQTucwHPfGaM1UuQogkm8sjMg3dwbzpzkT1hIKqtSblssGlxfLVYAj
Vicvu0krwhqYiI0iE1Fpw46pemHASLjpo5GVjs/sT01H6ogtj9Q5AnW+WRqPG5knChn8GxLdsNFT
QBUUpTsy2MTxRAgrchF7U0pwjxHaXWAWFJYqIHeKFrBpoDTQBKL1yx75nm+kugVINkEBJF3tgx4M
chHKht71+MyCaZXpHnoutg+HVOEjGVX9NSYFryRgnBAMdri8CCoeLCtNGaOddOeykdNrgG+iScgz
GV8PnWIB44LcAGl9bQPbRtbLOlPaApnnp0tcRrCP1hsQ71cDg42DEV+cD58Q+Y4sC0Kq+qgP9bgT
VclsncawIAexrbcrIG23LYqnXYzQ5v01rxEarDvpEWvhPq0RorcddxNYiKsWeitlbDA9tnn9ja+K
7xt6QO6CGhCM1iZITnnmUjH5ATuZhCpwbXcfeA+M1tSLCMhNAIPDFlTlGBD27nrAGSnS6rGG6FVo
Z4fj4OaTmuKG47ea3cWMQxx1EQ6L4xjKh437CuQwqQp0TWpbjuqdp7UuPTbzHIeQ/Xwfi9LGe+zm
cdSVOKrA1F9o+I3zlstuLHS3U4Fk7kdtnj8kPJ4SChhFRpZx8CyI8k/0V7SrNxVLPdQ0c2O4z00a
L9cI2SHVh10WXF6sUMlP/Nkb22u8kiBzfsgmvsEcZtdx9ePAKxDnQESZvcuLFuj6CDWNMVtGy/Lb
rg4jD7G3MJRTGXWNKqWOX8VP9J2Wq6tDz8Z4mx+A1CnODBSfFR7x21OpcUrTKnasverAeUvRGV9V
bueIElg92nce9sIpCIdBAyPJIKHoJ2EsmkxbMXpAqqUOqJa6nOEY8LULE+EaX49cXucsZLVVYdlp
GDoi/MEcYDy4v6Ot4nkMO8qzXgjiYqLyYn/h+5bFBZU0KzsVK/XirDMd0M705AZl7tdBX/U6NljL
ax+EVacG+qbficHuDzf4fq/u6pseRke7dEfxVJBNlFIw0Rpcf1tDm1cp+nkV2hOpX4N6VM8tQ7yJ
LbMdMVfAuBBKGHSEVgNjlaNjeDmGMe0/GLAaObcg+zVc+QOy3gj8cJsD5bY/jdl8KZn4F8IdKPO5
77JopVRgZzs5dFEtFN+TdpWMBfNB2c5ohLbRl0NA20pbyus558kVtwnFphF68UGOAjsmSPifAbrd
R/ubiK2EZFplnAJe7/0e3/26qhR3bWmEpp2e1Ldo2Wstc4t8HacO56Xv+Yxs2hnV45/RflJvt7xs
vU97G/JfESf04d27rIqdcnu+tTf9ym9ci/436E0li0XPvs+qaym++z1k+9W98QjN6yWcAYX/QBzc
uL28wFxuLLZE2l1K3o8kv0S2X9xb6s0oAqrESsZsMRgKBlQPGxMiZbcCeXDvxehdRyIcN1ET836K
tN9zM36JbF/Zm0cmsFLaAeQn9hA0s7CPme9XbUSpkwHfgY1ZZ26KCOgtExRht4kB4ykxqd+oLfwU
2X5xbzyWoYUfiEOgYL5KUWyr3i5AFoxJzIo2z7MmeenIma4xK4yLADNx5YNcbs4Qx66UBPN6s5zt
wf082c5qP9obj9D8h9QuzKjeG1VRGcc12rxfHfk8HzD0ZDAXYbzcHBCcjIlnYyIGnZUPt4jvFMR3
tVkF87DRLaIBs3SIqTJVINleWSWfab9Wb5UDoilLmESkjA6u8Tmu/NakJ4JTkg7fWM6UL1D+sJpz
HgTlD+VrqltyNgZrTvINmEv3mCXt6kQy2jZM4uAduKbPrGv+KyxEbScb0JMxIrlW0oxhXVtfY46d
68Djrh0C0/zi8gLzKMYZJ/4d6kFetIij4gXgDuh1Hl+n2ePcbLUxo2V0BsOrJrBe+xtgXZ+ILw/x
9fdYC7yGyDmgmG5PQXNRerYlVn8A86BWAvEwR5vXh4kJ0wExb0pBylMlPmWrCPKN2IlpnzDA98dy
+j4xd9ysMr/CTLxnsJKDGQhmQbfoQ+MN7W4Ss/UTcfWn642vUzOtW2LMT8ZRFdfAbE67S92EGMM5
PioXR53Q2YENauGe2JRdJ6dCVJscQR3M3Zg1Li+onjEVxvnHSkGSEMcY9TJat6iMjKtqJsox6lV2
XFojxMuPN18y0jcaZ4YRQ92FQX4bQDQSCrgG9ncuux7hyp+VFwpIE9oX5DsYlxcpQ1iOcVSRHwCm
Yw38pzfPx/ijFMF8sBf53uXDmQt+BqO1Quspp2zce2I9a2OXIeKaDitEIMt/ZA/kcyN9pfHaluIE
UZptsiSUIlhUJk3ybyXaueHcbGLEZXy4ut31aIdMwwkcjGO42VmY1rYrC4BI0mNw8s0GrELMXKVJ
2ADi3nK9fWPQlXmPZTQiKS/iGrmeCLjqhn4dE2NhCwRIX2d/f3qkL1t6+oV4NS5NAj9hYyJEFFaI
fZwirmxhmOO75w8VPBOBgHSI27TnhmtiNVyNQbP0jQv9fAv12A7Wz3JnSGxlDjIr9GhnG+0Je6Aa
IALtzDr8jZL12HBKNiDwjEAq30wByDvjSDHbz78+hI+11/YBqdLOM/alvIvgELEE5HVhwP1dkO2N
8zpmujcu0u7ozZ7qb2w+W9qwj9o2t58YQqUdE7Imi6a+ORbQjQomWzvFBzaYdGO0niJak3xELfAe
537Kt+Q7/unOdDAxua8wmOGtCoDa7f+EkZ5u6T4gZ/0htAO4P2oNWI9mCt8TdolXQ1yKlJUgH+8M
lBGDGY5CBuX2BuOAtg4DEFpUmGnMJdptJ+rft5NyCq/Su8S3DOaIol3G1sMuLIOhRppEPd5PipV0
R19axukOf4BYHCORtFWHhp4fB7Q5eMR81fSfMl9/mrfkjIHLC0QFW2AFVzJYsqryaIcylPyWkZ6Q
8ILaNcpMlfZuup+PZqr6/syAboKAiu8tQYOYiRoxcp+FOo2/NEgnmIG4sBA2EWxkYqTMJINYCd2A
avs36BlIz5zngNaBHjSP8bQT6+pYcGEqYTxVd0r8WpX7jHaSb8nS01I2QrnKHDTvdhszc1pCpCMU
t5n3ao0LOPdmC7VQSzAuWE6PcO9GXiKaKtRoS1PeEbdM3LzFAU13shNaH7IOXRA2uyNihPuhwXqX
F+MEfWxwR/yOBPXQpO/EyIIWuaRY1HD6AYwHK9qU7yyJderws58nCQoftRCbZibW3AaIk8RCp2ZY
MbGe0z3gjBcN6XmEhdlMmRIGi7ySB7lxdAO6OBEzTvvpHbOXsiV6ugObAIsDTM+YFhhsOeuhpsWq
zDVNOzv4jWkkmtAOxd2k1wDXrDmIzRUH2BTxm1X5wCnit5qBCF83ENhP6ASrEOOoj/cuuxl1u+k5
EOJeZDyaha8lGERr6KJqcd1GvcUIgdWd5n7b4ThnFnjmpKWcgVjH7DJC5Fzd4jT74ljJ7M0gPsnl
hVch7s5sQ8iEeyezf496OIwMXXOHBUzaRIfr9QxWzAvZUo8YU57fIDPtJRsbVrXSPmUAsMIosTP2
kEwMFMNGew1DRP9aeXd5sTDAEYn+tIsivr32cWSTMbFjjfPJyYaWom7DTmnp6CvE9DvRQ5qla87/
wLzd6tLrGuK3m7hv6MdxhROn9vx0/GfOtWWVAszkWILgF253dZcitpppgceFhPbxKJrt0SLNCZ3Y
rfs1DIED/OeaiPB6TMXy9/HdG7Jl53SBqv9xQAuwh77CIF8xJkxZ1h52GktcosFeonV6v0OPKY0H
MbiY7IImtpOPrwyuBYwLDPZ8hwvYyq9gjpzXdvx8QoaM54ONRGw09JC5oNJFQQslNKGNRjxD9CVP
9zJ/JGYFdAZIJK6GbjSOoJu1y4sd+op5nniD4YFbg8sqdgH9lU+clfvNXcwKdJJuJPSXoFrSDkDg
J39PtFOycS/Oz4xxhonKcqHB2k6pgDnyNX5jbdUmnEz2V5aIN1gfAAySDfHf0p2bylF305rze/UR
jMIIILqkrBe8iKeyiSlnBRLUgy1zCzWgvF3FEISle8RSYTPbw03zU76nWxn3IrD8CcYNx7y88GPK
ekw4r6WHlChnxnW9QX9nOhiPh90KrwOQvaE1oAWO0FcHYasPmq+GMayIg6wBmgh6gjPOMIq0YX95
gXn5BC22eeSnuN+Uke9G6bGH0K1Lm2wLETO52Fq3iRGA0bOE6xRzllQP/DxgwUI0P/HlGYhLdNbs
uLEr785M2mKVnzPaEYsqvy3UQO5cm7GeDG7pQHuPn6ptxYTnGigDQVw11ujvd9m9Bd+1U/bGBQmJ
4rFTfVxVR8s3iHCVvFt7pco2r+6jn0Akg6tEbNkG+orhGNIzjNNyT+A1HNo7p+qFWRuAMJkNEJsT
i+YpT+Ktdcoj9lpxPNjVjwO0tz36muOgk2Rnje/9psuk9VBEiFIZ4/LPUS5DZ8BoDYhvrwEefjiv
wRYmOJcNJweydTd32TysU81Gdc/xIdznJukdAPEWM5Q7dOXuLB+lZxiJNQ+6MkyIjzQLbqqYAM4H
BqvNh3T6E+3v6RnZUzKSN4qJ896FYLiNMP56bVfHzKh/pOpYFUPg2sTBj/ObJGXUpdPD0hO3rzbu
KVSyGT2yLy8kuosjKsDemuigHLuWy+69YQTRWkCfLI5fXBLysnEcosVdge8709m58k6JMAOReyDO
xnXsZljooscMNVxvi76rMzeskNlq35/EfNqIQ0s2baI/xaHhXM0rtSYIcr/Oz5AVYGnq/NTtntxo
XCH7wh6TdKl9h92f+TfyuQeOQnWYIbJuHl24XiE4jGulGqjrTjdm00XFo037Gu1QpCf6vcdI87qF
pLleslVjYu7TbSBzA+PG4R5lHhxFOjObQwPwe66OiLcC/mptk974nRGne+SrprAnttrRBnDKVQWE
UaOC2H2yLMBRZRF5db6XBMRTZXCKj/SkcSdg0OETRPceZsCNe9Dq0Qy9lbeswFrCLFxRKvcxQ9+7
yNvgh3n0PuxuAWwfKSpo7XdwMNd+QBCFs6AFPTJBvV0gtjR0xTyS2S52dDiyA/re8gvAnc9pItW3
HtNbVIS1zPkhEfFUt/M2+YJRARAzrDmvy3h6m8xplaZZOaacLNqg3of5LZ1fONidEY671YtZgNMP
q7BVAGVeRGy+mS1MiIbyGGS/iV695ckmHDZ2OZuZF+2ZvZGv4DxBxcHopkF97zLssAvj/nSDWpgb
rh6PliaMK6U8CkY3Lr3Wm4HBTk+GuRh7EOkw+HSL3Q4c9BVSeu+Pnq2BV89vPfaWnlTi6Iuv9PLO
MogNOQalBhjdZi5mIKtqrQRK5wa14Lm5BqxDzo6smga7m4nE4/Jrzgj7aucM4qC8dv4qI7LhDzUu
INSrzND3VPe2i/nFqAPiYWkY+ubywszh7Poy4i93iAk5YrKXpkaUMNDUagysOy2jJxi2pugJOoeH
W3ziiJ+IpVr0K+J8m5l8mpU3FqCtIXJZvBxQVkTh5aDeucxxF90HvqWsM7pBye0hDjE3uErqNx2D
TecowzQ4iIjPPIRJI6EV4Ey9XT64vNAwH0ZRKZdz6Tjvtk48wbzUi/WtWaxggJL3oBl0o9L352lS
C6YKEN195TLj8sJB+5G2Ypdmn/Nk3NPsx5eNm8ySzhnlNBXnVhlcXtguZhyIOpcmBix5qaAeLGfR
AD8gBudKuYPsdWV5g69ltJax23PBH44wiehcOzFbrOoB3ZCzeuQNvtGMHMaBOckgEltKEdyZq0tW
UURMuVyBOpd3xD/fqd+fr48JARI3OzZzLjT3agMN33wgXLD3zjBm58Rpv55Fa8S5gxwmYdFoloDc
F++IE1qgegmdE8fXLhtMcpXsPqURvd/nr83RDXFGLy9Q8b0JzoFv0tnhrT7CmD8b4qqpO2s6Zqe9
aY9cS0e640TaGT7Kplcae2KoVwOwBiMvO3szQ2t9+jEpPTqEMZ2pW5WvQn4rj5axSrm1vBazMoY6
9ov4O8fJwC4TVmGSnlWRZlHLZU1ixnpi86FqdH95MSkWMr2UcvQbXq2g2hXdY0bVV8ySFpWiAvK9
2iWy/sCE6fD2BrTKzT5+bpmvn6NUMPtAvOZjUJXonh/HHCFea98vsv3VJ41jecqpqTfEFQ8VvAc9
vKn57LAuFIhDipkcI64tjkHl54xo122yeTi9Mhcztm1WY05r97xmwyt4KRt3m95xklbiVbpvBLOk
Nu3+060nqz16PAW9dunQNN8KfCz9wfnMtKtcpR9+zRogau1idAaMXs8hFGfxpc6fY8z0n+95AoOy
j4y7gxgYMwz71ub3rPC9SuMx16PzMHaBbgDLaVnNsJZm6fy8IGXItWxfhteyuN54tjgrh4/1DerB
q/TbGMFzdkx7unSeoVuCrD7zfcsshL8T0B0qrtSuwNbGpEAeEOmX75I804LRzepMnO/7Pm+Qmwjm
EBpnQ2JsinEpLSu6jSjWaUB6K5nr085jibLRW6tLaH+h8HoInbhJb0Yb0O2AXE8l/pqPurXity0U
Itq7VOh8KjGI+R4wv32hn/QNXZ6USW/LWmeIK/8+52a3iJ1sfDQ4WybdcNinE64B7TROnuWzEmZG
8Brb+4QC+IlCOu1SOYBuGkfj4ZYVDTO72ujyosF5Ci7dNMX35/n+PedJD1OedEynhqLsjgnOYshe
06g5jzrlVZebVEfiJ6KJ32vCZCnlqN6BKEC2S3yl49zOh36M/s6pvFuOx3hKnDuVF1P4J5607MPv
rIG0FkbJMT9xkGDy2m2ALDTtWN8PCgVCnRvirLSMTGbOrJ4R0zrVit/k/HF8raX3aKRnkTnPIeWL
c73xUaef4PdecG523vTMNJ0T9GHTQD3hKpoIK8RGpf04ZrvIUvlR1bfzU0olEClHKu03vH0XUaa3
F3pKmfwUkYd0li6s1RDCj1pVQ5927gFGPS3EfLbfoFJkoQLj5R5zmnviwGMOmM4l2QtnpGPux1kt
z14/YaTjqG26eSOPo7QwZ971kwpY+bsdKh+jTD3WN/1bD/Ui0d0cAeZNG8v30EXN5XfOTcLjDYfu
yVv43lShmuoRYx6jyzP1AP1hHe2iUxgCK09KxMN3hEkBpbbRGtY9jBdWqRiAsLyvxfiac9zp9baL
+eqWc9yXxHGXBw3+OuIc9wfOO+b1twH9Zg1Cnv5iT+cRJn0J7We2uMOc2S4miJSXDkjC7djVc+MB
gTaMA3rjPvdzb654ooXsnsbUK/NIohvGAVjDyWOeH9dpM6ZeB5nuD2BNJx/AVLxBry6v7mNdHSFC
dAb31zj3M8xxhGGB8tOJf63i7E/bcfqbiVDVQVwucKqUUY/ulZpQpX3XQdQwQVTrBfIMo11tDGzm
VyOI6s4U1HocxXTOKFqLsLacJWhB9fCDQz5Lb3pmHWp2VornPBpiO46+Yvyl0wWhZRrEf0squASL
sV1B+xmEKHWwxOzSD20IV/c65g8912VLf2hiolzvItwJfcyx1+j6IsXHUXb2a2C5TcT3AS1lByoC
VKCTR3T0LKpi5kaHnBEUVFIU++IE4g+M9K2WelIej59hS/4bvjMnU5bGT2KygMLwXGoRSIswtnl9
jG29HPoW/K+KmVwdwVPzOKa7/dwi11sdQaRB9xLkmmobP2EKVAViBQqJi+wmKn4/Evf64NJ505Mh
4l/CCuORhGeXGkcVvJLFT4TxiM3v0UOLoRwwxfv8vi3MxDXiizhieiojvXuZ38vCGXW09+2maB8M
8YXr+z34b/8+vb1+UuSt9lueIvlvbz/eG79dt0Y/ivwczrfbdRvX3ddu1/3XWe/foLf0JrT73Pa8
6zV+t5HmJ1103N3Cgd+zTafbA1nATDOKzmHu/1rZ3umNqbSn20y2BcQlvgjSjPbYeCa3kFaYtVsV
z4Db/fjlLT6/wyxITgEja9TIuWwdDDG/KCEoEm8oP6UzsV6FePY7kEuYw9JNB3TWxDl3M/oHZTur
t5HQ8iDRCyaxIU26bwvRP2ZJeb6jYdBZYswNB1XKkiZNg7UnRRvmQ6sEkl+bp/fQwttM1k/L9n7T
u908orNcq4up0aSK6H7ccFPePuX9lNfr2Slu70klgCooXbpjRwNpXXRpH7BKeO7xOqGfIds7Le0t
r7uIQgvtBKiyCcS1OILUWvOaDfEa/LEE8kTvGuzgi11El839U/6562NeLx32mNfHrDYNPJiII4V2
k35k5Z89UkeciHS6yuK3H+G6pTMVM//xRv4KVdfQI5U1usMVHu4q9c1lke6GaUFaoUvrc/zmbmNc
iGAW6DLx3dwT3MefOAus6/F9Z4vg8EIcFdFavFZWNUxrpzQqdmfjOj40/Ahn6j7/NETQ3VjEevYS
Xnul+hvnad0ST2YR3NGotAlmk475sVvYzxsp4nNMwSqeEjN37jfQwu/QemY7zuBMWcxUk981MU+7
vFgPI8wG6fJfjHZ0KdWjHiIvT6Ps4KjF2jXxUg3OaVeB32wlT5R70PMTukej1u6dJ9sZje/XozsM
sTd1vVkaumYeOQ+fZVVszhhemEUB046hZcBYatOFCebyaTfMSB6qad29EnF7y22zmzOMlGlNLL77
sBWzwbTkgjVY7jFelg9nMMXeHelCYibtXBs417M6pOvWM6/pFjLaj+iMvQjW0uoO9GRK9yPRJ167
k859vFX2UBfKIN/EzZhu/6hkM7Mkdm7dLtA9jgfSm7AKrIwd9LlWOCDyWasu1ZGWQf6Obi/CNdCw
kycMYJfN6VpjzJnHoKPVve9bJDpxkKlXrXeHpIeum95hks5tkarWy8rkhlcV0WK98PWy6nv4jXPa
iztMxZ1lbv3IYu4Sg532ipZ0+KubNBt8f5V6O/8En25w1pXAYtQC8YHpXIikE3eb36R2ecHvjZJv
tIGrz4YDtND2cwt9r2kundGOt1rM6nTO6OHZBdyXpHfBDKQDaEe2NsBX2uLZV6I+0ZvLb/CSwaBn
4NANONWEM1txrmmvKN0dkPcYHRPbT2BWHZTe6O1E46x6uuXJ1cXBMcAeabeJMxVrVrcBseKXcKY2
OnFe0nOUn2qmxOJ0+vKbI3GUo0aqN09M74Ik5pfLmk7fBbOfn1MN+m0aCm9HqlxpsalkPHw3RQk4
CvyOfoB+fu0tRaIBKO+fieVlF5/qb9ReHelRd12yL4bRcb8AVh7N+Z10On9uBZ+ZBMPTCt2kQDdD
vt0bNc5dzOuNJq6qQc2gu2IICw0FkEfCHd2tFnvPrqR5ozc9GgoG7YhFVFV887rE9MZ9g5hXwLZL
X4Xp4G6f3aCvDbsGTIO+A3l5MnwvxaJ7ply6lWwkE34rDRvZjTYzf0wnQ5YSZCyEdxh2YiuyULl3
OYOZXtiluCDXe+98O3DOlIse0SCOgd5CHDxrZsyxuVmrgFCajmJoX14gan6lC75jkegxv6VHpcp8
09Xzg1vOGL7hT4eh6PcEbp6cBW4/ua09A+12jHor+sUAPAmDs+z0l+88X4b70pBOv6OtTjlXlu4E
K1TIGkQQtsHIZSN/9Bou4fvWU3FL8dQqSjOMNEbVheJ2hW9y2/fePvbA4jW6Y06a29fvRVB2t3SC
4vJiVjQgHk1MkAYVj9iOo7e6Sc8KyLiGaS6PsS4M5i6Ml4sYEWJ8eWG6emgNXhtFrEHM5EhGQYrV
AT07bfzw3ADDPfncsW9Nd7sJTvxMxiAZSSqEYk4CZVC4d5k/wyxoFZauQbX6mDWpbujimlfeuZ9c
Q3UQh0Bxmb5RGnSr3QSk2r4b64NBSURgdkqlhaMeM/vyYu4Ta6/3wI2VcARv681IiL0RgGZJYcwm
E8TmgZkv0F1tlxf3nFWV8olA1jX00qHnmzAxR4xuN829hY2Yt+H7Cyyh2+z5c+5mbsvQp1QcT59z
96Sld/mJ4OqymTyYrah9vxd+Qm/EO3U8yDXjW0ShxyZxWjAC++Yq5frEdJubkb3mt7uNHYzIQXWF
WXhfROeKGEnevXkTNz+tLO0QjMgltefq9qAfwGHj1Z4NOMbIybwAeyMyg/NkFG/5s7RubiI6BJ4D
Sdu4zVFtgZ74cEM8rnt6FtrDMyBuMtTKY/5SHGZP99OFyRn5w+UFZmOYbCQjwdC9YSnmnM6nf0F3
p2XoP21G8irkSmeBV/uZHah0HtDj558fzkk2iZPCce7DKUdEiB5H2ocDvw+O8ocBPbtvInI+0o1b
scExZ28GY8b5lY255LIuVbKWq/az8gKdFeXnZYhR8uqNNllLKE6obTFBvcpdg+yP3wenPuWPcH6I
xs8ZZeeZv+eLpPfBHTzMHzo0d07lHnu8bZ9iRDxd9baUPnUO0fsQjffZKPj9gu9wgWikOvECQYRA
2m4QgA/qhEs8l84jSCmPIb0dNT3B//2zNIgfghgA33f9O/mR55CjZ3TxU4/CYYvYexbW37yniTN5
gpUw/m6k753ziOmcB/FYWLAUYxgtcnMQa/YDayHdjV+SRMrlBXHU0+d9HBYpJ+WBt7Dlf/EdSyFH
T8qwl8MdztShQ8jbRx8cCfr3s/C8yU5w8kT+iZbdt1qhezBUK1qCPjTuYhj2Nh4IE7q1btP3CjDu
bxL+9A7OBkcP2qcniozoCSIpN4O/5jfz8ad7XF6Ml5scCHmzyffrVRgtr9f8DjqDXdvFCHr5+wG/
teIz59pOjiLNdwI6m+II2wKunnIVca7SB/1oFgrEGPBxTK3Li2qs+90OxSZpQTKhvUWcU9Cne/KW
d4gpo97cJoZASM8oQVxcsBcuoQFiBWJwZn6oVMhx98m/dTqLTz5R9bWR8mdPqZx/zBt/didaKN2O
KlopqxnK+4YNWwv9n2KNZgZbLKUCrFdKC93BNgSWp1tGTdg2btfpU3TofEyXHoEg07ND9wATfnHw
O2c7v5fts43zLZWU+1jYEw9fpVth+Z37/FL49B6fmeQ0ELrFGBK6HXQgFsnIn0LBEkJbAr8I9CfL
9nft7afstf209p/X2z//+Q/IHkadPbj6vSdZN61oOg/++Ev684oeCo4/3/1IC3/Sc8cfH3z+7ic6
WyvaGuFmvp3Tc7NvnWDrRIYVOWc8urzrHLb4kcixts4VfuHV6W8sxthZ9pFGaE2eCfj/6Df/AP43
Dx94//nx9M034eGXP0J+i99TCH0Lp+GNJ8i/+VD3auCGJO4LvXzuGeuff8r6y082wrGVTnteR/MS
VOGMD51hla/Z5TdtnvGR9Pn0eVlAwc75iq5lV4OJc/jjL/2lCUJqUucbWMOyneUvN68lfUuqETeM
ivj/y+sJ2tjmY9Z2vduGqbq60c75xMRL2scmPscnPnf2xL86zg/YgYxy5j9kB5p6zp9zH5bKdvU/
KN2VQ+JdWVy+zf/5v2f0gX7sNvRXqFJ76VCH9w5KEM2D6Ssz8nF7/EqHx8cSHP8TPF7+Czxeps5f
6vJert/f2uV9ysJ+1Mvlta/wch+dbVn/uF+Tz/ZrmTS/iRO72W23YfDLTczmX3M7c8aLxnzsBBun
t7Gmzqf92c0S/32OW1pa2+vVyrEiKxg737o+0XkYoWqz7vMKeRVc84p04kte+3BqPafc1wmbDncb
pxDugyeDEkT1zytZ+fNKewmXXu2jHTvRkz7KkXXS0M9TVWd7XFKygv/8rSOFjkoSz1pzPxAoXrHZ
DwQNDuA/5Efyp2b+FT9Cgl1lkl2dK9qHXcrJLvrzzc5acmt5Ynsla7k52cHTbPMW3cXiVeX+P/72
d7nn7xw2O84ShcmG8IU5AhqzIJ9jWz8aPJ8P8Gzj1z+RG5yFr7jtp0I9GP///DYpAbfnr8gJxvRF
dngwwj26/2opcj4YS/+FKB9NV5ROxdWf6LtP6Od8vy3k0XbPWSZP/PY540ltl4t0dVO9OlOoX+mx
/65mXzyMZ1YwdYpUGV1F841jLP9O9i/o55jyT7D/U4o6fyGo+scXwlk+ny+EB9muvgl39T/G0gqu
hP/z33XxqXXRnI+jcBO6W1GRi/LfaUWIZwHln7Ainqvo/LUgaX9enYfOv62F8wHNo1RXKNbVWXL9
1/5P2n+IekwnV/xb2X/ug5WwH7D/Jyr6mP0LZ6Gcb/Z/TiX30f5TqVL7P0eu/9r/KVzEI2pnawUT
K5pQMM3/nVaBoCpfhYteKupjuOijseAsGJXhohQWPQiXgaL8f0HRD+XIKPjfaSmIyjkG+fNSZPyb
j2XI+XMC1pMFcP4OSSbR1Xki/dfkX5o8jmb+97J29YsKQlwzHywFfdDQzwlhqaGfK8zfwMS/dh+R
09uIqvbfDcT/biB+xucIsvZ1O4iP1nq239G0j+8cnuWlnrJDz5ToN9sxfFTm33SrsByFu9XXbRSK
GkG1D1abf2CjMB3e+duEuQ9vE6rnV5izbUIu0++zSdiYb76EN7jE70HE88ECwGdJg5/1yTRqa7tF
BRcDC3U+OdvIq6i8ikNfc2Z28d2qEH9xxe1B/+ejTS7VScTwht9/GSZ+byprM7Tny88zv/4+TNb8
R/kZn2Gyptr8ACfp40TWn2FgXxhmU40YszD4oJH9MJlV/Iow+2R458NJ8cNRVvpA7Z5LdMVF+k1C
7Jf6Myuwpj+Qif59HJr+Ff4s1eYvdWgvCzS/t0NLVcKP6HytR1O/xKE9Gd7HEuQP5g3n78BkIl1x
mf4DXVrbdefj/wSI9qtTgG/K/KUO7WXy81s7tM+Y14+Dsy9wZR+cavHj54yU888HpML8B3qvgrOy
oq3voGf59/Zg4hedlvym0F/qxV7WPX5rL/ZZM/vBUx9fc2TyE1OufjzJPIvikJ0GfxToP9Cjdefb
f/uKmfhFBTOuy1/qx05cCfM7+7FaaH/Cvn7Ui31JrexhaGdPt/wJH3b+yR8U54rL8x/owhp8Wv7t
XdhXlMi4Kn+pB3uJKX9rD9awNtuPm9cPerAvqY09jOzs2VY+fuxWPp+YSeJckTz/gQ6s9J/hwL6i
Ilb65Q7s5Qr4rR1YaR79CzzYl5TEHod2vguTPo7BzndhXB7+m1/vw568ePjn5q//DyVQaO+XzwAA</Form>
  <Code><![CDATA[
$FormNewUser_Load={
	#TODO: Initialize Form Controls here
	function Get-AADGroup
	{
		
    <#
		IMPORTANT:
        ===========================================================================
        This script is provided 'as is' without any warranty. Any issues stemming 
        from use is on the user.
        ===========================================================================
		.DESCRIPTION
		Gets an Azure AD Group
		===========================================================================
		.PARAMETER All
		Lists all AAD groups by displayName.
		.PARAMETER Name
		The displayName of the group to get.
		===========================================================================
		.EXAMPLE
		Get-AADGroup -All <--- This will return all AzureAD groups
		Get-AADGroup -Name Azure-Test <--- This will return the group Azure-Test
	#>
		
		[cmdletbinding()]
		param (
			
			[Parameter()]
			[Switch]$All,
			[Parameter()]
			[String]$Name
			
		)
		
		$token = Get-MsalToken -clientid $ClientID -tenantid organizations
		$global:header = @{ 'Authorization' = $token.createauthorizationHeader(); 'ConsistencyLevel' = 'eventual' }
		
		If ($All)
		{
			
			$uri = "https://graph.microsoft.com/v1.0/groups"
			$Groups = While (!$NoMoreGroups)
			{
				
				Try
				{
					
					$GetGroups = Invoke-RestMethod -uri $uri -headers $header -method GET
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				$getGroups.value
				If ($getGroups."@odata.nextlink")
				{
					
					$uri = $getGroups."@odata.nextlink"
					
				}
				Else
				{
					
					$NoMoreGroups = $True
					
				}
			}
			$NoMoreGroups = $False
			$Groups | select displayName | sort displayName
			
		}
		elseif ($Name -ne $Null)
		{
			
			$Uri = "https://graph.microsoft.com/v1.0/groups"
			$Groups = While (!$NoMoreGroups)
			{
				
				Try
				{
					
					$GetGroups = Invoke-RestMethod -uri $uri -headers $header -method GET
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				$getGroups.value
				If ($getGroups."@odata.nextlink")
				{
					
					$uri = $getGroups."@odata.nextlink"
					
				}
				Else
				{
					
					$NoMoreGroups = $True
					
				}
			}
			$NoMoreGroups = $False
			$Groups | where { $_.displayName -eq $Name }
			
		}
		else
		{
			
			Write-Host "Please specify individual group or use All switch."
			
		}
		
	}
	$LoadGroups = Get-AADGroup -All
	$listbox1.SelectionMode = 'MultiExtended'
	
	foreach ($GroupResult in $LoadGroups)
	{
		$listbox1.Items.Add($GroupResult.displayName) | Out-Null
	}
}



#region Control Helper Functions

function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]
		$DisplayMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}
#endregion

$buttonCreateUser_Click= {
	#TODO: Place custom script here
	function Assign-AADUserLicense
	{
		
		[CmdletBinding()]
		param (
			[Parameter(Mandatory = $True)]
			[String]$UPN,
			[Parameter()]
			[Switch]$E3,
			[Parameter()]
			[Switch]$E5,
			[Parameter()]
			[Switch]$ExchangeStd,
			[Parameter()]
			[Switch]$ExchangeEnt,
			[Parameter()]
			[Switch]$Stream,
			[Parameter()]
			[Switch]$Essentials,
			[Parameter()]
			[Switch]$AutomateFree,
			[Parameter()]
			[Switch]$AutomatePro,
			[Parameter()]
			[Switch]$PBIFree,
			[Parameter()]
			[Switch]$PBIPro,
			[Parameter()]
			[Switch]$ProjectPrem,
			[Parameter()]
			[Switch]$ProjectPro,
			[Parameter()]
			[Switch]$Visio,
			[Parameter()]
			[Switch]$WStore
		)
		
    <#
        IMPORTANT:
        ===========================================================================
        This script is provided 'as is' without any warranty. Any issues stemming 
        from use is on the user.
        ===========================================================================
		.DESCRIPTION
		Assigns license(s) to AAD user
        Known bugs/issues as of 3/14/22: 
        Adding multiple licenses in one call can result in function failure due to MS Graph rate limiting
        ===========================================================================
		.PARAMETER UPN
		REQUIRED - Email address/userPrincipalName of the user.
		.PARAMETER E3
		Assigns user the M365 E3 license
        .PARAMETER ExchangeStd
		Assigns user the M365 Exchange Online Standard license
        .PARAMETER ExchangeEnt
		Assigns user the M365 Exchange Online Enterprise license
        .PARAMETER Stream
		Assigns user the Microsoft Stream license
        .PARAMETER Essentials
		Assigns user the O365 Business Essentials license
        .PARAMETER AutomateFree
		Assigns user the Power Automate Free license
        .PARAMETER AutomatePro
		Assigns user the Power Automate Pro license
        .PARAMETER PBIFree
		Assigns user the PowerBI Free license
        .PARAMETER PBIPro
		Assigns user the PowerBI Pro license
        .PARAMETER ProjPrem
		Assigns user the Project Premium (Plan 3) license
        .PARAMETER ProjPro
		Assigns user the Project Pro (Plan 5) license
        .PARAMETER Visio
		Assigns user the Visio (Plan 2) license
        ===========================================================================
		.EXAMPLE
		Assign-AADUserLicense -UPN bjameson@example.com -E3 -Visio <--- Assigns E3 and Visio licenses to bjameson@example.com
	#>
		
		$token = Get-MsalToken -clientid $ClientID -tenantid organizations
		$global:header = @{ 'Authorization' = $token.createauthorizationHeader(); 'ConsistencyLevel' = 'eventual' }
		$E3SkuId = "05e9a617-0261-4cee-bb44-138d3ef5d965"
		$E5SkuId = "06ebc4ee-1bb5-47dd-8120-11324bc54e06"
		$ExStdSkuId = "4b9405b0-7788-4568-add1-99614e613b69"
		$ExEntSkuId = "19ec0d23-8335-4cbd-94ac-6050e30712fa"
		$StreamSkuId = "1f2f344a-700d-42c9-9427-5cea1d5d7ba6"
		$EssentSkuId = "3b555118-da6a-4418-894f-7df1e2096870"
		$FlowFreeSkuId = "f30db892-07e9-47e9-837c-80727f46fd3d"
		$FlowProSkuId = "bc946dac-7877-4271-b2f7-99d2db13cd2c"
		$PBIFreeSkuId = "a403ebcc-fae0-4ca2-8c8c-7a907fd6c235"
		$PBIProSkuId = "f8a1db68-be16-40ed-86d5-cb42ce701560"
		$ProjPremSkuId = "09015f9f-377f-4538-bbb5-f75ceb09358a"
		$ProjProSkuId = "53818b1b-4a27-454b-8896-0dba576410e6"
		$VisioSkuId = "c5928f49-12ba-48f7-ada3-0d743a3601d5"
		$WStoreSkuId = "6470687e-a428-4b7a-bef2-8a291ad947c9"
		
		If ($E3)
		{
			
			$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
			$Body = @{
				
				addLicenses = @(@{ "skuId" = $E3SkuId })
				removeLicenses = @()
				
			}
			$JSON = $Body | ConvertTo-Json
			Try
			{
				
				Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
			}
			$ResponseBody
			
		}
		If ($E5)
		{
			
			$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
			$Body = @{
				
				addLicenses = @(@{ "skuId" = $E5SkuId })
				removeLicenses = @()
				
			}
			$JSON = $Body | ConvertTo-Json
			Try
			{
				
				Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
			}
			$ResponseBody
			
		}
		If ($ExchangeStd)
		{
			
			$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
			$Body = @{
				
				addLicenses = @(@{ "skuId" = $ExStdSkuId })
				removeLicenses = @()
				
			}
			$JSON = $Body | ConvertTo-Json
			Try
			{
				
				Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
			}
			$ResponseBody
			
		}
		If ($ExchangeEnt)
		{
			
			$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
			$Body = @{
				
				addLicenses = @(@{ "skuId" = $ExEntSkuId })
				removeLicenses = @()
				
			}
			$JSON = $Body | ConvertTo-Json
			Try
			{
				
				Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
			}
			$ResponseBody
			
		}
		If ($Stream)
		{
			
			$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
			$Body = @{
				
				addLicenses = @(@{ "skuId" = $SteamSkuId })
				removeLicenses = @()
				
			}
			$JSON = $Body | ConvertTo-Json
			Try
			{
				
				Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
			}
			$ResponseBody
			
		}
		If ($Essentials)
		{
			
			$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
			$Body = @{
				
				addLicenses = @(@{ "skuId" = $EssentSkuId })
				removeLicenses = @()
				
			}
			$JSON = $Body | ConvertTo-Json
			Try
			{
				
				Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
			}
			$ResponseBody
			
		}
		If ($AutomateFree)
		{
			
			$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
			$Body = @{
				
				addLicenses = @(@{ "skuId" = $FlowFreeSkuId })
				removeLicenses = @()
				
			}
			$JSON = $Body | ConvertTo-Json
			Try
			{
				
				Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
			}
			$ResponseBody
			
		}
		If ($AutomatePro)
		{
			
			$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
			$Body = @{
				
				addLicenses = @(@{ "skuId" = $FlowProSkuId })
				removeLicenses = @()
				
			}
			$JSON = $Body | ConvertTo-Json
			Try
			{
				
				Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
			}
			$ResponseBody
			
		}
		If ($PBIFree)
		{
			
			$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
			$Body = @{
				
				addLicenses = @(@{ "skuId" = $PBIFreeSkuId })
				removeLicenses = @()
				
			}
			$JSON = $Body | ConvertTo-Json
			Try
			{
				
				Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
			}
			$ResponseBody
			
			
		}
		If ($PBIPro)
		{
			
			$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
			$Body = @{
				
				addLicenses = @(@{ "skuId" = $PBIProSkuId })
				removeLicenses = @()
				
			}
			$JSON = $Body | ConvertTo-Json
			Try
			{
				
				Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
			}
			$ResponseBody
			
			
		}
		If ($ProjectPrem)
		{
			
			$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
			$Body = @{
				
				addLicenses = @(@{ "skuId" = $ProjPremSkuId })
				removeLicenses = @()
				
			}
			$JSON = $Body | ConvertTo-Json
			Try
			{
				
				Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
			}
			$ResponseBody
			
			
		}
		If ($ProjectPro)
		{
			
			$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
			$Body = @{
				
				addLicenses = @(@{ "skuId" = $ProjProSkuId })
				removeLicenses = @()
				
			}
			$JSON = $Body | ConvertTo-Json
			Try
			{
				
				Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
			}
			$ResponseBody
			
			
		}
		If ($Visio)
		{
			
			$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
			$Body = @{
				
				addLicenses = @(@{ "skuId" = $VisioSkuId })
				removeLicenses = @()
				
			}
			$JSON = $Body | ConvertTo-Json
			Try
			{
				
				Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
			}
			$ResponseBody
			
			
		}
		If ($WStore)
		{
			
			$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
			$Body = @{
				
				addLicenses = @(@{ "skuId" = $WStoreSkuId })
				removeLicenses = @()
				
			}
			$JSON = $Body | ConvertTo-Json
			Try
			{
				
				Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
			}
			$ResponseBody
			
			
		}
		
	}
	function New-AADUser
	{
		
		[CmdletBinding()]
		Param (
			[Parameter(Mandatory = $True)]
			[String]$FName,
			[Parameter(Mandatory = $True)]
			[String]$LName,
			[Parameter(Mandatory = $True)]
			[String]$Title,
			[Parameter(Mandatory = $True)]
			[String]$Office,
			[Parameter(Mandatory = $True)]
			[String]$Manager,
			[Parameter(Mandatory = $True)]
			[String]$Dept,
			[Parameter()]
			[String]$Mobile,
			[Parameter()]
			[String]$Group,
			[Parameter()]
			[Switch]$Multi,
			[Parameter()]
			[String]$File,
			[Parameter()]
			[Switch]$E3,
			[parameter()]
			[Switch]$E5,
			[Parameter()]
			[Switch]$ExchangeStd,
			[Parameter()]
			[Switch]$ExchangeEnt,
			[Parameter()]
			[Switch]$PBIFree,
			[Parameter()]
			[Switch]$PBIPro,
			[Parameter()]
			[Switch]$Visio
		)
		
    <#
        IMPORTANT:
        ===========================================================================
        This script is provided 'as is' without any warranty. Any issues stemming 
        from use is on the user.
        ===========================================================================
		.DESCRIPTION
		Creates new AzureAD User, assigning specified licenses and groups

        Things to change to work for your environment:
        Line 147: add your company's domain name after @ for full email address
        Lines 158, 175, 192, 209: add your company name
        ===========================================================================
		.PARAMETER FName
		New user's first name
		.PARAMETER LName
        New user's last name
        .PARAMETER Title
        New user's title
        .PARAMETER Office
        New user's office location
        .PARAMETER Manager
        New user's manager
        .PARAMETER Dept
        New user's department
        .PARAMETER Mobile
        New user's mobile number, if applicable
        .PARAMETER Group
        Specifies displayname of a single group to add new user to
        .PARAMETER Multi
        Switch for adding new user to multiple groups
        .PARAMETER File
        Path to text file containing all the groups new user is to be added to
        .PARAMETER E3
        Switch that assigns Microsoft 365 E3 license to new user
        .PARAMETER E5
        Switch that assigns Microsoft 365 E5 license to new user
        .PARAMETER ExchangeStd
        Switch that assigns Microsoft 365 ExchangeOnline Standard (Plan 1) license to new user
        .PARAMETER ExchangeEnt
        Switch that assigns Microsoft 365 ExchangeOnline Enterprise (Plan 2) license to new user
        .PARAMETER PBIFree
        Switch that assigns Microsoft 365 PowerBI (free) license to new user
        .PARAMETER PBIPro
        Switch that assigns Microsoft 365 PowerBI Pro license to new user
        .PARAMETER Visio
        Switch that assigns Microsoft 365 Visio license to new user
        ===========================================================================
		.EXAMPLE
		New-AADUser -FName Bob -LName Jameson -Title Sr. System's Administrator -Office CA -Manager alex@contoso.com -Dept IT -Mobile 999-999-9999 -Multi -File C:\Temp\Groups.txt -E5 -PBIPro -Visio
        ^--- The above example creates a new user named Bob Jameson, email bjameson@contoso.com, and assign the specified properties to him
	#>
		
		$token = Get-MsalToken -clientid $ClientID -tenantid organizations
		$global:header = @{ 'Authorization' = $token.createauthorizationHeader() }
		function Add-AADGroupMember
		{
			
			[cmdletbinding()]
			param (
				
				[Parameter(Mandatory = $True)]
				[String]$UPN,
				[Parameter()]
				[String]$Group,
				[Parameter()]
				[Switch]$Multi,
				[Parameter()]
				[String]$File
			)
			
			function Get-AADUser
			{
				
				[cmdletbinding()]
				param (
					
					[Parameter()]
					[Switch]$All,
					[Parameter()]
					[String]$UPN
					
				)
				
				If ($All)
				{
					
					$token = Get-MsalToken -clientid $ClientID -tenantid organizations
					$global:header = @{ 'Authorization' = $token.createauthorizationHeader() }
					$uri = "https://graph.microsoft.com/v1.0/users"
					$Users = While (!$NoMoreUsers)
					{
						
						$GetUsers = Invoke-RestMethod -uri $uri -headers $Header -method GET
						$getUsers.value
						If ($getUsers."@odata.nextlink")
						{
							
							$uri = $getUsers."@odata.nextlink"
							
						}
						Else
						{
							
							$NoMoreUsers = $True
							
						}
					}
					$NoMoreUsers = $False
					$Users | select displayName | sort displayName
					
				}
				elseif ($UPN -ne $Null)
				{
					
					$Uri = "https://graph.microsoft.com/v1.0/users/$UPN"
					Invoke-RestMethod -Uri $Uri -Headers $Header -Method Get
					
				}
				else
				{
					
					Write-Host "Please specify individual group or use All switch."
					
				}
				
			}
			function Get-AADGroup
			{
				
				[cmdletbinding()]
				param (
					
					[Parameter()]
					[Switch]$All,
					[Parameter()]
					[String]$Name
					
				)
				
				If ($All)
				{
					
					$token = Get-MsalToken -clientid $ClientID -tenantid organizations
					$global:header = @{ 'Authorization' = $token.createauthorizationHeader(); 'ConsistencyLevel' = 'eventual' }
					$uri = "https://graph.microsoft.com/v1.0/groups"
					$Groups = While (!$NoMoreGroups)
					{
						
						$GetGroups = Invoke-RestMethod -uri $uri -headers $Header -method GET
						$getGroups.value
						If ($getGroups."@odata.nextlink")
						{
							
							$uri = $getGroups."@odata.nextlink"
							
						}
						Else
						{
							
							$NoMoreGroups = $True
							
						}
					}
					$NoMoreGroups = $False
					$Groups | select displayName | sort displayName
					
				}
				elseif ($Name -ne $Null)
				{
					
					$Uri = "https://graph.microsoft.com/v1.0/groups"
					$Groups = While (!$NoMoreGroups)
					{
						
						$GetGroups = Invoke-RestMethod -uri $uri -headers $Header -method GET
						$getGroups.value
						If ($getGroups."@odata.nextlink")
						{
							
							$uri = $getGroups."@odata.nextlink"
							
						}
						Else
						{
							
							$NoMoreGroups = $True
							
						}
					}
					$NoMoreGroups = $False
					$Groups | where { $_.displayName -eq $Name }
					
				}
				else
				{
					
					Write-Host "Please specify individual group or use All switch."
					
				}
				
			}
			
			
			If (($Group -ne $Null) -and (!$Multi))
			{
				
				$UserToAdd = Get-AADUser -UPN $UPN
				$AddTo = Get-AADGroup -Name $Group
				$AddtoUri = "https://graph.microsoft.com/v1.0/groups/$($AddTo.Id)/members/`$ref"
				$Body = @{ "@odata.id" = "https://graph.microsoft.com/v1.0/directoryObjects/$($UserToAdd.Id)" } | ConvertTo-Json
				Invoke-RestMethod -Uri $AddtoUri -Headers $Header -Method "Post" -ContentType "application/json" -Body $Body
				
			}
			else
			{
				
				
				$GroupsToAdd = Get-Content $File
				foreach ($G in $GroupsToAdd)
				{
					
					$UserToAdd = Get-AADUser -UPN $UPN
					$AddTo = Get-AADGroup -Name $G
					$AddtoUri = "https://graph.microsoft.com/v1.0/groups/$($AddTo.Id)/members/`$ref"
					$Body = @{ "@odata.id" = "https://graph.microsoft.com/v1.0/directoryObjects/$($UserToAdd.Id)" } | ConvertTo-Json
					Invoke-RestMethod -Uri $AddtoUri -Headers $Header -Method "Post" -ContentType "application/json" -Body $Body
					
				}
				
			}
			
		}
		function Get-AADGroup
		{
			
			[cmdletbinding()]
			param (
				
				[Parameter()]
				[Switch]$All,
				[Parameter()]
				[String]$Name
				
			)
			
			If ($All)
			{
				
				$token = Get-MsalToken -clientid $ClientID -tenantid organizations
				$header = @{ 'Authorization' = $token.createauthorizationHeader(); 'ConsistencyLevel' = 'eventual' }
				$uri = "https://graph.microsoft.com/v1.0/groups"
				$Groups = While (!$NoMoreGroups)
				{
					
					Try
					{
						
						$GetGroups = Invoke-RestMethod -uri $uri -headers $header -method GET
						
					}
					catch
					{
						$ResponseResult = $_.Exception.Response.GetResponseStream()
						$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
						$ResponseBody = $ResponseReader.ReadToEnd()
					}
					$ResponseBody
					$getGroups.value
					If ($getGroups."@odata.nextlink")
					{
						
						$uri = $getGroups."@odata.nextlink"
						
					}
					Else
					{
						
						$NoMoreGroups = $True
						
					}
					$NoMoreGroups = $False
					$Groups | select displayName | sort displayName
					
				}
				elseif ($Name -ne $Null)
				{
					
					$Uri = "https://graph.microsoft.com/v1.0/groups"
					$Groups = While (!$NoMoreGroups)
					{
						
						Try
						{
							
							$GetGroups = Invoke-RestMethod -uri $uri -headers $header -method GET
							
						}
						catch
						{
							$ResponseResult = $_.Exception.Response.GetResponseStream()
							$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
							$ResponseBody = $ResponseReader.ReadToEnd()
						}
						$ResponseBody
						$getGroups.value
						If ($getGroups."@odata.nextlink")
						{
							
							$uri = $getGroups."@odata.nextlink"
							
						}
						Else
						{
							
							$NoMoreGroups = $True
							
						}
					}
					$NoMoreGroups = $False
					$Groups | where { $_.displayName -eq $Name }
					
				}
				else
				{
					
					Write-Host "Please specify individual group or use All switch."
					
				}
				
			}
			
			
			If (($Group -ne $Null) -and (!$Multi))
			{
				
				$UserToAdd = Get-AADUser -UPN $UPN
				$AddTo = Get-AADGroup -Name $Group
				$AddtoUri = "https://graph.microsoft.com/v1.0/groups/$($AddTo.Id)/members/`$ref"
				$Body = @{ "@odata.id" = "https://graph.microsoft.com/v1.0/directoryObjects/$($UserToAdd.Id)" } | ConvertTo-Json
				Try
				{
					
					Invoke-RestMethod -Uri $AddtoUri -Headers $header -Method "Post" -ContentType "application/json" -Body $Body
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
			}
			else
			{
				
				
				$GroupsToAdd = Get-Content $File
				foreach ($G in $GroupsToAdd)
				{
					
					$UserToAdd = Get-AADUser -UPN $UPN
					$AddTo = Get-AADGroup -Name $G
					$AddtoUri = "https://graph.microsoft.com/v1.0/groups/$($AddTo.Id)/members/`$ref"
					$Body = @{ "@odata.id" = "https://graph.microsoft.com/v1.0/directoryObjects/$($UserToAdd.Id)" } | ConvertTo-Json
					Try
					{
						
						Invoke-RestMethod -Uri $AddtoUri -Headers $header -Method "Post" -ContentType "application/json" -Body $Body
						
					}
					catch
					{
						$ResponseResult = $_.Exception.Response.GetResponseStream()
						$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
						$ResponseBody = $ResponseReader.ReadToEnd()
					}
					$ResponseBody
					
				}
				
			}
			
		}
		function Update-AADUser
		{
			
			[CmdletBinding()]
			Param (
				[Parameter(Mandatory = $True)]
				[String]$UPN,
				[Parameter()]
				[String]$FName,
				[Parameter()]
				[String]$LName,
				[Parameter()]
				[String]$Title,
				[Parameter()]
				[String]$Office,
				[Parameter()]
				[String]$Manager,
				[Parameter()]
				[String]$Dept,
				[Parameter()]
				[String]$Mobile,
				[Parameter()]
				[String]$Company,
				[Parameter()]
				[Switch]$Location
				
			)
			
			$token = Get-MsalToken -clientid $ClientID -tenantid organizations
			$global:header = @{ 'Authorization' = $token.createauthorizationHeader() }
			If ($FName)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN"
				$Body = @{
					
					"givenName" = $FName
					
				}
				$JSON = $Body | ConvertTo-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Patch -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
			}
			If ($LName)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN"
				$Body = @{
					
					"surname" = $LName
					
				}
				$JSON = $Body | ConvertTo-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Patch -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
			}
			If ($Title)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN"
				$Body = @{
					
					"jobTitle" = $Title
					
				}
				$JSON = $Body | ConvertTo-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Patch -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
			}
			If ($Office)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN"
				$Body = @{
					
					"officeLocation" = $Office
					
				}
				$JSON = $Body | ConvertTo-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Patch -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
			}
			If ($Manager)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/manager/`$ref"
				$Body = @{
					
					"@odata.id" = "https://graph.microsoft.com/v1.0/users/$Manager"
					
				}
				$JSON = $Body | ConvertTo-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Put -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
			}
			If ($Dept)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN"
				$Body = @{
					
					"department" = $Dept
					
				}
				$JSON = $Body | ConvertTo-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Patch -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
			}
			If ($Mobile)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN"
				$Body = @{
					
					"mobilePhone" = $Mobile
					
				}
				$JSON = $Body | ConvertTo-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Patch -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
			}
			If ($Location)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN"
				$Body = @{
					
					"usageLocation" = "US"
					
				}
				$JSON = $Body | ConvertTo-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Patch -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
			}
			If ($Company)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN"
				$Body = @{
					
					"companyName" = $Company
					
				}
				$JSON = $Body | ConvertTo-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Patch -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
			}
		}
		
		#################################################
		#Generating a secure password
		Function GenerateStrongPassword ([Parameter(Mandatory = $true)][int]$PasswordLength)
		{
			
			Add-Type -AssemblyName System.Web
			$PassComplexCheck = $false
			do
			{
				
				$newPassword = [System.Web.Security.Membership]::GeneratePassword($PasswordLength, 3)
				If (($newPassword -cmatch "[A-Z\p{Lu}\s]") `
					-and ($newPassword -cmatch "[a-z\p{Ll}\s]") `
					-and ($newPassword -match "[\d]") `
					-and ($newPassword -match "[^\w]")
				)
				{
					$PassComplexCheck = $True
				}
				
			}
			
			While ($PassComplexCheck -eq $false)
			return $newPassword
			
		}
		
		#################################################
		$Password = GenerateStrongPassword(12)
		Set-Clipboard -Value $Password
		Write-Host "Password copied to clipboard!" -f Green
		#################################################
		#Creating the User
		$Initial = $FName.SubString(0, 1)
		$UPN = "$Initial$LName@$Domain"
		$Uri = "https://graph.microsoft.com/v1.0/users"
		$body = @{
			
			"accountEnabled"  = $true;
			"displayName"	  = "$FName $LName";
			"mailNickname"    = "$Initial$LName";
			"passwordProfile" = @{
				
				"forceChangePasswordNextSignIn" = $True;
				"password"					    = $Password
				
			};
			"userPrincipalName" = $UPN
			
		}
		$JSON = $Body | ConvertTo-Json
		Try
		{
			
			Write-Host "Creating user $FName $LName..." -f White
			Invoke-RestMethod -Uri $Uri -Body $JSON -Header $Header -Method Post -ContentType "application/Json" | Out-Null
			Write-Host "================================" -f Green
			
		}
		catch
		{
			$ResponseResult = $_.Exception.Response.GetResponseStream()
			$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
			$ResponseBody = $ResponseReader.ReadToEnd()
		}
		$ResponseBody
		Start-Sleep -s 5
		If ($Mobile)
		{
			
			Update-AADUser -UPN $UPN -FName $FName -LName $LName -Company $Company -Title $Title -Office $Office -Manager $Manager -Dept $Dept -Mobile $Mobile -Location | out-null
			
		}
		else
		{
			
			Update-AADUser -UPN $UPN -FName $FName -LName $LName -Company $Company -Title $Title -Office $Office -Manager $Manager -Dept $Dept -Location | out-null
			
		}
		
		Write-Host "User $Fname $LName created successfully." -f Green
		Write-Host "================================" -f Green
		#################################################
		
		#Updating the manager
		Start-Sleep -s 4
		Write-Host "Assigning manager $Manager to user $FName $LName..." -f White
		Update-AADUser -UPN $UPN -Manager $Manager | Out-Null
		Write-Host "================================" -f Green
		Write-Host "Manager $Manager assigned to user $FName $LName." -f Green
		Write-Host "================================" -f Green
		Start-Sleep -s 3
		
		#################################################
		
		#Adding to groups
		If ($Multi)
		{
			
			If ($File -ne $Null -and $File -ne "")
			{
				
				$Fetch = Get-content $File
				foreach ($Line in $Fetch)
				{
					
					Write-Host "Adding user $FName $LName to group $Line..." -f White
					Add-AADGroupMember -UPN $UPN -Group $Line | Out-Null
					Write-Host "================================" -f Green
					Write-Host "User $FName $LName added to group $Line." -f Green
					Write-Host "================================" -f Green
					
				}
				
			}
			else
			{
				
				Write-Host "No file specified." -f Red
				
			}
			
		}
		elseif ($Group -ne $Null -and $Group -ne "")
		{
			
			Write-Host "Adding user $FName $LName to group $Group..." -f White
			Add-AADGroupMember -UPN $UPN -Group $Group | Out-Null
			Write-Host "================================" -f Green
			Write-Host "User $FName $LName added to group $Group." -f Green
			
		}
	}
	$FName = $textFName.Text
	$FirstInitial = $FName.Substring(0, 1)
	$LName = $textLName.Text
	$Title = $textTitle.Text
	$Office = $textOffice.Text
	$Manager = $textManager.Text
	$Department = $textDepartment.Text
	$Mobile = $textMobile.Text
	$Company = $textCompany.Text
	$Domain = $textDomain.Text
	$Selected = $listbox1.SelectedItems
	$UPN = "$FirstInitial" + "$LName" + "@$Domain"
	New-Item -Path "$Env:TEMP\AzureAdministrator\SelectedGroups.txt" -Force
	$Selected | Out-File "$Env:TEMP\AzureAdministrator\SelectedGroups.txt"
	
	If ($Mobile)
	{
		Start-Transcript -Path $Env:ProgramData\AzureAdministrator\Logs\NewUser_Mobile.log
		New-AADUser -FName $FName -LName $LName -Title $Title -Office $Office -Manager $Manager -Dept $Department -Mobile $Mobile -Multi -File "$Env:TEMP\AzureAdministrator\SelectedGroups.txt"
		[System.Windows.Forms.MessageBox]::Show('Password copied to clipboard!', 'Password Generated', 'OK', 'Information')
		Stop-Transcript
	}
	elseif (!$Mobile)
	{
		Start-Transcript -Path $Env:ProgramData\AzureAdministrator\Logs\NewUser_NoMobile.log
		New-AADUser -FName $FName -LName $LName -Title $Title -Office $Office -Manager $Manager -Dept $Department -Multi -File "$Env:TEMP\AzureAdministrator\SelectedGroups.txt"
		[System.Windows.Forms.MessageBox]::Show('Password copied to clipboard!', 'Password Generated', 'OK', 'Information')
		Stop-Transcript
	}
	Start-Transcript -Path $Env:ProgramData\AzureAdministrator\Logs\NewUser_AddLicenses.log
	If ($checkboxExchangeEnterprisePl.Checked)
	{
		Assign-AADUserLicense -UPN $UPN -ExchangeEnt
	}
	If ($checkboxExhangeStandardPlan1.checked)
	{
		Assign-AADUserLicense -UPN $UPN -ExchangeStd
	}
	If ($checkboxMicorosft365E3.checked)
	{
		Assign-AADUserLicense -UPN $UPN -E3
	}
	If ($checkboxMicrosoft365E5.checked)
	{
		Assign-AADUserLicense -UPN $UPN -E5
	}
	If ($checkboxPowerBIFree.checked)
	{
		Assign-AADUserLicense -UPN $UPN -PBIFree
	}
	If ($checkboxPowerBIPro.Checked)
	{
		Assign-AADUserLicense -UPN $UPN -PBIPro
	}
	If ($checkboxVisio.checked)
	{
		Assign-AADUserLicense -UPN $UPN -Visio
	}
	Stop-Transcript
	
	$FormNewUser.Close()
}

$buttonCheckLicenseUsage_Click={
	#TODO: Place custom script here
	start-process https://portal.azure.com/#blade/Microsoft_AAD_IAM/LicensesMenuBlade/Products
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>