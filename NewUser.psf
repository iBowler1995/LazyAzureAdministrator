<File version="3.2">
  <FileID>80d6d2ae-6b1a-4a7d-8c65-7dfd6023b6a5</FileID>
  <Preview>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
0AD86//8j3z5+3/HCVVxSXmdIAiCIAjPGYWl57n95e/5t3/3j8/OAPzhf/uv/Kv/9N+dtxUEQRAE
QXj+0K78/83f/Q/nmP3MDIAgCIIgCD8/xAAIgiAIwgvIn28A/u6/8S//4393FhQEQRAE4efJP/8P
f68MwP/8fgZg8eIl/+H//G//D//H3+N0DYIgCIIg/Ez5v/8n/+P/hW3btv9/fcP8d2vy5Cn/etu2
Hf+kMv+T5hgEQRAEQfi5sv2ftu/Y+U8zZsz4h75hXiQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQi
kUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKR
SCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFI
JBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgk
EolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQS
iUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJ
RCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolE
IpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQi
kUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJ/mz94hf/P6H00Wsal1UAAAAAAElFTkSu
QmCC</Preview>
  <Form>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</Form>
  <Code><![CDATA[
$FormNewUser_Load={
	#TODO: Initialize Form Controls here
	function Get-AADGroup
	{
		
    <#
		IMPORTANT:
        ===========================================================================
        This script is provided 'as is' without any warranty. Any issues stemming 
        from use is on the user.
        ===========================================================================
		.DESCRIPTION
		Gets an Azure AD Group
		===========================================================================
		.PARAMETER All
		Lists all AAD groups by displayName.
		.PARAMETER Name
		The displayName of the group to get.
		===========================================================================
		.EXAMPLE
		Get-AADGroup -All <--- This will return all AzureAD groups
		Get-AADGroup -Name Azure-Test <--- This will return the group Azure-Test
	#>
		
		[cmdletbinding()]
		param (
			
			[Parameter()]
			[Switch]$All,
			[Parameter()]
			[String]$Name
			
		)
		
		$token = Get-MsalToken -clientid $ClientID -tenantid organizations
		$global:header = @{ 'Authorization' = $token.createauthorizationHeader(); 'ConsistencyLevel' = 'eventual' }
		
		If ($All)
		{
			
			$uri = "https://graph.microsoft.com/v1.0/groups"
			$Groups = While (!$NoMoreGroups)
			{
				
				Try
				{
					
					$GetGroups = Invoke-RestMethod -uri $uri -headers $header -method GET
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				$getGroups.value
				If ($getGroups."@odata.nextlink")
				{
					
					$uri = $getGroups."@odata.nextlink"
					
				}
				Else
				{
					
					$NoMoreGroups = $True
					
				}
			}
			$NoMoreGroups = $False
			$Groups | select displayName | sort displayName
			
		}
		elseif ($Name -ne $Null)
		{
			
			$Uri = "https://graph.microsoft.com/v1.0/groups"
			$Groups = While (!$NoMoreGroups)
			{
				
				Try
				{
					
					$GetGroups = Invoke-RestMethod -uri $uri -headers $header -method GET
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				$getGroups.value
				If ($getGroups."@odata.nextlink")
				{
					
					$uri = $getGroups."@odata.nextlink"
					
				}
				Else
				{
					
					$NoMoreGroups = $True
					
				}
			}
			$NoMoreGroups = $False
			$Groups | where { $_.displayName -eq $Name }
			
		}
		else
		{
			
			Write-Host "Please specify individual group or use All switch."
			
		}
		
	}
	#############################################################################
	function Assign-AADUserLicense
	{
		
		[CmdletBinding()]
		param (
			[Parameter(Mandatory = $True)]
			[String]$UPN,
			[Parameter()]
			[Switch]$E3,
			[Parameter()]
			[Switch]$E5,
			[Parameter()]
			[Switch]$ExchangeStd,
			[Parameter()]
			[Switch]$ExchangeEnt,
			[Parameter()]
			[Switch]$Stream,
			[Parameter()]
			[Switch]$Essentials,
			[Parameter()]
			[Switch]$AutomateFree,
			[Parameter()]
			[Switch]$AutomatePro,
			[Parameter()]
			[Switch]$PBIFree,
			[Parameter()]
			[Switch]$PBIPro,
			[Parameter()]
			[Switch]$ProjectPrem,
			[Parameter()]
			[Switch]$ProjectPro,
			[Parameter()]
			[Switch]$Visio,
			[Parameter()]
			[Switch]$WStore
		)
		
    <#
        IMPORTANT:
        ===========================================================================
        This script is provided 'as is' without any warranty. Any issues stemming 
        from use is on the user.
        ===========================================================================
		.DESCRIPTION
		Assigns license(s) to AAD user
        Known bugs/issues as of 3/14/22: 
        Adding multiple licenses in one call can result in function failure due to MS Graph rate limiting
        ===========================================================================
		.PARAMETER UPN
		REQUIRED - Email address/userPrincipalName of the user.
		.PARAMETER E3
		Assigns user the M365 E3 license
        .PARAMETER ExchangeStd
		Assigns user the M365 Exchange Online Standard license
        .PARAMETER ExchangeEnt
		Assigns user the M365 Exchange Online Enterprise license
        .PARAMETER Stream
		Assigns user the Microsoft Stream license
        .PARAMETER Essentials
		Assigns user the O365 Business Essentials license
        .PARAMETER AutomateFree
		Assigns user the Power Automate Free license
        .PARAMETER AutomatePro
		Assigns user the Power Automate Pro license
        .PARAMETER PBIFree
		Assigns user the PowerBI Free license
        .PARAMETER PBIPro
		Assigns user the PowerBI Pro license
        .PARAMETER ProjPrem
		Assigns user the Project Premium (Plan 3) license
        .PARAMETER ProjPro
		Assigns user the Project Pro (Plan 5) license
        .PARAMETER Visio
		Assigns user the Visio (Plan 2) license
        ===========================================================================
		.EXAMPLE
		Assign-AADUserLicense -UPN bjameson@example.com -E3 -Visio <--- Assigns E3 and Visio licenses to bjameson@example.com
	#>
		
		$token = Get-MsalToken -clientid $ClientID -tenantid organizations
		$global:header = @{ 'Authorization' = $token.createauthorizationHeader(); 'ConsistencyLevel' = 'eventual' }
		$E3SkuId = "05e9a617-0261-4cee-bb44-138d3ef5d965"
		$E5SkuId = "06ebc4ee-1bb5-47dd-8120-11324bc54e06"
		$ExStdSkuId = "4b9405b0-7788-4568-add1-99614e613b69"
		$ExEntSkuId = "19ec0d23-8335-4cbd-94ac-6050e30712fa"
		$StreamSkuId = "1f2f344a-700d-42c9-9427-5cea1d5d7ba6"
		$EssentSkuId = "3b555118-da6a-4418-894f-7df1e2096870"
		$FlowFreeSkuId = "f30db892-07e9-47e9-837c-80727f46fd3d"
		$FlowProSkuId = "bc946dac-7877-4271-b2f7-99d2db13cd2c"
		$PBIFreeSkuId = "a403ebcc-fae0-4ca2-8c8c-7a907fd6c235"
		$PBIProSkuId = "f8a1db68-be16-40ed-86d5-cb42ce701560"
		$ProjPremSkuId = "09015f9f-377f-4538-bbb5-f75ceb09358a"
		$ProjProSkuId = "53818b1b-4a27-454b-8896-0dba576410e6"
		$VisioSkuId = "c5928f49-12ba-48f7-ada3-0d743a3601d5"
		$WStoreSkuId = "6470687e-a428-4b7a-bef2-8a291ad947c9"
		$Licenses = @{
			addLicenses    = @();
			removeLicenses = @()
		}
		
		If ($E3)
		{
			
			$Licenses.addLicenses += @{
				skuId = $E3SkuId
			}
			
			
		}
		If ($E5)
		{
			
			$Licenses.addLicenses += @{
				skuId = $E5SkuId
			}
			
			
		}
		If ($ExchangeStd)
		{
			
			$Licenses.addLicenses += @{
				skuId = $ExStdSkuId
			}
			
			
		}
		If ($ExchangeEnt)
		{
			
			$Licenses.addLicenses += @{
				skuId = $ExEntSkuId
			}
			
			
		}
		If ($Stream)
		{
			
			$Licenses.addLicenses += @{
				skuId = $StreamSkuId
			}
			
			
		}
		If ($Essentials)
		{
			
			$Licenses.addLicenses += @{
				skuId = $EssentSkuId
			}
			
			
		}
		If ($AutomateFree)
		{
			
			$Licenses.addLicenses += @{
				skuId = $FlowFreeSkuId
			}
			
		}
		If ($AutomatePro)
		{
			
			$Licenses.addLicenses += @{
				skuId = $FlowProSkuId
			}
			
		}
		If ($PBIFree)
		{
			
			$Licenses.addLicenses += @{
				skuId = $PBIFreeSkuId
			}
			
			
			
		}
		If ($PBIPro)
		{
			
			$Licenses.addLicenses += @{
				skuId = $PBIProSkuId
			}
			
			
			
		}
		If ($ProjectPrem)
		{
			
			$Licenses.addLicenses += @{
				skuId = $ProjPremSkuId
			}
			
			
			
		}
		If ($ProjectPro)
		{
			
			$Licenses.addLicenses += @{
				skuId = $ProjProSkuId
			}
			
			
			
		}
		If ($Visio)
		{
			
			$Licenses.addLicenses += @{
				skuId = $VisioSkuId
			}
			
			
			
		}
		If ($WStore)
		{
			
			$Licenses.addLicenses += @{
				skuId = $WStoreSkuId
			}
			
			
			
		}
		$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
		$JSON = $Licenses | ConvertTo-Json
		Try
		{
			
			Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
			
		}
		catch
		{
			$ResponseResult = $_.Exception.Response.GetResponseStream()
			$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
			$ResponseBody = $ResponseReader.ReadToEnd()
			$ResponseBody
		}
		
	}
	#############################################################################
	function New-AADUser
	{
		
		[CmdletBinding()]
		Param (
			[Parameter(Mandatory = $True)]
			[String]$FName,
			[Parameter(Mandatory = $True)]
			[String]$LName,
			[Parameter(Mandatory = $True)]
			[String]$Title,
			[Parameter(Mandatory = $True)]
			[String]$Office,
			[Parameter(Mandatory = $True)]
			[String]$Manager,
			[Parameter(Mandatory = $True)]
			[String]$Dept,
			[Parameter()]
			[String]$Mobile,
			[Parameter()]
			[String]$Group,
			[Parameter()]
			[Switch]$Multi,
			[Parameter()]
			[String]$File,
			[Parameter()]
			[Switch]$E3,
			[parameter()]
			[Switch]$E5,
			[Parameter()]
			[Switch]$ExchangeStd,
			[Parameter()]
			[Switch]$ExchangeEnt,
			[Parameter()]
			[Switch]$PBIFree,
			[Parameter()]
			[Switch]$PBIPro,
			[Parameter()]
			[Switch]$Visio
		)
		
    <#
        IMPORTANT:
        ===========================================================================
        This script is provided 'as is' without any warranty. Any issues stemming 
        from use is on the user.
        ===========================================================================
		.DESCRIPTION
		Creates new AzureAD User, assigning specified licenses and groups

        Things to change to work for your environment:
        Line 147: add your company's domain name after @ for full email address
        Lines 158, 175, 192, 209: add your company name
        ===========================================================================
		.PARAMETER FName
		New user's first name
		.PARAMETER LName
        New user's last name
        .PARAMETER Title
        New user's title
        .PARAMETER Office
        New user's office location
        .PARAMETER Manager
        New user's manager
        .PARAMETER Dept
        New user's department
        .PARAMETER Mobile
        New user's mobile number, if applicable
        .PARAMETER Group
        Specifies displayname of a single group to add new user to
        .PARAMETER Multi
        Switch for adding new user to multiple groups
        .PARAMETER File
        Path to text file containing all the groups new user is to be added to
        .PARAMETER E3
        Switch that assigns Microsoft 365 E3 license to new user
        .PARAMETER E5
        Switch that assigns Microsoft 365 E5 license to new user
        .PARAMETER ExchangeStd
        Switch that assigns Microsoft 365 ExchangeOnline Standard (Plan 1) license to new user
        .PARAMETER ExchangeEnt
        Switch that assigns Microsoft 365 ExchangeOnline Enterprise (Plan 2) license to new user
        .PARAMETER PBIFree
        Switch that assigns Microsoft 365 PowerBI (free) license to new user
        .PARAMETER PBIPro
        Switch that assigns Microsoft 365 PowerBI Pro license to new user
        .PARAMETER Visio
        Switch that assigns Microsoft 365 Visio license to new user
        ===========================================================================
		.EXAMPLE
		New-AADUser -FName Bob -LName Jameson -Title Sr. System's Administrator -Office CA -Manager alex@contoso.com -Dept IT -Mobile 999-999-9999 -Multi -File C:\Temp\Groups.txt -E5 -PBIPro -Visio
        ^--- The above example creates a new user named Bob Jameson, email bjameson@contoso.com, and assign the specified properties to him
	#>
		
		$token = Get-MsalToken -clientid $ClientID -tenantid organizations
		$global:header = @{ 'Authorization' = $token.createauthorizationHeader() }
		function Add-AADGroupMember
		{
			
			[cmdletbinding()]
			param (
				
				[Parameter(Mandatory = $True)]
				[String]$UPN,
				[Parameter()]
				[String]$Group,
				[Parameter()]
				[Switch]$Multi,
				[Parameter()]
				[String]$File
			)
			
			function Get-AADUser
			{
				
				[cmdletbinding()]
				param (
					
					[Parameter()]
					[Switch]$All,
					[Parameter()]
					[String]$UPN
					
				)
				
				If ($All)
				{
					
					$token = Get-MsalToken -clientid $ClientID -tenantid organizations
					$global:header = @{ 'Authorization' = $token.createauthorizationHeader() }
					$uri = "https://graph.microsoft.com/v1.0/users"
					$Users = While (!$NoMoreUsers)
					{
						
						$GetUsers = Invoke-RestMethod -uri $uri -headers $Header -method GET
						$getUsers.value
						If ($getUsers."@odata.nextlink")
						{
							
							$uri = $getUsers."@odata.nextlink"
							
						}
						Else
						{
							
							$NoMoreUsers = $True
							
						}
					}
					$NoMoreUsers = $False
					$Users | select displayName | sort displayName
					
				}
				elseif ($UPN -ne $Null)
				{
					
					$Uri = "https://graph.microsoft.com/v1.0/users/$UPN"
					Invoke-RestMethod -Uri $Uri -Headers $Header -Method Get
					
				}
				else
				{
					
					Write-Host "Please specify individual group or use All switch."
					
				}
				
			}
			function Get-AADGroup
			{
				
				[cmdletbinding()]
				param (
					
					[Parameter()]
					[Switch]$All,
					[Parameter()]
					[String]$Name
					
				)
				
				If ($All)
				{
					
					$token = Get-MsalToken -clientid $ClientID -tenantid organizations
					$global:header = @{ 'Authorization' = $token.createauthorizationHeader(); 'ConsistencyLevel' = 'eventual' }
					$uri = "https://graph.microsoft.com/v1.0/groups"
					$Groups = While (!$NoMoreGroups)
					{
						
						$GetGroups = Invoke-RestMethod -uri $uri -headers $Header -method GET
						$getGroups.value
						If ($getGroups."@odata.nextlink")
						{
							
							$uri = $getGroups."@odata.nextlink"
							
						}
						Else
						{
							
							$NoMoreGroups = $True
							
						}
					}
					$NoMoreGroups = $False
					$Groups | select displayName | sort displayName
					
				}
				elseif ($Name -ne $Null)
				{
					
					$Uri = "https://graph.microsoft.com/v1.0/groups"
					$Groups = While (!$NoMoreGroups)
					{
						
						$GetGroups = Invoke-RestMethod -uri $uri -headers $Header -method GET
						$getGroups.value
						If ($getGroups."@odata.nextlink")
						{
							
							$uri = $getGroups."@odata.nextlink"
							
						}
						Else
						{
							
							$NoMoreGroups = $True
							
						}
					}
					$NoMoreGroups = $False
					$Groups | where { $_.displayName -eq $Name }
					
				}
				else
				{
					
					Write-Host "Please specify individual group or use All switch."
					
				}
				
			}
			
			
			If (($Group -ne $Null) -and (!$Multi))
			{
				
				$UserToAdd = Get-AADUser -UPN $UPN
				$AddTo = Get-AADGroup -Name $Group
				$AddtoUri = "https://graph.microsoft.com/v1.0/groups/$($AddTo.Id)/members/`$ref"
				$Body = @{ "@odata.id" = "https://graph.microsoft.com/v1.0/directoryObjects/$($UserToAdd.Id)" } | ConvertTo-Json
				Invoke-RestMethod -Uri $AddtoUri -Headers $Header -Method "Post" -ContentType "application/json" -Body $Body
				
			}
			else
			{
				
				
				$GroupsToAdd = Get-Content $File
				foreach ($G in $GroupsToAdd)
				{
					
					$UserToAdd = Get-AADUser -UPN $UPN
					$AddTo = Get-AADGroup -Name $G
					$AddtoUri = "https://graph.microsoft.com/v1.0/groups/$($AddTo.Id)/members/`$ref"
					$Body = @{ "@odata.id" = "https://graph.microsoft.com/v1.0/directoryObjects/$($UserToAdd.Id)" } | ConvertTo-Json
					Invoke-RestMethod -Uri $AddtoUri -Headers $Header -Method "Post" -ContentType "application/json" -Body $Body
					
				}
				
			}
			
		}
		function Get-AADGroup
		{
			
			[cmdletbinding()]
			param (
				
				[Parameter()]
				[Switch]$All,
				[Parameter()]
				[String]$Name
				
			)
			
			If ($All)
			{
				
				$token = Get-MsalToken -clientid $ClientID -tenantid organizations
				$header = @{ 'Authorization' = $token.createauthorizationHeader(); 'ConsistencyLevel' = 'eventual' }
				$uri = "https://graph.microsoft.com/v1.0/groups"
				$Groups = While (!$NoMoreGroups)
				{
					
					Try
					{
						
						$GetGroups = Invoke-RestMethod -uri $uri -headers $header -method GET
						
					}
					catch
					{
						$ResponseResult = $_.Exception.Response.GetResponseStream()
						$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
						$ResponseBody = $ResponseReader.ReadToEnd()
					}
					$ResponseBody
					$getGroups.value
					If ($getGroups."@odata.nextlink")
					{
						
						$uri = $getGroups."@odata.nextlink"
						
					}
					Else
					{
						
						$NoMoreGroups = $True
						
					}
					$NoMoreGroups = $False
					$Groups | select displayName | sort displayName
					
				}
				elseif ($Name -ne $Null)
				{
					
					$Uri = "https://graph.microsoft.com/v1.0/groups"
					$Groups = While (!$NoMoreGroups)
					{
						
						Try
						{
							
							$GetGroups = Invoke-RestMethod -uri $uri -headers $header -method GET
							
						}
						catch
						{
							$ResponseResult = $_.Exception.Response.GetResponseStream()
							$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
							$ResponseBody = $ResponseReader.ReadToEnd()
						}
						$ResponseBody
						$getGroups.value
						If ($getGroups."@odata.nextlink")
						{
							
							$uri = $getGroups."@odata.nextlink"
							
						}
						Else
						{
							
							$NoMoreGroups = $True
							
						}
					}
					$NoMoreGroups = $False
					$Groups | where { $_.displayName -eq $Name }
					
				}
				else
				{
					
					Write-Host "Please specify individual group or use All switch."
					
				}
				
			}
			
			
			If (($Group -ne $Null) -and (!$Multi))
			{
				
				$UserToAdd = Get-AADUser -UPN $UPN
				$AddTo = Get-AADGroup -Name $Group
				$AddtoUri = "https://graph.microsoft.com/v1.0/groups/$($AddTo.Id)/members/`$ref"
				$Body = @{ "@odata.id" = "https://graph.microsoft.com/v1.0/directoryObjects/$($UserToAdd.Id)" } | ConvertTo-Json
				Try
				{
					
					Invoke-RestMethod -Uri $AddtoUri -Headers $header -Method "Post" -ContentType "application/json" -Body $Body
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
			}
			else
			{
				
				
				$GroupsToAdd = Get-Content $File
				foreach ($G in $GroupsToAdd)
				{
					
					$UserToAdd = Get-AADUser -UPN $UPN
					$AddTo = Get-AADGroup -Name $G
					$AddtoUri = "https://graph.microsoft.com/v1.0/groups/$($AddTo.Id)/members/`$ref"
					$Body = @{ "@odata.id" = "https://graph.microsoft.com/v1.0/directoryObjects/$($UserToAdd.Id)" } | ConvertTo-Json
					Try
					{
						
						Invoke-RestMethod -Uri $AddtoUri -Headers $header -Method "Post" -ContentType "application/json" -Body $Body
						
					}
					catch
					{
						$ResponseResult = $_.Exception.Response.GetResponseStream()
						$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
						$ResponseBody = $ResponseReader.ReadToEnd()
					}
					$ResponseBody
					
				}
				
			}
			
		}
		function Update-AADUser
		{
			
			[CmdletBinding()]
			Param (
				[Parameter(Mandatory = $True)]
				[String]$UPN,
				[Parameter()]
				[String]$FName,
				[Parameter()]
				[String]$LName,
				[Parameter()]
				[String]$Title,
				[Parameter()]
				[String]$Office,
				[Parameter()]
				[String]$Manager,
				[Parameter()]
				[String]$Dept,
				[Parameter()]
				[String]$Mobile,
				[Parameter()]
				[String]$Company,
				[Parameter()]
				[Switch]$Location
				
			)
			
			$token = Get-MsalToken -clientid $ClientID -tenantid organizations
			$global:header = @{ 'Authorization' = $token.createauthorizationHeader() }
			If ($FName)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN"
				$Body = @{
					
					"givenName" = $FName
					
				}
				$JSON = $Body | ConvertTo-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Patch -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
			}
			If ($LName)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN"
				$Body = @{
					
					"surname" = $LName
					
				}
				$JSON = $Body | ConvertTo-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Patch -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
			}
			If ($Title)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN"
				$Body = @{
					
					"jobTitle" = $Title
					
				}
				$JSON = $Body | ConvertTo-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Patch -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
			}
			If ($Office)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN"
				$Body = @{
					
					"officeLocation" = $Office
					
				}
				$JSON = $Body | ConvertTo-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Patch -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
			}
			If ($Manager)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/manager/`$ref"
				$Body = @{
					
					"@odata.id" = "https://graph.microsoft.com/v1.0/users/$Manager"
					
				}
				$JSON = $Body | ConvertTo-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Put -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
			}
			If ($Dept)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN"
				$Body = @{
					
					"department" = $Dept
					
				}
				$JSON = $Body | ConvertTo-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Patch -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
			}
			If ($Mobile)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN"
				$Body = @{
					
					"mobilePhone" = $Mobile
					
				}
				$JSON = $Body | ConvertTo-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Patch -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
			}
			If ($Location)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN"
				$Body = @{
					
					"usageLocation" = "US"
					
				}
				$JSON = $Body | ConvertTo-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Patch -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
			}
			If ($Company)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN"
				$Body = @{
					
					"companyName" = $Company
					
				}
				$JSON = $Body | ConvertTo-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Patch -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
			}
		}
		
		#################################################
		#Generating a secure password
		function GenerateStrongPassword
		{
			param (
				[Parameter(Mandatory)]
				[ValidateRange(4, [int]::MaxValue)]
				[int]$length,
				[int]$upper = 1,
				[int]$lower = 1,
				[int]$numeric = 1,
				[int]$special = 1
			)
			if ($upper + $lower + $numeric + $special -gt $length)
			{
				throw "number of upper/lower/numeric/special char must be lower or equal to length"
			}
			$uCharSet = "ABCDEFGHJKMNPQRSTUWXYZ"
			$lCharSet = "abcdfhjkmnrstuwxyz"
			$nCharSet = "23456789"
			$sCharSet = "/*-+!?=@_"
			$charSet = ""
			if ($upper -gt 0) { $charSet += $uCharSet }
			if ($lower -gt 0) { $charSet += $lCharSet }
			if ($numeric -gt 0) { $charSet += $nCharSet }
			if ($special -gt 0) { $charSet += $sCharSet }
			$charSet = $charSet.ToCharArray()
			$rng = New-Object System.Security.Cryptography.RNGCryptoServiceProvider
			$bytes = New-Object byte[]($length)
			$rng.GetBytes($bytes)
			$result = New-Object char[]($length)
			for ($i = 0; $i -lt $length; $i++)
			{
				$result[$i] = $charSet[$bytes[$i] % $charSet.Length]
			}
			$password = (-join $result)
			$valid = $true
			if ($upper -gt ($password.ToCharArray() | Where-Object { $_ -cin $uCharSet.ToCharArray() }).Count) { $valid = $false }
			if ($lower -gt ($password.ToCharArray() | Where-Object { $_ -cin $lCharSet.ToCharArray() }).Count) { $valid = $false }
			if ($numeric -gt ($password.ToCharArray() | Where-Object { $_ -cin $nCharSet.ToCharArray() }).Count) { $valid = $false }
			if ($special -gt ($password.ToCharArray() | Where-Object { $_ -cin $sCharSet.ToCharArray() }).Count) { $valid = $false }
			if (!$valid)
			{
				$password = GenerateStrongPassword $length $upper $lower $numeric $special
			}
			return $password
		}
		
		#################################################
		$Password = GenerateStrongPassword(12)
		Set-Clipboard -Value $Password
		Write-Host "Password copied to clipboard!" -f Green
		#################################################
		#Creating the User
		$Initial = $FName.SubString(0, 1)
		$UPN = "$Initial$LName@$Domain"
		$Uri = "https://graph.microsoft.com/v1.0/users"
		$body = @{
			
			"accountEnabled"  = $true;
			"displayName"	  = "$FName $LName";
			"mailNickname"    = "$Initial$LName";
			"passwordProfile" = @{
				
				"forceChangePasswordNextSignIn" = $True;
				"password"					    = $Password
				
			};
			"userPrincipalName" = $UPN
			
		}
		$JSON = $Body | ConvertTo-Json
		Try
		{
			
			Write-Host "Creating user $FName $LName..." -f White
			Invoke-RestMethod -Uri $Uri -Body $JSON -Header $Header -Method Post -ContentType "application/Json" | Out-Null
			Write-Host "================================" -f Green
			
		}
		catch
		{
			$ResponseResult = $_.Exception.Response.GetResponseStream()
			$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
			$ResponseBody = $ResponseReader.ReadToEnd()
		}
		$ResponseBody
		Start-Sleep -s 5
		If ($Mobile)
		{
			
			Update-AADUser -UPN $UPN -FName $FName -LName $LName -Company $Company -Title $Title -Office $Office -Manager $Manager -Dept $Dept -Mobile $Mobile -Location | out-null
			
		}
		else
		{
			
			Update-AADUser -UPN $UPN -FName $FName -LName $LName -Company $Company -Title $Title -Office $Office -Manager $Manager -Dept $Dept -Location | out-null
			
		}
		
		Write-Host "User $Fname $LName created successfully." -f Green
		Write-Host "================================" -f Green
		#################################################
		
		#Updating the manager
		Start-Sleep -s 4
		Write-Host "Assigning manager $Manager to user $FName $LName..." -f White
		Update-AADUser -UPN $UPN -Manager $Manager | Out-Null
		Write-Host "================================" -f Green
		Write-Host "Manager $Manager assigned to user $FName $LName." -f Green
		Write-Host "================================" -f Green
		Start-Sleep -s 3
		
		#################################################
		
		#Assigning Licenses
		If ($E3)
		{
			
			Write-Host "Assigning Microsoft 365 E3 license to $FName $LName..." -f White
			Assign-AADUserLicense -UPN $UPN -E3
			
		}
		If ($E5)
		{
			
			Write-Host "Assigning Microsoft 365 E5 license to $FName $LName..." -f White
			Assign-AADUserLicense -UPN $UPN -E5 | Out-Null
			
		}
		If ($ExchangeStd)
		{
			
			Write-Host "Assigning Exchange Online Standard (Plan 1) license to $FName $LName..." -f White
			Assign-AADUserLicense -UPN $UPN -ExchangeStd | Out-Null
			
		}
		If ($ExchangeEnt)
		{
			
			Write-Host "Assigning Exchange Online Enterprise (Plan 2) license to $FName $LName..." -f White
			Assign-AADUserLicense -UPN $UPN -ExchangeEnt | Out-Null
			
		}
		If ($PBIFree)
		{
			
			Write-Host "Assigning PowerBI Free license to $FName $LName..." -f White
			Assign-AADUserLicense -UPN $UPN -PBIFree
			
		}
		If ($PBIPro)
		{
			
			Write-Host "Assigning PowerBI Pro license to $FName $LName..." -f White
			Assign-AADUserLicense -UPN $UPN -PBIPro | Out-Null
			
		}
		If ($Visio)
		{
			
			Write-Host "Assigning Visio license to $FName $LName..." -f White
			Assign-AADUserLicense -UPN $UPN -Visio | Out-Null
			
		}
		Write-Host "================================" -f Green
		
		#################################################
		
		#Adding to groups
		If ($Multi)
		{
			
			If ($File -ne $Null -and $File -ne "")
			{
				
				$Fetch = Get-content $File
				foreach ($Line in $Fetch)
				{
					
					Write-Host "Adding user $FName $LName to group $Line..." -f White
					Add-AADGroupMember -UPN $UPN -Group $Line | Out-Null
					Write-Host "================================" -f Green
					Write-Host "User $FName $LName added to group $Line." -f Green
					Write-Host "================================" -f Green
					
				}
				
			}
			else
			{
				
				Write-Host "No file specified." -f Red
				
			}
			
		}
		elseif ($Group -ne $Null -and $Group -ne "")
		{
			
			Write-Host "Adding user $FName $LName to group $Group..." -f White
			Add-AADGroupMember -UPN $UPN -Group $Group | Out-Null
			Write-Host "================================" -f Green
			Write-Host "User $FName $LName added to group $Group." -f Green
			
		}
	}
	#############################################################################
	$LoadGroups = Get-AADGroup -All
	$listbox1.SelectionMode = 'MultiExtended'
	
	foreach ($GroupResult in $LoadGroups)
	{
		$listbox1.Items.Add($GroupResult.displayName) | Out-Null
	}
	$NewUserLogFolderExists = (Test-Path -Path "$Env:ProgramData\AzureAdministrator\Logs\NewUser" -PathType Container)
	If (!$NewUserLogFolderExists)
	{
		
		New-Item -Path "$Env:ProgramData\AzureAdministrator\Logs" -Name 'NewUser' -ItemType directory -Force
		
	}
}



#region Control Helper Functions

function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]
		$DisplayMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}
#endregion

$buttonCreateUser_Click= {
	#TODO: Place custom script here
	function New-AADUser
	{
		
		[CmdletBinding()]
		Param (
			[Parameter(Mandatory = $True)]
			[String]$FName,
			[Parameter(Mandatory = $True)]
			[String]$LName,
			[Parameter(Mandatory = $True)]
			[String]$Title,
			[Parameter(Mandatory = $True)]
			[String]$Office,
			[Parameter(Mandatory = $True)]
			[String]$Manager,
			[Parameter(Mandatory = $True)]
			[String]$Dept,
			[Parameter()]
			[String]$Mobile,
			[Parameter()]
			[String]$Group,
			[Parameter()]
			[Switch]$Multi,
			[Parameter()]
			[String]$File,
			[Parameter()]
			[Switch]$E3,
			[parameter()]
			[Switch]$E5,
			[Parameter()]
			[Switch]$ExchangeStd,
			[Parameter()]
			[Switch]$ExchangeEnt,
			[Parameter()]
			[Switch]$PBIFree,
			[Parameter()]
			[Switch]$PBIPro,
			[Parameter()]
			[Switch]$Visio
		)
		
    <#
        IMPORTANT:
        ===========================================================================
        This script is provided 'as is' without any warranty. Any issues stemming 
        from use is on the user.
        ===========================================================================
		.DESCRIPTION
		Creates new AzureAD User, assigning specified licenses and groups

        Things to change to work for your environment:
        Line 147: add your company's domain name after @ for full email address
        Lines 158, 175, 192, 209: add your company name
        ===========================================================================
		.PARAMETER FName
		New user's first name
		.PARAMETER LName
        New user's last name
        .PARAMETER Title
        New user's title
        .PARAMETER Office
        New user's office location
        .PARAMETER Manager
        New user's manager
        .PARAMETER Dept
        New user's department
        .PARAMETER Mobile
        New user's mobile number, if applicable
        .PARAMETER Group
        Specifies displayname of a single group to add new user to
        .PARAMETER Multi
        Switch for adding new user to multiple groups
        .PARAMETER File
        Path to text file containing all the groups new user is to be added to
        .PARAMETER E3
        Switch that assigns Microsoft 365 E3 license to new user
        .PARAMETER E5
        Switch that assigns Microsoft 365 E5 license to new user
        .PARAMETER ExchangeStd
        Switch that assigns Microsoft 365 ExchangeOnline Standard (Plan 1) license to new user
        .PARAMETER ExchangeEnt
        Switch that assigns Microsoft 365 ExchangeOnline Enterprise (Plan 2) license to new user
        .PARAMETER PBIFree
        Switch that assigns Microsoft 365 PowerBI (free) license to new user
        .PARAMETER PBIPro
        Switch that assigns Microsoft 365 PowerBI Pro license to new user
        .PARAMETER Visio
        Switch that assigns Microsoft 365 Visio license to new user
        ===========================================================================
		.EXAMPLE
		New-AADUser -FName Bob -LName Jameson -Title Sr. System's Administrator -Office CA -Manager alex@contoso.com -Dept IT -Mobile 999-999-9999 -Multi -File C:\Temp\Groups.txt -E5 -PBIPro -Visio
        ^--- The above example creates a new user named Bob Jameson, email bjameson@contoso.com, and assign the specified properties to him
	#>
		
		$token = Get-MsalToken -clientid $ClientID -tenantid organizations
		$global:header = @{ 'Authorization' = $token.createauthorizationHeader() }
		function Add-AADGroupMember
		{
			
			[cmdletbinding()]
			param (
				
				[Parameter(Mandatory = $True)]
				[String]$UPN,
				[Parameter()]
				[String]$Group,
				[Parameter()]
				[Switch]$Multi,
				[Parameter()]
				[String]$File
			)
			
			function Get-AADUser
			{
				
				[cmdletbinding()]
				param (
					
					[Parameter()]
					[Switch]$All,
					[Parameter()]
					[String]$UPN
					
				)
				
				If ($All)
				{
					
					$token = Get-MsalToken -clientid $ClientID -tenantid organizations
					$global:header = @{ 'Authorization' = $token.createauthorizationHeader() }
					$uri = "https://graph.microsoft.com/v1.0/users"
					$Users = While (!$NoMoreUsers)
					{
						
						$GetUsers = Invoke-RestMethod -uri $uri -headers $Header -method GET
						$getUsers.value
						If ($getUsers."@odata.nextlink")
						{
							
							$uri = $getUsers."@odata.nextlink"
							
						}
						Else
						{
							
							$NoMoreUsers = $True
							
						}
					}
					$NoMoreUsers = $False
					$Users | select displayName | sort displayName
					
				}
				elseif ($UPN -ne $Null)
				{
					
					$Uri = "https://graph.microsoft.com/v1.0/users/$UPN"
					Invoke-RestMethod -Uri $Uri -Headers $Header -Method Get
					
				}
				else
				{
					
					Write-Host "Please specify individual group or use All switch."
					
				}
				
			}
			function Get-AADGroup
			{
				
				[cmdletbinding()]
				param (
					
					[Parameter()]
					[Switch]$All,
					[Parameter()]
					[String]$Name
					
				)
				
				If ($All)
				{
					
					$token = Get-MsalToken -clientid $ClientID -tenantid organizations
					$global:header = @{ 'Authorization' = $token.createauthorizationHeader(); 'ConsistencyLevel' = 'eventual' }
					$uri = "https://graph.microsoft.com/v1.0/groups"
					$Groups = While (!$NoMoreGroups)
					{
						
						$GetGroups = Invoke-RestMethod -uri $uri -headers $Header -method GET
						$getGroups.value
						If ($getGroups."@odata.nextlink")
						{
							
							$uri = $getGroups."@odata.nextlink"
							
						}
						Else
						{
							
							$NoMoreGroups = $True
							
						}
					}
					$NoMoreGroups = $False
					$Groups | select displayName | sort displayName
					
				}
				elseif ($Name -ne $Null)
				{
					
					$Uri = "https://graph.microsoft.com/v1.0/groups"
					$Groups = While (!$NoMoreGroups)
					{
						
						$GetGroups = Invoke-RestMethod -uri $uri -headers $Header -method GET
						$getGroups.value
						If ($getGroups."@odata.nextlink")
						{
							
							$uri = $getGroups."@odata.nextlink"
							
						}
						Else
						{
							
							$NoMoreGroups = $True
							
						}
					}
					$NoMoreGroups = $False
					$Groups | where { $_.displayName -eq $Name }
					
				}
				else
				{
					
					Write-Host "Please specify individual group or use All switch."
					
				}
				
			}
			
			
			If (($Group -ne $Null) -and (!$Multi))
			{
				
				$UserToAdd = Get-AADUser -UPN $UPN
				$AddTo = Get-AADGroup -Name $Group
				$AddtoUri = "https://graph.microsoft.com/v1.0/groups/$($AddTo.Id)/members/`$ref"
				$Body = @{ "@odata.id" = "https://graph.microsoft.com/v1.0/directoryObjects/$($UserToAdd.Id)" } | ConvertTo-Json
				Invoke-RestMethod -Uri $AddtoUri -Headers $Header -Method "Post" -ContentType "application/json" -Body $Body
				
			}
			else
			{
				
				
				$GroupsToAdd = Get-Content $File
				foreach ($G in $GroupsToAdd)
				{
					
					$UserToAdd = Get-AADUser -UPN $UPN
					$AddTo = Get-AADGroup -Name $G
					$AddtoUri = "https://graph.microsoft.com/v1.0/groups/$($AddTo.Id)/members/`$ref"
					$Body = @{ "@odata.id" = "https://graph.microsoft.com/v1.0/directoryObjects/$($UserToAdd.Id)" } | ConvertTo-Json
					Invoke-RestMethod -Uri $AddtoUri -Headers $Header -Method "Post" -ContentType "application/json" -Body $Body
					
				}
				
			}
			
		}
		function Get-AADGroup
		{
			
			[cmdletbinding()]
			param (
				
				[Parameter()]
				[Switch]$All,
				[Parameter()]
				[String]$Name
				
			)
			
			If ($All)
			{
				
				$token = Get-MsalToken -clientid $ClientID -tenantid organizations
				$header = @{ 'Authorization' = $token.createauthorizationHeader(); 'ConsistencyLevel' = 'eventual' }
				$uri = "https://graph.microsoft.com/v1.0/groups"
				$Groups = While (!$NoMoreGroups)
				{
					
					Try
					{
						
						$GetGroups = Invoke-RestMethod -uri $uri -headers $header -method GET
						
					}
					catch
					{
						$ResponseResult = $_.Exception.Response.GetResponseStream()
						$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
						$ResponseBody = $ResponseReader.ReadToEnd()
					}
					$ResponseBody
					$getGroups.value
					If ($getGroups."@odata.nextlink")
					{
						
						$uri = $getGroups."@odata.nextlink"
						
					}
					Else
					{
						
						$NoMoreGroups = $True
						
					}
					$NoMoreGroups = $False
					$Groups | select displayName | sort displayName
					
				}
				elseif ($Name -ne $Null)
				{
					
					$Uri = "https://graph.microsoft.com/v1.0/groups"
					$Groups = While (!$NoMoreGroups)
					{
						
						Try
						{
							
							$GetGroups = Invoke-RestMethod -uri $uri -headers $header -method GET
							
						}
						catch
						{
							$ResponseResult = $_.Exception.Response.GetResponseStream()
							$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
							$ResponseBody = $ResponseReader.ReadToEnd()
						}
						$ResponseBody
						$getGroups.value
						If ($getGroups."@odata.nextlink")
						{
							
							$uri = $getGroups."@odata.nextlink"
							
						}
						Else
						{
							
							$NoMoreGroups = $True
							
						}
					}
					$NoMoreGroups = $False
					$Groups | where { $_.displayName -eq $Name }
					
				}
				else
				{
					
					Write-Host "Please specify individual group or use All switch."
					
				}
				
			}
			
			
			If (($Group -ne $Null) -and (!$Multi))
			{
				
				$UserToAdd = Get-AADUser -UPN $UPN
				$AddTo = Get-AADGroup -Name $Group
				$AddtoUri = "https://graph.microsoft.com/v1.0/groups/$($AddTo.Id)/members/`$ref"
				$Body = @{ "@odata.id" = "https://graph.microsoft.com/v1.0/directoryObjects/$($UserToAdd.Id)" } | ConvertTo-Json
				Try
				{
					
					Invoke-RestMethod -Uri $AddtoUri -Headers $header -Method "Post" -ContentType "application/json" -Body $Body
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
			}
			else
			{
				
				
				$GroupsToAdd = Get-Content $File
				foreach ($G in $GroupsToAdd)
				{
					
					$UserToAdd = Get-AADUser -UPN $UPN
					$AddTo = Get-AADGroup -Name $G
					$AddtoUri = "https://graph.microsoft.com/v1.0/groups/$($AddTo.Id)/members/`$ref"
					$Body = @{ "@odata.id" = "https://graph.microsoft.com/v1.0/directoryObjects/$($UserToAdd.Id)" } | ConvertTo-Json
					Try
					{
						
						Invoke-RestMethod -Uri $AddtoUri -Headers $header -Method "Post" -ContentType "application/json" -Body $Body
						
					}
					catch
					{
						$ResponseResult = $_.Exception.Response.GetResponseStream()
						$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
						$ResponseBody = $ResponseReader.ReadToEnd()
					}
					$ResponseBody
					
				}
				
			}
			
		}
		function Update-AADUser
		{
			
			[CmdletBinding()]
			Param (
				[Parameter(Mandatory = $True)]
				[String]$UPN,
				[Parameter()]
				[String]$FName,
				[Parameter()]
				[String]$LName,
				[Parameter()]
				[String]$Title,
				[Parameter()]
				[String]$Office,
				[Parameter()]
				[String]$Manager,
				[Parameter()]
				[String]$Dept,
				[Parameter()]
				[String]$Mobile,
				[Parameter()]
				[String]$Company,
				[Parameter()]
				[Switch]$Location
				
			)
			
			$token = Get-MsalToken -clientid $ClientID -tenantid organizations
			$global:header = @{ 'Authorization' = $token.createauthorizationHeader() }
			If ($FName)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN"
				$Body = @{
					
					"givenName" = $FName
					
				}
				$JSON = $Body | ConvertTo-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Patch -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
			}
			If ($LName)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN"
				$Body = @{
					
					"surname" = $LName
					
				}
				$JSON = $Body | ConvertTo-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Patch -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
			}
			If ($Title)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN"
				$Body = @{
					
					"jobTitle" = $Title
					
				}
				$JSON = $Body | ConvertTo-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Patch -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
			}
			If ($Office)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN"
				$Body = @{
					
					"officeLocation" = $Office
					
				}
				$JSON = $Body | ConvertTo-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Patch -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
			}
			If ($Manager)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/manager/`$ref"
				$Body = @{
					
					"@odata.id" = "https://graph.microsoft.com/v1.0/users/$Manager"
					
				}
				$JSON = $Body | ConvertTo-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Put -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
			}
			If ($Dept)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN"
				$Body = @{
					
					"department" = $Dept
					
				}
				$JSON = $Body | ConvertTo-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Patch -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
			}
			If ($Mobile)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN"
				$Body = @{
					
					"mobilePhone" = $Mobile
					
				}
				$JSON = $Body | ConvertTo-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Patch -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
			}
			If ($Location)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN"
				$Body = @{
					
					"usageLocation" = "US"
					
				}
				$JSON = $Body | ConvertTo-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Patch -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
			}
			If ($Company)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN"
				$Body = @{
					
					"companyName" = $Company
					
				}
				$JSON = $Body | ConvertTo-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Patch -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
			}
		}
		
		#################################################
		#Generating a secure password
		function GenerateStrongPassword
		{
			param (
				[Parameter(Mandatory)]
				[ValidateRange(4, [int]::MaxValue)]
				[int]$length,
				[int]$upper = 1,
				[int]$lower = 1,
				[int]$numeric = 1,
				[int]$special = 1
			)
			if ($upper + $lower + $numeric + $special -gt $length)
			{
				throw "number of upper/lower/numeric/special char must be lower or equal to length"
			}
			$uCharSet = "ABCDEFGHJKMNPQRSTUWXYZ"
			$lCharSet = "abcdfhjkmnrstuwxyz"
			$nCharSet = "23456789"
			$sCharSet = "/*-+!?=@_"
			$charSet = ""
			if ($upper -gt 0) { $charSet += $uCharSet }
			if ($lower -gt 0) { $charSet += $lCharSet }
			if ($numeric -gt 0) { $charSet += $nCharSet }
			if ($special -gt 0) { $charSet += $sCharSet }
			$charSet = $charSet.ToCharArray()
			$rng = New-Object System.Security.Cryptography.RNGCryptoServiceProvider
			$bytes = New-Object byte[]($length)
			$rng.GetBytes($bytes)
			$result = New-Object char[]($length)
			for ($i = 0; $i -lt $length; $i++)
			{
				$result[$i] = $charSet[$bytes[$i] % $charSet.Length]
			}
			$password = (-join $result)
			$valid = $true
			if ($upper -gt ($password.ToCharArray() | Where-Object { $_ -cin $uCharSet.ToCharArray() }).Count) { $valid = $false }
			if ($lower -gt ($password.ToCharArray() | Where-Object { $_ -cin $lCharSet.ToCharArray() }).Count) { $valid = $false }
			if ($numeric -gt ($password.ToCharArray() | Where-Object { $_ -cin $nCharSet.ToCharArray() }).Count) { $valid = $false }
			if ($special -gt ($password.ToCharArray() | Where-Object { $_ -cin $sCharSet.ToCharArray() }).Count) { $valid = $false }
			if (!$valid)
			{
				$password = GenerateStrongPassword $length $upper $lower $numeric $special
			}
			return $password
		}
		
		#################################################
		$Password = GenerateStrongPassword(12)
		Set-Clipboard -Value $Password
		Write-Host "Password copied to clipboard!" -f Green
		#################################################
		#Creating the User
		$Initial = $FName.SubString(0, 1)
		$UPN = "$Initial$LName@$Domain"
		$Uri = "https://graph.microsoft.com/v1.0/users"
		$body = @{
			
			"accountEnabled"  = $true;
			"displayName"	  = "$FName $LName";
			"mailNickname"    = "$Initial$LName";
			"passwordProfile" = @{
				
				"forceChangePasswordNextSignIn" = $True;
				"password"					    = $Password
				
			};
			"userPrincipalName" = $UPN
			
		}
		$JSON = $Body | ConvertTo-Json
		Try
		{
			
			Write-Host "Creating user $FName $LName..." -f White
			Invoke-RestMethod -Uri $Uri -Body $JSON -Header $Header -Method Post -ContentType "application/Json" | Out-Null
			Write-Host "================================" -f Green
			
		}
		catch
		{
			$ResponseResult = $_.Exception.Response.GetResponseStream()
			$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
			$ResponseBody = $ResponseReader.ReadToEnd()
		}
		$ResponseBody
		Start-Sleep -s 5
		If ($Mobile)
		{
			
			Update-AADUser -UPN $UPN -FName $FName -LName $LName -Company $Company -Title $Title -Office $Office -Manager $Manager -Dept $Dept -Mobile $Mobile -Location | out-null
			
		}
		else
		{
			
			Update-AADUser -UPN $UPN -FName $FName -LName $LName -Company $Company -Title $Title -Office $Office -Manager $Manager -Dept $Dept -Location | out-null
			
		}
		
		Write-Host "User $Fname $LName created successfully." -f Green
		Write-Host "================================" -f Green
		#################################################
		
		#Updating the manager
		Start-Sleep -s 4
		Write-Host "Assigning manager $Manager to user $FName $LName..." -f White
		Update-AADUser -UPN $UPN -Manager $Manager | Out-Null
		Write-Host "================================" -f Green
		Write-Host "Manager $Manager assigned to user $FName $LName." -f Green
		Write-Host "================================" -f Green
		Start-Sleep -s 3
		
		#################################################
		
		#Assigning Licenses
		If ($E3)
		{
			
			Write-Host "Assigning Microsoft 365 E3 license to $FName $LName..." -f White
			Assign-AADUserLicense -UPN $UPN -E3
			
		}
		If ($E5)
		{
			
			Write-Host "Assigning Microsoft 365 E5 license to $FName $LName..." -f White
			Assign-AADUserLicense -UPN $UPN -E5 | Out-Null
			
		}
		If ($ExchangeStd)
		{
			
			Write-Host "Assigning Exchange Online Standard (Plan 1) license to $FName $LName..." -f White
			Assign-AADUserLicense -UPN $UPN -ExchangeStd | Out-Null
			
		}
		If ($ExchangeEnt)
		{
			
			Write-Host "Assigning Exchange Online Enterprise (Plan 2) license to $FName $LName..." -f White
			Assign-AADUserLicense -UPN $UPN -ExchangeEnt | Out-Null
			
		}
		If ($PBIFree)
		{
			
			Write-Host "Assigning PowerBI Free license to $FName $LName..." -f White
			Assign-AADUserLicense -UPN $UPN -PBIFree
			
		}
		If ($PBIPro)
		{
			
			Write-Host "Assigning PowerBI Pro license to $FName $LName..." -f White
			Assign-AADUserLicense -UPN $UPN -PBIPro | Out-Null
			
		}
		If ($Visio)
		{
			
			Write-Host "Assigning Visio license to $FName $LName..." -f White
			Assign-AADUserLicense -UPN $UPN -Visio | Out-Null
			
		}
		Write-Host "================================" -f Green
		
		#################################################
		
		#Adding to groups
		If ($Multi)
		{
			
			If ($File -ne $Null -and $File -ne "")
			{
				
				$Fetch = Get-content $File
				foreach ($Line in $Fetch)
				{
					
					Write-Host "Adding user $FName $LName to group $Line..." -f White
					Add-AADGroupMember -UPN $UPN -Group $Line | Out-Null
					Write-Host "================================" -f Green
					Write-Host "User $FName $LName added to group $Line." -f Green
					Write-Host "================================" -f Green
					
				}
				
			}
			else
			{
				
				Write-Host "No file specified." -f Red
				
			}
			
		}
		elseif ($Group -ne $Null -and $Group -ne "")
		{
			
			Write-Host "Adding user $FName $LName to group $Group..." -f White
			Add-AADGroupMember -UPN $UPN -Group $Group | Out-Null
			Write-Host "================================" -f Green
			Write-Host "User $FName $LName added to group $Group." -f Green
			
		}
	}
	#############################################################################
	$global:Company = $textCompany.Text
	$global:Domain = $textDomain.Text
	$FName = $textFName.Text
	$FirstInitial = $FName.Substring(0, 1)
	$LName = $textLName.Text
	$Title = $textTitle.Text
	$Office = $textOffice.Text
	$Manager = $textManager.Text
	$Department = $textDepartment.Text
	$Mobile = $textMobile.Text
	$Selected = $listbox1.SelectedItems
	$UPN = "$FirstInitial" + "$LName" + "@$Domain"
	New-Item -Path "$Env:TEMP\AzureAdministrator\SelectedGroups.txt" -Force
	$Selected | Out-File "$Env:TEMP\AzureAdministrator\SelectedGroups.txt"
	
	If ($Mobile)
	{
		Start-Transcript -Path "$Env:ProgramData\AzureAdministrator\Logs\NewUser\NewUser_Mobile_$Timestamp.log"
		Try
		{
			
			New-AADUser -FName $FName -LName $LName -Title $Title -Office $Office -Manager $Manager -Dept $Department -Mobile $Mobile -Multi -File "$Env:TEMP\AzureAdministrator\SelectedGroups.txt"
			
		}
		Catch
		{
			
			[System.Windows.Forms.MessageBox]::show("Error creating user.`r`nError Message: $($_.Exception).`r`nFor more info, see logs.", 'Error', 'OK', 'Error')
			
		}
		Stop-Transcript
		
		[System.Windows.Forms.MessageBox]::Show('Password copied to clipboard!', 'Password Generated', 'OK', 'Information')
	}
	elseif (!$Mobile)
	{
		Start-Transcript -Path "$Env:ProgramData\AzureAdministrator\Logs\NewUser\NewUser_NoMobile_$Timestamp.log"
		Try
		{
			
			New-AADUser -FName $FName -LName $LName -Title $Title -Office $Office -Manager $Manager -Dept $Department -Multi -File "$Env:TEMP\AzureAdministrator\SelectedGroups.txt"
			
		}
		Catch
		{
			
			[System.Windows.Forms.MessageBox]::show("Error creating user.`r`nError Message: $($_.Exception).`r`nFor more info, see logs.", 'Error', 'OK', 'Error')
			
		}
		[System.Windows.Forms.MessageBox]::Show('Password copied to clipboard!', 'Password Generated', 'OK', 'Information')
		Stop-Transcript
	}
	
	Start-Transcript -Path "$Env:ProgramData\AzureAdministrator\Logs\NewUser\NewUser_AddLicenses_$Timestamp.log"
	If ($checkboxExchangeEnterprisePl.Checked)
	{
		Try
		{
			
			Assign-AADUserLicense -UPN $UPN -ExchangeEnt
			
		}
		Catch
		{
			
			[System.Windows.Forms.MessageBox]::show("Error assigning license.`r`nError Message: $($_.Exception).`r`nFor more info, see logs.", 'Error', 'OK', 'Error')
			
		}
	}
	If ($checkboxExhangeStandardPlan1.checked)
	{
		Try
		{
			
			Assign-AADUserLicense -UPN $UPN -ExchangeStd
		}
		Catch
		{
			
			[System.Windows.Forms.MessageBox]::show("Error assigning license.`r`nError Message: $($_.Exception).`r`nFor more info, see logs.", 'Error', 'OK', 'Error')
			
		}
	}
	If ($checkboxMicorosft365E3.checked)
	{
		Try
		{
			
			Assign-AADUserLicense -UPN $UPN -E3
			
		}
		Catch
		{
			
			[System.Windows.Forms.MessageBox]::show("Error assigning license.`r`nError Message: $($_.Exception).`r`nFor more info, see logs.", 'Error', 'OK', 'Error')
			
		}
	}
	If ($checkboxMicrosoft365E5.checked)
	{
		Try
		{
			
			Assign-AADUserLicense -UPN $UPN -E5
			
		}Catch
		{
			
			[System.Windows.Forms.MessageBox]::show("Error assigning license.`r`nError Message: $($_.Exception).`r`nFor more info, see logs.", 'Error', 'OK', 'Error')
			
		}
	}
	If ($checkboxPowerBIFree.checked)
	{
		Try
		{
			
			Assign-AADUserLicense -UPN $UPN -PBIFree
			
		}
		Catch
		{
			
			[System.Windows.Forms.MessageBox]::show("Error assigning license.`r`nError Message: $($_.Exception).`r`nFor more info, see logs.", 'Error', 'OK', 'Error')
			
		}
	}
	If ($checkboxPowerBIPro.Checked)
	{
		Try
		{
			
			Assign-AADUserLicense -UPN $UPN -PBIPro
			
		}
		Catch
		{
			
			[System.Windows.Forms.MessageBox]::show("Error assigning license.`r`nError Message: $($_.Exception).`r`nFor more info, see logs.", 'Error', 'OK', 'Error')
			
		}
	}
	If ($checkboxVisio.checked)
	{
		Try
		{
			
			Assign-AADUserLicense -UPN $UPN -Visio
			
		}
		Catch
		{
			
			[System.Windows.Forms.MessageBox]::show("Error assigning license.`r`nError Message: $($_.Exception).`r`nFor more info, see logs.", 'Error', 'OK', 'Error')
			
		}
	}
	Stop-Transcript
	
	$FormNewUser.Close()
}

$buttonCheckLicenseUsage_Click={
	#TODO: Place custom script here
	start-process https://portal.azure.com/#blade/Microsoft_AAD_IAM/LicensesMenuBlade/Products
}
$textDomain_MouseHover={
	#TODO: Place custom script here
	$tooltipDomain.SetToolTip($textDomain, "Enter domain name and TLD. Ex: contoso.com or schoolname.edu")
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>