<File version="3.2">
  <FileID>2d3958f1-aa6b-4454-a7e1-a77b3517e79a</FileID>
  <Preview>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
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
dIABQGphAJDWMACUwwDQAQYAqYUBQFrDAFAOA0AHGACkFgYAaQ0DQDkMAB1gAJBaGACkNQwA5TAA
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
AABJRU5ErkJggg==</Preview>
  <Form>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</Form>
  <Code><![CDATA[
$formConfigurationPolicie_Load={
	#TODO: Initialize Form Controls here
	function Get-IntuneDeviceConfiguration
	{
		
    <#
		IMPORTANT:
        ===========================================================================
        This script is provided 'as is' without any warranty. Any issues stemming 
        from use is on the user.
        ===========================================================================
		.DESCRIPTION
		Retrieves Intune configuration policy.
		===========================================================================
		.PARAMETER Name
		Required if not using All switch - Name of the configuration policy to retrieve.
		.PARAMETER All
		Retrieves all Intune configuration policies.
        .PARAMETER Status
        Returns device status for the specified configuration policy.
		===========================================================================
		.EXAMPLE
		Get-IntuneConfigurationPolicy -Policy BlockAllUSB <--- Retrieves BlockAllUSB configuration policy
        Get-IntuneConfigurationPolicy -Policy BlockAllUSB -Status <--- Retrieves BlockAllUSB compliance policy device status
	#>
		
		[CmdletBinding()]
		param (
			[Parameter()]
			[String]$Name,
			[Parameter()]
			[Switch]$All,
			[Parameter()]
			[Switch]$Status
		)
		
		$token = Get-MsalToken -clientid $ClientID -tenantid organizations
		$global:header = @{ 'Authorization' = $token.createauthorizationHeader(); 'ConsistencyLevel' = 'eventual' }
		
		If ($All -and !$Name)
		{
			
			$Uri = "https://graph.microsoft.com/beta/devicemanagement/deviceConfigurations"
			Try
			{
				
				(Invoke-RestMethod -Uri $Uri -Headers $Header).value
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
		}
		elseif ($Name -and !$All -and !$Status)
		{
			
			$Uri = "https://graph.microsoft.com/beta/devicemanagement/deviceConfigurations?`$filter=displayName%20eq%20'$Name'"
			Try
			{
				
				(Invoke-RestMethod -Uri $Uri -Headers $Header).value
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
		}
		elseif ($Name -and !$All -and $Status)
		{
			
			$Uri = "https://graph.microsoft.com/beta/deviceManagement/deviceConfigurations?`$filter=displayName%20eq%20'$Name'"
			Try
			{
				
				$ConfigurationPolicy = (Invoke-RestMethod -Uri $Uri -Headers $Header -Method GET).value
				$ConfigurationPolicyId = $ConfigurationPolicy | select -expand id
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
			Try
			{
				
				$Uri = "https://graph.microsoft.com/beta/deviceManagement/deviceConfigurations/$ConfigurationPolicyId/deviceStatuses"
				(Invoke-RestMethod -Uri $Uri -Headers $Header).value | select id, deviceDisplayName, LastReportedDateTime, status, userPrincipalName
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
		}
		
	}
	###########################################################################
	$global:AllConfigPolicies = Get-IntuneDeviceConfiguration -All | sort -Property displayName | select -expand displayName
	#For assign tab:
	foreach ($item in $AllConfigPolicies)
	{
		
		$listboxConfigurationPolicies.Items.Add($Item) | Out-Null
		$listboxConfigurationPolicies.Sorted = $True
		$listbox1.Items.Add($Item) | Out-Null
		$listbox1.Sorted = $True
		
	}
	##############################################################
	$buttonAssignPolicy.Enabled = $false
	$Uri = "https://graph.microsoft.com/v1.0/groups"
	$Groups = while (!$NoMorePages)
	{
		$GetGroups = Invoke-RestMethod -Uri $Uri -Headers $Header -Method Get
		$GetGroups.Value
		If ($GetGroups."@odata.nextlink")
		{
			$Uri = $GetGroups."@odata.nextlink"
		}
		else
		{
			$NoMorePages = $True
		}
	}
	$NoMorePages = $false
	$Groups | select -expand displayName | sort displayName
	$listboxGroups.SelectionMode = 'MultiExtended'
	
	foreach ($Item in $Groups)
	{
		$listboxGroups.Items.Add($Item.displayName) | Out-Null
		$listboxGroups.Sorted = $True
	}
	$AssignConfigurationLogFolderExists = (Test-Path -Path "$Env:ProgramData\AzureAdministrator\Logs\AssignConfiguration" -PathType Container)
	If (!$AssignConfigurationStatusLogFolderExists)
	{
		
		New-Item -Path "$Env:ProgramData\AzureAdministrator\Logs" -Name 'AssignConfiguration' -ItemType directory -Force
		
	}
	###############################################################
	#for Status tab
	$buttonGetPolicyStatus.Enabled = $false
	$buttonExport.Enabled = $false
	$ConfigurationStatusLogFolderExists = (Test-Path -Path "$Env:ProgramData\AzureAdministrator\Logs\ConfigurationStatus" -PathType Container)
	If (!$ConfigurationStatusLogFolderExists)
	{
		
		New-Item -Path "$Env:ProgramData\AzureAdministrator\Logs" -Name 'ConfigurationStatus' -ItemType directory -Force
		
	}
}



#endregion

$buttonAssignPolicy_Click={
	#TODO: Place custom script here
	function Get-IntuneDeviceConfiguration
	{
		
    <#
		IMPORTANT:
        ===========================================================================
        This script is provided 'as is' without any warranty. Any issues stemming 
        from use is on the user.
        ===========================================================================
		.DESCRIPTION
		Retrieves Intune configuration policy.
		===========================================================================
		.PARAMETER Name
		Required if not using All switch - Name of the configuration policy to retrieve.
		.PARAMETER All
		Retrieves all Intune configuration policies.
        .PARAMETER Status
        Returns device status for the specified configuration policy.
		===========================================================================
		.EXAMPLE
		Get-IntuneConfigurationPolicy -Policy BlockAllUSB <--- Retrieves BlockAllUSB configuration policy
        Get-IntuneConfigurationPolicy -Policy BlockAllUSB -Status <--- Retrieves BlockAllUSB compliance policy device status
	#>
		
		[CmdletBinding()]
		param (
			[Parameter()]
			[String]$Name,
			[Parameter()]
			[Switch]$All,
			[Parameter()]
			[Switch]$Status
		)
		
		$token = Get-MsalToken -clientid $ClientID -tenantid organizations
		$global:header = @{ 'Authorization' = $token.createauthorizationHeader(); 'ConsistencyLevel' = 'eventual' }
		
		If ($All -and !$Name)
		{
			
			$Uri = "https://graph.microsoft.com/beta/devicemanagement/deviceConfigurations"
			Try
			{
				
				(Invoke-RestMethod -Uri $Uri -Headers $Header).value
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
		}
		elseif ($Name -and !$All -and !$Status)
		{
			
			$Uri = "https://graph.microsoft.com/beta/devicemanagement/deviceConfigurations?`$filter=displayName%20eq%20'$Name'"
			Try
			{
				
				(Invoke-RestMethod -Uri $Uri -Headers $Header).value
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
		}
		elseif ($Name -and !$All -and $Status)
		{
			
			$Uri = "https://graph.microsoft.com/beta/deviceManagement/deviceConfigurations?`$filter=displayName%20eq%20'$Name'"
			Try
			{
				
				$ConfigurationPolicy = (Invoke-RestMethod -Uri $Uri -Headers $Header -Method GET).value
				$ConfigurationPolicyId = $ConfigurationPolicy | select -expand id
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
			Try
			{
				
				$Uri = "https://graph.microsoft.com/beta/deviceManagement/deviceConfigurations/$ConfigurationPolicyId/deviceStatuses"
				(Invoke-RestMethod -Uri $Uri -Headers $Header).value | select id, deviceDisplayName, LastReportedDateTime, status, userPrincipalName
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
		}
		
	}
	
	##############################################################
	function Assign-IntuneDeviceConfiguration
	{
		
    <#
		IMPORTANT:
        ===========================================================================
        This script is provided 'as is' without any warranty. Any issues stemming 
        from use is on the user.
        ===========================================================================
		.DESCRIPTION
		Adds or removes Intune configuration policy assignment using AAD group.
		===========================================================================
		.PARAMETER Configuration
		Required - Name of the configuration to assign.
		.PARAMETER Group
		Required - Name of the AAD group being assigned to the configuration policy.
        .PARAMETER RemoveAssignment
        Optional switch to remove group assignment from Intune app.
		===========================================================================
		.EXAMPLE
		Assign-IntuneDeviceConfiguration -Configuration DeviceEncryption -Group AllUsers <--- Assigns AAD group AllUsers to DeviceEncryption configuration policy
        Assign-IntuneDeviceConfiguration -Configuration DeviceEncryption -Group AllUsers -RemoveAssignment <--- Removes assignment if exist
	#>
		
		[CmdletBinding()]
		param (
			[Parameter(Mandatory = $True)]
			[String]$Group,
			[Parameter(Mandatory = $True)]
			[String]$Configuration,
			[Parameter()]
			[Switch]$RemoveAssignment
		)
		
		$token = Get-MsalToken -clientid $ClientID -tenantid organizations
		$global:header = @{ 'Authorization' = $token.createauthorizationHeader(); 'ConsistencyLevel' = 'eventual' }
		
		###########################################################
		
		function Get-IntuneDeviceConfiguration
		{
			
			[CmdletBinding()]
			param (
				[Parameter()]
				[String]$Name,
				[Parameter()]
				[Switch]$All
			)
			
			If ($All -and !$Name)
			{
				
				$Uri = "https://graph.microsoft.com/beta/devicemanagement/deviceConfigurations"
				Try
				{
					
					(Invoke-RestMethod -Uri $Uri -Headers $Header).value
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
					$ResponseBody
				}
				
			}
			elseif (!$All -and $Name)
			{
				
				$Uri = "https://graph.microsoft.com/beta/devicemanagement/deviceConfigurations?`$filter=displayName%20eq%20'$Name'"
				Try
				{
					
					(Invoke-RestMethod -Uri $Uri -Headers $Header).value
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
					$ResponseBody
				}
				
			}
			
		}
		
		###########################################################
		
		function Get-AADGroup
		{
			
        <#
            IMPORTANT:
            ===========================================================================
            This script is provided 'as is' without any warranty. Any issues stemming 
            from use is on the user.
            ===========================================================================
            .DESCRIPTION
            Gets an Azure AD Group
            ===========================================================================
            .PARAMETER All
            Lists all AAD groups by displayName.
            .PARAMETER Name
            The displayName of the group to get.
            ===========================================================================
            .EXAMPLE
            Get-AADGroup -All <--- This will return all AzureAD groups
            Get-AADGroup -Name Azure-Test <--- This will return the group Azure-Test
        #>
			
			[cmdletbinding()]
			param (
				
				[Parameter()]
				[Switch]$All,
				[Parameter()]
				[String]$Name
				
			)
			
			
			If ($All)
			{
				
				$uri = "https://graph.microsoft.com/v1.0/groups"
				$Groups = While (!$NoMoreGroups)
				{
					
					Try
					{
						
						$GetGroups = Invoke-RestMethod -uri $uri -headers $header -method GET
						
					}
					catch
					{
						$ResponseResult = $_.Exception.Response.GetResponseStream()
						$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
						$ResponseBody = $ResponseReader.ReadToEnd()
						$ResponseBody
					}
					
					$getGroups.value
					If ($getGroups."@odata.nextlink")
					{
						
						$uri = $getGroups."@odata.nextlink"
						
					}
					Else
					{
						
						$NoMoreGroups = $True
						
					}
				}
				$NoMoreGroups = $False
				$Groups | select displayName | sort displayName
				
			}
			elseif ($Name -ne $Null)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/groups"
				$Groups = While (!$NoMoreGroups)
				{
					
					Try
					{
						
						$GetGroups = Invoke-RestMethod -uri $uri -headers $header -method GET
						
					}
					catch
					{
						$ResponseResult = $_.Exception.Response.GetResponseStream()
						$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
						$ResponseBody = $ResponseReader.ReadToEnd()
						$ResponseBody
					}
					
					$getGroups.value
					If ($getGroups."@odata.nextlink")
					{
						
						$uri = $getGroups."@odata.nextlink"
						
					}
					Else
					{
						
						$NoMoreGroups = $True
						
					}
				}
				$NoMoreGroups = $False
				$Groups | where { $_.displayName -eq $Name }
				
			}
			else
			{
				
				Write-Host "Please specify individual group or use All switch."
				
			}
			
		}
		
		###########################################################
		
		$ConfigId = Get-IntuneDeviceConfiguration -Name $Configuration | select -expand id
		$Target = Get-AADGroup -Name $Group | select -expand id
		If (!$RemoveAssignment)
		{
			
			$Uri = "https://graph.microsoft.com/beta/deviceManagement/deviceConfigurations/$ConfigId/assign"
			$Body = @{
				"assignments" = @(
					@{
						
						"@odata.type" = "#microsoft.graph.deviceConfigurationAssignment";
						"target"	  = @{ "@odata.type" = "microsoft.graph.groupAssignmentTarget"; "groupId" = $Target };
						
					}
				)
			}
			$JSON = $Body | ConvertTo-Json -Depth 3
			Try
			{
				
				Invoke-RestMethod -Uri $Uri -Headers $Header -Body $JSON -Method POST -ContentType "application/Json" | out-null
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
		}
		else
		{
			
			$ConfigId = Get-IntuneDeviceConfiguration -Configuration $Config | select -expand id
			$Target = Get-AADGroup -Name $Group | select -expand id
			$GetUri = "https://graph.microsoft.com/beta/deviceManagement/deviceConfigurations/$ConfigId/assignments"
			Try
			{
				
				$Get = (Invoke-RestMethod -Uri $GetUri -Headers $Header -Method GET).value
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
			$Id = $Get.id | select-string -pattern $Target | foreach { $_.Line }
			If ($Get.id -like "*$Target*")
			{
				
				$Uri = "https://graph.microsoft.com/beta/deviceManagement/deviceConfigurations/$ConfigId/assignments/$Id"
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Headers $Header -Method Delete | out-null
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
					$ResponseBody
				}
				
			}
			
		}
		
	}
	
	##############################################################
	Start-Transcript -Path "$env:ProgramData\AzureAdministrator\Logs\AssignConfiguration\AssignConfiguration_$Timestamp.log"
	$listboxConfigurationPolicies.Text = ''
	$Config = $listboxConfigurationPolicies.SelectedItem
	$Groups = $listboxGroups.SelectedItems
	foreach ($GroupItem in $Groups)
	{
		
		Try
		{
			
			Assign-IntuneDeviceConfiguration -Configuration $Config -Group $GroupItem
			
		}
		Catch
		{
			
			[System.Windows.Forms.MessageBox]::show("Error assigning policy.`r`nError Message: $($_.Exception).`r`nFor more info, see logs.", 'Error', 'OK', 'Error')
			
		}
		
		
	}
	Stop-Transcript
	$formConfigurationPolicie.Close()
}

$buttonGetPolicyStatus_Click={
	#TODO: Place custom script here
	function Get-IntuneDeviceConfiguration
	{
		
    <#
		IMPORTANT:
        ===========================================================================
        This script is provided 'as is' without any warranty. Any issues stemming 
        from use is on the user.
        ===========================================================================
		.DESCRIPTION
		Retrieves Intune configuration policy.
		===========================================================================
		.PARAMETER Name
		Required if not using All switch - Name of the configuration policy to retrieve.
		.PARAMETER All
		Retrieves all Intune configuration policies.
        .PARAMETER Status
        Returns device status for the specified configuration policy.
		===========================================================================
		.EXAMPLE
		Get-IntuneConfigurationPolicy -Policy BlockAllUSB <--- Retrieves BlockAllUSB configuration policy
        Get-IntuneConfigurationPolicy -Policy BlockAllUSB -Status <--- Retrieves BlockAllUSB compliance policy device status
	#>
		
		[CmdletBinding()]
		param (
			[Parameter()]
			[String]$Name,
			[Parameter()]
			[Switch]$All,
			[Parameter()]
			[Switch]$Status
		)
		
		$token = Get-MsalToken -clientid $ClientID -tenantid organizations
		$global:header = @{ 'Authorization' = $token.createauthorizationHeader(); 'ConsistencyLevel' = 'eventual' }
		
		If ($All -and !$Name)
		{
			
			$Uri = "https://graph.microsoft.com/beta/devicemanagement/deviceConfigurations"
			Try
			{
				
				(Invoke-RestMethod -Uri $Uri -Headers $Header).value
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
		}
		elseif ($Name -and !$All -and !$Status)
		{
			
			$Uri = "https://graph.microsoft.com/beta/devicemanagement/deviceConfigurations?`$filter=displayName%20eq%20'$Name'"
			Try
			{
				
				(Invoke-RestMethod -Uri $Uri -Headers $Header).value
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
		}
		elseif ($Name -and !$All -and $Status)
		{
			
			$Uri = "https://graph.microsoft.com/beta/deviceManagement/deviceConfigurations?`$filter=displayName%20eq%20'$Name'"
			Try
			{
				
				$ConfigurationPolicy = (Invoke-RestMethod -Uri $Uri -Headers $Header -Method GET).value
				$ConfigurationPolicyId = $ConfigurationPolicy | select -expand id
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
			Try
			{
				
				$Uri = "https://graph.microsoft.com/beta/deviceManagement/deviceConfigurations/$ConfigurationPolicyId/deviceStatuses"
				(Invoke-RestMethod -Uri $Uri -Headers $Header).value | select id, deviceDisplayName, LastReportedDateTime, status, userPrincipalName
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
		}
		
	}
	
	##############################################################
	Start-Transcript -Path "$env:ProgramData\AzureAdministrator\Logs\ConfigurationStatus\ConfigurationStatus_$Timestamp.log"
	$textboxStatus.Text = ''
	$Selected = $listboxConfigurationPolicies.SelectedItem
	Try
	{
		
		Get-IntuneDeviceConfiguration -Name $Selected -Status | Sort-Object -Property deviceDisplayName | ForEach-Object { $textboxStatus.AppendText("Status on $($_.deviceDisplayName): $($_.Status)`r`n") }
		
	}
	Catch
	{
		
		[System.Windows.Forms.MessageBox]::show("Error retrieving policy status.`r`nError Message: $($_.Exception).`r`nFor more info, see logs.", 'Error', 'OK', 'Error')
		
	}
	Stop-Transcript
}

$buttonExport_Click={
	#TODO: Place custom script here
	function Get-IntuneDeviceConfiguration
	{
		
    <#
		IMPORTANT:
        ===========================================================================
        This script is provided 'as is' without any warranty. Any issues stemming 
        from use is on the user.
        ===========================================================================
		.DESCRIPTION
		Retrieves Intune configuration policy.
		===========================================================================
		.PARAMETER Name
		Required if not using All switch - Name of the configuration policy to retrieve.
		.PARAMETER All
		Retrieves all Intune configuration policies.
        .PARAMETER Status
        Returns device status for the specified configuration policy.
		===========================================================================
		.EXAMPLE
		Get-IntuneConfigurationPolicy -Policy BlockAllUSB <--- Retrieves BlockAllUSB configuration policy
        Get-IntuneConfigurationPolicy -Policy BlockAllUSB -Status <--- Retrieves BlockAllUSB compliance policy device status
	#>
		
		[CmdletBinding()]
		param (
			[Parameter()]
			[String]$Name,
			[Parameter()]
			[Switch]$All,
			[Parameter()]
			[Switch]$Status
		)
		
		$token = Get-MsalToken -clientid $ClientID -tenantid organizations
		$global:header = @{ 'Authorization' = $token.createauthorizationHeader(); 'ConsistencyLevel' = 'eventual' }
		
		If ($All -and !$Name)
		{
			
			$Uri = "https://graph.microsoft.com/beta/devicemanagement/deviceConfigurations"
			Try
			{
				
				(Invoke-RestMethod -Uri $Uri -Headers $Header).value
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
		}
		elseif ($Name -and !$All -and !$Status)
		{
			
			$Uri = "https://graph.microsoft.com/beta/devicemanagement/deviceConfigurations?`$filter=displayName%20eq%20'$Name'"
			Try
			{
				
				(Invoke-RestMethod -Uri $Uri -Headers $Header).value
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
		}
		elseif ($Name -and !$All -and $Status)
		{
			
			$Uri = "https://graph.microsoft.com/beta/deviceManagement/deviceConfigurations?`$filter=displayName%20eq%20'$Name'"
			Try
			{
				
				$ConfigurationPolicy = (Invoke-RestMethod -Uri $Uri -Headers $Header -Method GET).value
				$ConfigurationPolicyId = $ConfigurationPolicy | select -expand id
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
			Try
			{
				
				$Uri = "https://graph.microsoft.com/beta/deviceManagement/deviceConfigurations/$ConfigurationPolicyId/deviceStatuses"
				(Invoke-RestMethod -Uri $Uri -Headers $Header).value | select id, deviceDisplayName, LastReportedDateTime, status, userPrincipalName
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
		}
		
	}
	
	##############################################################
	Start-Transcript -Path "$env:ProgramData\AzureAdministrator\Logs\ConfigurationStatus\ConfigurationStatusExport_$Timestamp"
	$textboxStatus.Text = ''
	$Selected = $listboxConfigurationPolicies.SelectedItem
	$ConfigurationPolicy = Get-IntuneDeviceConfiguration -Name $Selected
	Try
	{
		
		Get-IntuneDeviceConfiguration -Name $Selected -Status | Export-Csv "$env:TEMP\Azure Administrator\Exports\$($ConfigurationPolicy.displayName)_ConfigurationPolicy_Status.csv"
		
	}
	Catch
	{
		
		[System.Windows.Forms.MessageBox]::show("Error retrieving policy status.`r`nError Message: $($_.Exception).`r`nFor more info, see logs.", 'Error', 'OK', 'Error')
		
	}
	Stop-Transcript
	$formConfigurationPolicie.Close()
}

$buttonClose_Click={
	#TODO: Place custom script here
	$formConfigurationPolicie.Close()
}

$listbox1_SelectedIndexChanged={
	#TODO: Place custom script here
	If ($listbox1.SelectedItem -ne '')
	{
		
		$buttonAssignPolicy.Enabled = $true
		
	}
}

$listboxConfigurationPolicies_SelectedIndexChanged={
	#TODO: Place custom script here
	If (($listboxConfigurationPolicies.SelectedItem -ne '') -and ($listboxGroups.SelectedItem -ne ''))
	{
		
		$buttonExport.Enabled = $true
		$buttonGetPolicyStatus.Enabled = $true
		
	}
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>