<File version="3.2">
  <FileID>7869da29-9a2b-4962-812b-4bc9bf097cfe</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAHAzSURBVHhe7Z0FeBTn2oZpe+Q/p+5QnEACBHen
QEtbqFEvVbQ4xd3d3SXu7u7uHpIQkpDgWgot1fP87zebDSFdGmihDfDc13VfC7OzM9/MTuZ9vrGt
RQghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
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
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBigVq3/B8CwmDFLSyB2AAAAAElFTkSuQmCC</Preview>
  <Form>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
WP/n71DML8Tu2YvHf27/+L8bFVOXDIgAAA==</Form>
  <Code><![CDATA[
$formUserTermination_Load={
	#TODO: Initialize Form Controls here
	$buttonTerminate.Enabled = $false
	$formUserTermination.add_Shown({ $formUserTermination.Activate(); $textUserEmail.Focus })
	
}

$textUserEmail_TextChanged={
	#TODO: Place custom script here
	$buttonTerminate.Enabled = $false
	if (($textUserEmail.Text.Trim() -like '*.com*') -or ($textUserEmail.Text.Trim() -like '*.edu*') -or ($textUserEmail.Text.Trim() -like '*.gov*'))
	{
		$buttonTerminate.Enabled = $true
	}
}

$buttonTerminate_Click={
	#TODO: Place custom script here
	function Term-AADUser
	{
		
		[CmdletBinding()]
		param (
			[Parameter()]
			[String]$UPN
		)
		
    <#
		IMPORTANT:
        ===========================================================================
        This script is provided 'as is' without any warranty. Any issues stemming 
        from use is on the user.
        ===========================================================================
		.DESCRIPTION
		This function will terminate an AAD user in the following ways:
        *Adds Z_TERM_ to front of user's displayname (changeable at line 765)
        *Removes all user licenses
        *Removes user from all statically assigned groups
        *Disables user
		===========================================================================
		.PARAMETER UPN
		REQUIRED - Email/userPrincipalName of user to be termed
		===========================================================================
		.EXAMPLE
		Term-AADUser -UPN bjameson@example.com <--- Terms bjameson@example.com
	#>
		
		$token = Get-MsalToken -clientid $ClientID -tenantid organizations
		$global:header = @{ 'Authorization' = $token.createauthorizationHeader() }
		function Remove-AADGroupMember
		{
			
			[CmdletBinding()]
			param (
				[Parameter(Mandatory = $True)]
				[String]$UPN,
				[Parameter()]
				[Switch]$All,
				[Parameter()]
				[String]$Group,
				[Parameter()]
				[Switch]$Multi,
				[Parameter()]
				[String]$File
			)
			
        <#
            IMPORTANT:
            ===========================================================================
            This script is provided 'as is' without any warranty. Any issues stemming 
            from use is on the user.
            ===========================================================================
            .DESCRIPTION
            This function will remove an Azure AD Group Member.
            ===========================================================================
            .PARAMETER UPN
            REQUIRED - Email/UserPrincipalName of user to remove
            .PARAMETER All
            Optional switch to remove specified user from all statically assigned groups (will not remove from dynamic, because dynamic)
            .PARAMETER Group
            displayName of the group to remove user from
            .PARAMETER Multi
            Optional switch to indicate we intend to remove the user from multiple groups. Must be used with -File parameter
            .PARAMETER File
            Location of the text file with multiple groups (one per line) 
            ===========================================================================
            .EXAMPLE
            Remove-AADGroupMember -UPN bjameson@example.com -Group Azure-Test <--- Removes bjameson@example.com from the group Azure-Test
            Remove-AADGroupMember -UPN bjameson@example.com -Multi -File C:\Temp\groups.txt <--- Removes bjameson@example.com from all groups in the text file
            Remove-AADGroupMember -UPN bjameson@example.com -All <--- Removes user from all statically assigned
        #>
			
			$token = Get-MsalToken -clientid $ClientID -tenantid organizations
			$global:header = @{ 'Authorization' = $token.createauthorizationHeader() }
			
			function Get-AADUser
			{
				
				[cmdletbinding()]
				param (
					
					[Parameter()]
					[Switch]$All,
					[Parameter()]
					[String]$UPN
					
				)
				
            <#
                IMPORTANT:
                ===========================================================================
                This script is provided 'as is' without any warranty. Any issues stemming 
                from use is on the user.
                ===========================================================================
                .DESCRIPTION
                Gets an Azure AD User
                ===========================================================================
                .PARAMETER All
                Lists all AAD users by displayName.
                .PARAMETER Name
                The displayName of the user to get.
                ===========================================================================
                .EXAMPLE
                Get-AADUser -All <--- This will return all AzureAD users
                Get-AADUser -UPN bjameson@example.com <--- This will return the user bjameson@example.com
            #>
				
				$token = Get-MsalToken -clientid $ClientID -tenantid organizations
				$global:header = @{ 'Authorization' = $token.createauthorizationHeader() }
				
				If ($All)
				{
					
					$uri = "https://graph.microsoft.com/v1.0/users"
					$Users = While (!$NoMoreUsers)
					{
						
						$GetUsers = Invoke-RestMethod -uri $uri -headers $header -method GET
						$getUsers.value
						If ($getUsers."@odata.nextlink")
						{
							
							$uri = $getUsers."@odata.nextlink"
							
						}
						Else
						{
							
							$NoMoreUsers = $True
							
						}
					}
					$NoMoreUsers = $False
					$Users | select displayName | sort displayName
					
				}
				elseif ($UPN -ne $Null)
				{
					
					$Uri = "https://graph.microsoft.com/v1.0/users/$UPN"
					Try
					{
						
						Invoke-RestMethod -Uri $Uri -Headers $header -Method Get
						
					}
					catch
					{
						$ResponseResult = $_.Exception.Response.GetResponseStream()
						$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
						$ResponseBody = $ResponseReader.ReadToEnd()
					}
					$ResponseBody
					
				}
				else
				{
					
					Write-Host "Please specify individual group or use All switch."
					
				}
				
			}
			function Get-AADGroup
			{
				
            <#
                IMPORTANT:
                ===========================================================================
                This script is provided 'as is' without any warranty. Any issues stemming 
                from use is on the user.
                ===========================================================================
                .DESCRIPTION
                Gets an Azure AD Group
                ===========================================================================
                .PARAMETER All
                Lists all AAD groups by displayName.
                .PARAMETER Name
                The displayName of the group to get.
                ===========================================================================
                .EXAMPLE
                Get-AADGroup -All <--- This will return all AzureAD groups
                Get-AADGroup -Name Azure-Test <--- This will return the group Azure-Test
            #>
				
				[cmdletbinding()]
				param (
					
					[Parameter()]
					[Switch]$All,
					[Parameter()]
					[String]$Name
					
				)
				
				$token = Get-MsalToken -clientid $ClientID -tenantid organizations
				$global:header = @{ 'Authorization' = $token.createauthorizationHeader(); 'ConsistencyLevel' = 'eventual' }
				
				If ($All)
				{
					
					$uri = "https://graph.microsoft.com/v1.0/groups"
					$Groups = While (!$NoMoreGroups)
					{
						
						Try
						{
							
							$GetGroups = Invoke-RestMethod -uri $uri -headers $header -method GET
							
						}
						catch
						{
							$ResponseResult = $_.Exception.Response.GetResponseStream()
							$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
							$ResponseBody = $ResponseReader.ReadToEnd()
						}
						$ResponseBody
						$getGroups.value
						If ($getGroups."@odata.nextlink")
						{
							
							$uri = $getGroups."@odata.nextlink"
							
						}
						Else
						{
							
							$NoMoreGroups = $True
							
						}
					}
					$NoMoreGroups = $False
					$Groups | select displayName | sort displayName
					
				}
				elseif ($Name -ne $Null)
				{
					
					$Uri = "https://graph.microsoft.com/v1.0/groups"
					$Groups = While (!$NoMoreGroups)
					{
						
						Try
						{
							
							$GetGroups = Invoke-RestMethod -uri $uri -headers $header -method GET
							
						}
						catch
						{
							$ResponseResult = $_.Exception.Response.GetResponseStream()
							$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
							$ResponseBody = $ResponseReader.ReadToEnd()
						}
						$ResponseBody
						$getGroups.value
						If ($getGroups."@odata.nextlink")
						{
							
							$uri = $getGroups."@odata.nextlink"
							
						}
						Else
						{
							
							$NoMoreGroups = $True
							
						}
					}
					$NoMoreGroups = $False
					$Groups | where { $_.displayName -eq $Name }
					
				}
				else
				{
					
					Write-Host "Please specify individual group or use All switch."
					
				}
				
			}
			
			If ($all)
			{
				
				$GroupsUri = "https://graph.microsoft.com/v1.0/users/$UPN/transitiveMemberOf"
				$GroupRequest = Invoke-RestMethod -Uri $GroupsUri -Headers $Header -Method Get
				foreach ($Item in $GroupRequest.value)
				{
					
					$RemoveFrom = Get-AADGroup -Name $Item.displayName
					$UsertoRemove = Get-AADUser -UPN $UPN
					$RemoveFromUri = "https://graph.microsoft.com/v1.0/groups/$($RemoveFrom.Id)/members/$($UsertoRemove.Id)/`$ref"
					Try
					{
						
						Invoke-RestMethod -Uri $RemoveFromUri -Headers $header -Method "Delete"
						
					}
					catch
					{
						$ResponseResult = $_.Exception.Response.GetResponseStream()
						$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
						$ResponseBody = $ResponseReader.ReadToEnd()
						$ResponseBody
					}
					
				}
				
			}
			elseIf (($Group -ne $Null) -and (!$Multi))
			{
				
				$UsertoRemove = Get-AADUser -UPN $UPN
				$RemoveFrom = Get-AADGroup -Name $item
				$RemoveFromUri = "https://graph.microsoft.com/v1.0/groups/$($RemoveFrom.Id)/members/$($UsertoRemove.Id)/`$ref"
				Try
				{
					
					Invoke-RestMethod -Uri $RemoveFromUri -Headers $header -Method "Delete"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
			}
			else
			{
				
				
				$Groupstoremove = Get-Content $File
				foreach ($G in $Groupstoremove)
				{
					
					$UsertoRemove = Get-AADUser -UPN $UPN
					$RemoveFrom = Get-AADGroup -Name $G
					$RemoveFromUri = "https://graph.microsoft.com/v1.0/groups/$($RemoveFrom.Id)/members/$($UsertoRemove.Id)/`$ref"
					Try
					{
						
						Invoke-RestMethod -Uri $RemoveFromUri -Headers $header -Method "Delete"
						
					}
					catch
					{
						$ResponseResult = $_.Exception.Response.GetResponseStream()
						$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
						$ResponseBody = $ResponseReader.ReadToEnd()
					}
					$ResponseBody
					
				}
				
			}
			
		}
		function Disable-AADUser
		{
			
			[cmdletbinding()]
			param (
				
				[Parameter(Mandatory = $true)]
				[String]$UPN
				
			)
			
        <#
            IMPORTANT:
            ===========================================================================
            This script is provided 'as is' without any warranty. Any issues stemming 
            from use is on the user.
            ===========================================================================
            .DESCRIPTION
            Disables AAD User
            ===========================================================================
            .PARAMETER UPN
            REQUIRED - Email/userPrincipalName of user to disable
            ===========================================================================
            .EXAMPLE
            Disable-AADUser -UPN bjameson@example.com <--- This disables bjameson@example.com
        #>
			
			
			$token = Get-MsalToken -clientid $ClientID -tenantid organizations
			$global:header = @{ 'Authorization' = $token.createauthorizationHeader(); 'ConsistencyLevel' = 'eventual' }
			$uri = "https://graph.microsoft.com/v1.0/users/$UPN"
			$Body = @{ "accountEnabled" = $false } | ConvertTo-Json
			Try
			{
				
				Invoke-RestMethod -Uri $Uri -Body $body -Headers $Header -Method Patch -ContentType "application/Json"
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
			}
			$ResponseBody
		}
		function Remove-AADUserLicense
		{
			
			[CmdletBinding()]
			param (
				[Parameter(Mandatory = $True)]
				[String]$UPN,
				[Parameter()]
				[Switch]$All,
				[Parameter()]
				[Switch]$E3,
				[Parameter()]
				[Switch]$E5,
				[Parameter()]
				[Switch]$ExchangeStd,
				[Parameter()]
				[Switch]$ExchangeEnt,
				[Parameter()]
				[Switch]$Stream,
				[Parameter()]
				[Switch]$Essentials,
				[Parameter()]
				[Switch]$AutomateFree,
				[Parameter()]
				[Switch]$AutomatePro,
				[Parameter()]
				[Switch]$PBIFree,
				[Parameter()]
				[Switch]$PBIPro,
				[Parameter()]
				[Switch]$ProjectPrem,
				[Parameter()]
				[Switch]$ProjectPro,
				[Parameter()]
				[Switch]$Visio,
				[Parameter()]
				[Switch]$WStore
			)
			
        <#
            IMPORTANT:
            ===========================================================================
            This script is provided 'as is' without any warranty. Any issues stemming 
            from use is on the user.
            ===========================================================================
            .DESCRIPTION
            Removes license(s) to AAD user
            Known bugs/issues as of 3/14/22: 
            Adding multiple licenses in one call can result in function failure due to MS Graph rate limiting
            ===========================================================================
            .PARAMETER UPN
            REQUIRED - Email address/userPrincipalName of the user.
            .PARAMETER All
            Optional switch to remove all licenses from user
            .PARAMETER E3
            Removes user the M365 E3 license
            .PARAMETER ExchangeStd
            Removes user the M365 Exchange Online Standard license
            .PARAMETER ExchangeEnt
            Removes user the M365 Exchange Online Enterprise license
            .PARAMETER Stream
            Removes user the Microsoft Stream license
            .PARAMETER Essentials
            Removes user the O365 Business Essentials license
            .PARAMETER AutomateFree
            Removes user the Power Automate Free license
            .PARAMETER AutomatePro
            Removes user the Power Automate Pro license
            .PARAMETER PBIFree
            Removes user the PowerBI Free license
            .PARAMETER PBIPro
            Removes user the PowerBI Pro license
            .PARAMETER ProjPrem
            Removes user the Project Premium (Plan 3) license
            .PARAMETER ProjPro
            Removes user the Project Pro (Plan 5) license
            .PARAMETER Visio
            Removes user the Visio (Plan 2) license
            ===========================================================================
            .EXAMPLE
            Remove-AADUserLicense -UPN bjameson@example.com -E3 -Visio <--- Removes E3 and Visio licenses from bjameson@example.com
            Remove-AADUserLicense -UPN bjameson@example.com -All <--- Removes all licenses from bjameson@example.com
        #>
			
			$token = Get-MsalToken -clientid $ClientID -tenantid organizations
			$global:header = @{ 'Authorization' = $token.createauthorizationHeader(); 'ConsistencyLevel' = 'eventual' }
			$E3SkuId = "05e9a617-0261-4cee-bb44-138d3ef5d965"
			$E5SkuId = "06ebc4ee-1bb5-47dd-8120-11324bc54e06"
			$ExStdSkuId = "4b9405b0-7788-4568-add1-99614e613b69"
			$ExEntSkuId = "19ec0d23-8335-4cbd-94ac-6050e30712fa"
			$StreamSkuId = "1f2f344a-700d-42c9-9427-5cea1d5d7ba6"
			$EssentSkuId = "3b555118-da6a-4418-894f-7df1e2096870"
			$FlowFreeSkuId = "f30db892-07e9-47e9-837c-80727f46fd3d"
			$FlowProSkuId = "bc946dac-7877-4271-b2f7-99d2db13cd2c"
			$PBIFreeSkuId = "a403ebcc-fae0-4ca2-8c8c-7a907fd6c235"
			$PBIProSkuId = "f8a1db68-be16-40ed-86d5-cb42ce701560"
			$ProjPremSkuId = "09015f9f-377f-4538-bbb5-f75ceb09358a"
			$ProjProSkuId = "53818b1b-4a27-454b-8896-0dba576410e6"
			$VisioSkuId = "c5928f49-12ba-48f7-ada3-0d743a3601d5"
			$WStoreSkuId = "6470687e-a428-4b7a-bef2-8a291ad947c9"
			
			If ($E3)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
				$Body = @{
					
					addLicenses = @()
					removeLicenses = @($E3SkuId)
					
				}
				$JSON = $Body | Convertto-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
			}
			If ($E5)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
				$Body = @{
					
					addLicenses = @()
					removeLicenses = @($E5SkuId)
					
				}
				$JSON = $Body | Convertto-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
			}
			If ($ExchangeStd)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
				$Body = @{
					
					addLicenses = @()
					removeLicenses = @($ExStdSkuId)
					
				}
				$JSON = $Body | Convertto-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
			}
			If ($ExchangeEnt)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
				$Body = @{
					
					addLicenses = @()
					removeLicenses = @($ExEntSkuId)
					
				}
				$JSON = $Body | Convertto-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
			}
			If ($Stream)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
				$Body = @{
					
					addLicenses = @()
					removeLicenses = @($StreamSkuId)
					
				}
				$JSON = $Body | Convertto-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
			}
			If ($Essentials)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
				$Body = @{
					
					addLicenses = @()
					removeLicenses = @($EssentSkuId)
					
				}
				$JSON = $Body | Convertto-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
			}
			If ($AutomateFree)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
				$Body = @{
					
					addLicenses = @()
					removeLicenses = @($FlowFreeSkuId)
					
				}
				$JSON = $Body | Convertto-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
			}
			If ($AutomatePro)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
				$Body = @{
					
					addLicenses = @()
					removeLicenses = @($FlowProSkuId)
					
				}
				$JSON = $Body | Convertto-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
			}
			If ($PBIFree)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
				$Body = @{
					
					addLicenses = @()
					removeLicenses = @($PBIFreeSkuId)
					
				}
				$JSON = $Body | Convertto-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
				
			}
			If ($PBIPro)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
				$Body = @{
					
					addLicenses = @()
					removeLicenses = @($PBIProSkuId)
					
				}
				$JSON = $Body | Convertto-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
				
			}
			If ($ProjectPrem)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
				$Body = @{
					
					addLicenses = @()
					removeLicenses = @($ProjPremSkuId)
					
				}
				$JSON = $Body | Convertto-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
				
			}
			If ($ProjectPro)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
				$Body = @{
					
					addLicenses = @()
					removeLicenses = @($ProjProSkuId)
					
				}
				$JSON = $Body | Convertto-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
				
			}
			If ($Visio)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
				$Body = @{
					
					addLicenses = @()
					removeLicenses = @($VisioSkuId)
					
				}
				$JSON = $Body | Convertto-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
				
			}
			If ($WStore)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
				$Body = @{
					
					addLicenses = @()
					removeLicenses = @($WStoreSkuId)
					
				}
				$JSON = $Body | Convertto-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
				
			}
			If ($All)
			{
				
				$detailUri = "https://graph.microsoft.com/v1.0/users/$UPN/licenseDetails"
				$Licenses = Invoke-RestMethod -Uri $detailUri -Headers $Header -Method Get
				foreach ($License in $Licenses)
				{
					
					$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
					$Body = @{
						
						addLicenses = @()
						removeLicenses = @($License.Value.SkuId)
						
					}
					$JSON = $Body | Convertto-Json
					Try
					{
						
						Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
						
					}
					catch
					{
						$ResponseResult = $_.Exception.Response.GetResponseStream()
						$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
						$ResponseBody = $ResponseReader.ReadToEnd()
					}
					$ResponseBody
					
				}
				
			}
			
		}
		function Get-AADUser
		{
			
			[cmdletbinding()]
			param (
				
				[Parameter()]
				[Switch]$All,
				[Parameter()]
				[String]$UPN
				
			)
			
        <#
            IMPORTANT:
            ===========================================================================
            This script is provided 'as is' without any warranty. Any issues stemming 
            from use is on the user.
            ===========================================================================
            .DESCRIPTION
            Gets an Azure AD User
            ===========================================================================
            .PARAMETER All
            Lists all AAD users by displayName.
            .PARAMETER Name
            The displayName of the user to get.
            ===========================================================================
            .EXAMPLE
            Get-AADUser -All <--- This will return all AzureAD users
            Get-AADUser -UPN bjameson@example.com <--- This will return the user bjameson@example.com
        #>
			
			$token = Get-MsalToken -clientid $ClientID -tenantid organizations
			$global:header = @{ 'Authorization' = $token.createauthorizationHeader() }
			
			If ($All)
			{
				
				$uri = "https://graph.microsoft.com/v1.0/users"
				$Users = While (!$NoMoreUsers)
				{
					
					$GetUsers = Invoke-RestMethod -uri $uri -headers $header -method GET
					$getUsers.value
					If ($getUsers."@odata.nextlink")
					{
						
						$uri = $getUsers."@odata.nextlink"
						
					}
					Else
					{
						
						$NoMoreUsers = $True
						
					}
				}
				$NoMoreUsers = $False
				$Users | select displayName | sort displayName
				
			}
			elseif ($UPN -ne $Null)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN"
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Headers $header -Method Get
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
			}
			else
			{
				
				Write-Host "Please specify individual group or use All switch."
				
			}
			
		}
		
		$User = Get-AADUser -UPN $UPN
		$NewName = "Z_Term_$($User.displayName)"
		$displayUri = "https://graph.microsoft.com/v1.0/users/$UPN"
		$displayBody = @{
			
			"displayName" = $NewName
			
		}
		$displayJSON = $displayBody | ConvertTo-Json
		Try
		{
			
			Start-Transcript -Path "$Env:ProgramData\AzureAdministrator\Logs\TermUser_UpdateName.log"
			Write-Host "Renaming user $($User.displayName)..." -f White
			Invoke-RestMethod -Uri $displayUri -Headers $header -Method Patch -Body $displayJSON -ContentType "application/Json"
			Write-Host "User renamed to $($User.displayName)." -f Green
			Write-host "===========" -f Green
			Stop-Transcript
			
		}
		catch
		{
			$ResponseResult = $_.Exception.Response.GetResponseStream()
			$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
			$ResponseBody = $ResponseReader.ReadToEnd()
		}
		$ResponseBody
		
		
		Write-Host "Removing $UPN from all groups..." -f White
		Try
		{
			
			Start-Transcript -Path "$Env:ProgramData\AzureAdministrator\Logs\TermUser_RemoveGroups.log"
			Remove-AADGroupMember -UPN $UPN -All | Out-Null
			Write-Host "User $UPN removed from all groups." -f Green
			Write-host "============" -f Green
			Stop-Transcript
			
		}
		catch
		{
			$ResponseResult = $_.Exception.Response.GetResponseStream()
			$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
			$ResponseBody = $ResponseReader.ReadToEnd()
		}
		$ResponseBody
		
		Write-Host "Removing all licenses for user $UPN..." -f White
		Try
		{
			
			Start-Transcript -Path "$Env:ProgramData\AzureAdministrator\Logs\TermUser_RemoveLicenses.log"
			Remove-AADUserLicense -UPN $UPN -All | Out-Null
			Write-Host "All licenses for user $UPN removed." -f Green
			Write-host "============" -f Green
			Stop-Transcript
			
		}
		catch
		{
			$ResponseResult = $_.Exception.Response.GetResponseStream()
			$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
			$ResponseBody = $ResponseReader.ReadToEnd()
		}
		$ResponseBody
		
		Write-Host "Disabling user $UPN..." -f White
		Try
		{
			
			Start-Transcript -Path "$Env:ProgramData\AzureAdministrator\Logs\TermUser_DisableUser.log"
			Disable-AADUser -UPN $UPN | Out-Null
			Write-Host "User $UPN disabled." -f Green
			Stop-Transcript
			
		}
		catch
		{
			$ResponseResult = $_.Exception.Response.GetResponseStream()
			$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
			$ResponseBody = $ResponseReader.ReadToEnd()
		}
		$ResponseBody
		
		
	}
	$Email = $textUserEmail.Text
	Term-AADUser -UPN $Email
	
	$formUserTermination.Close()
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>