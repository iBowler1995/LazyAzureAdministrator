<File version="3.2">
  <FileID>7869da29-9a2b-4962-812b-4bc9bf097cfe</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAG1cSURBVHhe7Z0HeBRV24ZRv/L72TtIJ5AQQu8d
AUUBRVFEwIJU6Yj0DtJ7kd7Se++9994DKUBI6EhRUezP/57ZLISwGFDQAM99Xfe1MDs7c87sZN/n
zMzOViOEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
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
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCiAGqVft/E1c/fzTJ6lQAAAAASUVORK5C
YII=</Preview>
  <Form>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
hrcDAA==</Form>
  <Code><![CDATA[
$formUserTermination_Load={
	#TODO: Initialize Form Controls here
	$buttonTerminate.Enabled = $false
	$formUserTermination.add_Shown({ $formUserTermination.Activate(); $textUserEmail.Focus })
	$TermUserLogFolderExists = (Test-Path -Path "$Env:ProgramData\AzureAdministrator\Logs\TermUser" -PathType Container)
	If (!$TermUserLogFolderExists)
	{
		
		New-Item -Path "$Env:ProgramData\AzureAdministrator\Logs" -Name 'TermUser' -ItemType directory -Force
		
	}
	
}

$textUserEmail_TextChanged={
	#TODO: Place custom script here
	function Get-AADUser
	{
		
		[cmdletbinding()]
		param (
			
			[Parameter()]
			[Switch]$All,
			[Parameter()]
			[String]$UPN
			
		)
		
    <#
		IMPORTANT:
        ===========================================================================
        This script is provided 'as is' without any warranty. Any issues stemming 
        from use is on the user.
        ===========================================================================
		.DESCRIPTION
		Gets an Azure AD User
		===========================================================================
		.PARAMETER All
		Lists all AAD users by displayName.
		.PARAMETER Name
		The displayName of the user to get.
		===========================================================================
		.EXAMPLE
		Get-AADUser -All <--- This will return all AzureAD users
		Get-AADUser -UPN bjameson@example.com <--- This will return the user bjameson@example.com
	#>
		
		$token = Get-MsalToken -clientid 299a2e20-bdba-415e-97b1-be55c71f62a1 -tenantid organizations
		$global:header = @{ 'Authorization' = $token.createauthorizationHeader() }
		
		If ($All)
		{
			
			$uri = "https://graph.microsoft.com/v1.0/users"
			$Users = While (!$NoMoreUsers)
			{
				
				$GetUsers = Invoke-RestMethod -uri $uri -headers $header -method GET
				$getUsers.value
				If ($getUsers."@odata.nextlink")
				{
					
					$uri = $getUsers."@odata.nextlink"
					
				}
				Else
				{
					
					$NoMoreUsers = $True
					
				}
			}
			$NoMoreUsers = $False
			$Users | select displayName | sort displayName
			
		}
		elseif ($UPN -ne $Null)
		{
			
			$Uri = "https://graph.microsoft.com/v1.0/users/$UPN"
			Try
			{
				
				Invoke-RestMethod -Uri $Uri -Headers $header -Method Get
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
			
		}
		else
		{
			
			Write-Host "Please specify individual user or use All switch."
			
		}
		
	}
	###################################################################
	$buttonTerminate.Enabled = $false
	$UserCheck = Get-AADUser -UPN ($textUserEmail.Text)
	If ($UserCheck -notlike '*does not exist*')
	{
		$buttonAssign.Enabled = $true
		$buttonRemoveUser.Enabled = $true
		$tooltipNotFound.RemoveAll()
	}
	else
	{
		
		$tooltipNotFound.SetToolTip($buttonTerminate, "User not found. Please try again.")
		
	}
}

$buttonTerminate_Click={
	#TODO: Place custom script here
	function Term-AADUser
	{
		
		[CmdletBinding()]
		param (
			[Parameter()]
			[String]$UPN
		)
		
    <#
		IMPORTANT:
        ===========================================================================
        This script is provided 'as is' without any warranty. Any issues stemming 
        from use is on the user.
        ===========================================================================
		.DESCRIPTION
		This function will terminate an AAD user in the following ways:
        *Adds Z_TERM_ to front of user's displayname (changeable at line 765)
        *Removes all user licenses
        *Removes user from all statically assigned groups
        *Disables user
		===========================================================================
		.PARAMETER UPN
		REQUIRED - Email/userPrincipalName of user to be termed
		===========================================================================
		.EXAMPLE
		Term-AADUser -UPN bjameson@example.com <--- Terms bjameson@example.com
	#>
		
		$token = Get-MsalToken -clientid $ClientID -tenantid organizations
		$global:header = @{ 'Authorization' = $token.createauthorizationHeader() }
		function Remove-AADGroupMember
		{
			
			[CmdletBinding()]
			param (
				[Parameter(Mandatory = $True)]
				[String]$UPN,
				[Parameter()]
				[Switch]$All,
				[Parameter()]
				[String]$Group,
				[Parameter()]
				[Switch]$Multi,
				[Parameter()]
				[String]$File
			)
			
        <#
            IMPORTANT:
            ===========================================================================
            This script is provided 'as is' without any warranty. Any issues stemming 
            from use is on the user.
            ===========================================================================
            .DESCRIPTION
            This function will remove an Azure AD Group Member.
            ===========================================================================
            .PARAMETER UPN
            REQUIRED - Email/UserPrincipalName of user to remove
            .PARAMETER All
            Optional switch to remove specified user from all statically assigned groups (will not remove from dynamic, because dynamic)
            .PARAMETER Group
            displayName of the group to remove user from
            .PARAMETER Multi
            Optional switch to indicate we intend to remove the user from multiple groups. Must be used with -File parameter
            .PARAMETER File
            Location of the text file with multiple groups (one per line) 
            ===========================================================================
            .EXAMPLE
            Remove-AADGroupMember -UPN bjameson@example.com -Group Azure-Test <--- Removes bjameson@example.com from the group Azure-Test
            Remove-AADGroupMember -UPN bjameson@example.com -Multi -File C:\Temp\groups.txt <--- Removes bjameson@example.com from all groups in the text file
            Remove-AADGroupMember -UPN bjameson@example.com -All <--- Removes user from all statically assigned
        #>
			
			$token = Get-MsalToken -clientid $ClientID -tenantid organizations
			$global:header = @{ 'Authorization' = $token.createauthorizationHeader() }
			
			function Get-AADUser
			{
				
				[cmdletbinding()]
				param (
					
					[Parameter()]
					[Switch]$All,
					[Parameter()]
					[String]$UPN
					
				)
				
            <#
                IMPORTANT:
                ===========================================================================
                This script is provided 'as is' without any warranty. Any issues stemming 
                from use is on the user.
                ===========================================================================
                .DESCRIPTION
                Gets an Azure AD User
                ===========================================================================
                .PARAMETER All
                Lists all AAD users by displayName.
                .PARAMETER Name
                The displayName of the user to get.
                ===========================================================================
                .EXAMPLE
                Get-AADUser -All <--- This will return all AzureAD users
                Get-AADUser -UPN bjameson@example.com <--- This will return the user bjameson@example.com
            #>
				
				$token = Get-MsalToken -clientid $ClientID -tenantid organizations
				$global:header = @{ 'Authorization' = $token.createauthorizationHeader() }
				
				If ($All)
				{
					
					$uri = "https://graph.microsoft.com/v1.0/users"
					$Users = While (!$NoMoreUsers)
					{
						
						$GetUsers = Invoke-RestMethod -uri $uri -headers $header -method GET
						$getUsers.value
						If ($getUsers."@odata.nextlink")
						{
							
							$uri = $getUsers."@odata.nextlink"
							
						}
						Else
						{
							
							$NoMoreUsers = $True
							
						}
					}
					$NoMoreUsers = $False
					$Users | select displayName | sort displayName
					
				}
				elseif ($UPN -ne $Null)
				{
					
					$Uri = "https://graph.microsoft.com/v1.0/users/$UPN"
					Try
					{
						
						Invoke-RestMethod -Uri $Uri -Headers $header -Method Get
						
					}
					catch
					{
						$ResponseResult = $_.Exception.Response.GetResponseStream()
						$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
						$ResponseBody = $ResponseReader.ReadToEnd()
					}
					$ResponseBody
					
				}
				else
				{
					
					Write-Host "Please specify individual group or use All switch."
					
				}
				
			}
			function Get-AADGroup
			{
				
            <#
                IMPORTANT:
                ===========================================================================
                This script is provided 'as is' without any warranty. Any issues stemming 
                from use is on the user.
                ===========================================================================
                .DESCRIPTION
                Gets an Azure AD Group
                ===========================================================================
                .PARAMETER All
                Lists all AAD groups by displayName.
                .PARAMETER Name
                The displayName of the group to get.
                ===========================================================================
                .EXAMPLE
                Get-AADGroup -All <--- This will return all AzureAD groups
                Get-AADGroup -Name Azure-Test <--- This will return the group Azure-Test
            #>
				
				[cmdletbinding()]
				param (
					
					[Parameter()]
					[Switch]$All,
					[Parameter()]
					[String]$Name
					
				)
				
				$token = Get-MsalToken -clientid $ClientID -tenantid organizations
				$global:header = @{ 'Authorization' = $token.createauthorizationHeader(); 'ConsistencyLevel' = 'eventual' }
				
				If ($All)
				{
					
					$uri = "https://graph.microsoft.com/v1.0/groups"
					$Groups = While (!$NoMoreGroups)
					{
						
						Try
						{
							
							$GetGroups = Invoke-RestMethod -uri $uri -headers $header -method GET
							
						}
						catch
						{
							$ResponseResult = $_.Exception.Response.GetResponseStream()
							$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
							$ResponseBody = $ResponseReader.ReadToEnd()
						}
						$ResponseBody
						$getGroups.value
						If ($getGroups."@odata.nextlink")
						{
							
							$uri = $getGroups."@odata.nextlink"
							
						}
						Else
						{
							
							$NoMoreGroups = $True
							
						}
					}
					$NoMoreGroups = $False
					$Groups | select displayName | sort displayName
					
				}
				elseif ($Name -ne $Null)
				{
					
					$Uri = "https://graph.microsoft.com/v1.0/groups"
					$Groups = While (!$NoMoreGroups)
					{
						
						Try
						{
							
							$GetGroups = Invoke-RestMethod -uri $uri -headers $header -method GET
							
						}
						catch
						{
							$ResponseResult = $_.Exception.Response.GetResponseStream()
							$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
							$ResponseBody = $ResponseReader.ReadToEnd()
						}
						$ResponseBody
						$getGroups.value
						If ($getGroups."@odata.nextlink")
						{
							
							$uri = $getGroups."@odata.nextlink"
							
						}
						Else
						{
							
							$NoMoreGroups = $True
							
						}
					}
					$NoMoreGroups = $False
					$Groups | where { $_.displayName -eq $Name }
					
				}
				else
				{
					
					Write-Host "Please specify individual group or use All switch."
					
				}
				
			}
			
			If ($all)
			{
				
				$GroupsUri = "https://graph.microsoft.com/v1.0/users/$($User.Id)/transitiveMemberOf"
				$GroupRequest = Invoke-RestMethod -Uri $GroupsUri -Headers $Header -Method Get
				foreach ($Item in $GroupRequest.value)
				{
					
					$RemoveFrom = Get-AADGroup -Name $Item.displayName
					$UsertoRemove = Get-AADUser -UPN $UPN
					$RemoveFromUri = "https://graph.microsoft.com/v1.0/groups/$($RemoveFrom.Id)/members/$($UsertoRemove.Id)/`$ref"
					Try
					{
						
						Invoke-RestMethod -Uri $RemoveFromUri -Headers $header -Method "Delete"
						
					}
					catch
					{
						$ResponseResult = $_.Exception.Response.GetResponseStream()
						$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
						$ResponseBody = $ResponseReader.ReadToEnd()
						$ResponseBody
					}
					
				}
				
			}
			elseIf (($Group -ne $Null) -and (!$Multi))
			{
				
				$UsertoRemove = Get-AADUser -UPN $UPN
				$RemoveFrom = Get-AADGroup -Name $item
				$RemoveFromUri = "https://graph.microsoft.com/v1.0/groups/$($RemoveFrom.Id)/members/$($UsertoRemove.Id)/`$ref"
				Try
				{
					
					Invoke-RestMethod -Uri $RemoveFromUri -Headers $header -Method "Delete"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
			}
			else
			{
				
				
				$Groupstoremove = Get-Content $File
				foreach ($G in $Groupstoremove)
				{
					
					$UsertoRemove = Get-AADUser -UPN $UPN
					$RemoveFrom = Get-AADGroup -Name $G
					$RemoveFromUri = "https://graph.microsoft.com/v1.0/groups/$($RemoveFrom.Id)/members/$($UsertoRemove.Id)/`$ref"
					Try
					{
						
						Invoke-RestMethod -Uri $RemoveFromUri -Headers $header -Method "Delete"
						
					}
					catch
					{
						$ResponseResult = $_.Exception.Response.GetResponseStream()
						$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
						$ResponseBody = $ResponseReader.ReadToEnd()
					}
					$ResponseBody
					
				}
				
			}
			
		}
		function Disable-AADUser
		{
			
			[cmdletbinding()]
			param (
				
				[Parameter(Mandatory = $true)]
				[String]$UPN
				
			)
			
        <#
            IMPORTANT:
            ===========================================================================
            This script is provided 'as is' without any warranty. Any issues stemming 
            from use is on the user.
            ===========================================================================
            .DESCRIPTION
            Disables AAD User
            ===========================================================================
            .PARAMETER UPN
            REQUIRED - Email/userPrincipalName of user to disable
            ===========================================================================
            .EXAMPLE
            Disable-AADUser -UPN bjameson@example.com <--- This disables bjameson@example.com
        #>
			
			
			$token = Get-MsalToken -clientid $ClientID -tenantid organizations
			$global:header = @{ 'Authorization' = $token.createauthorizationHeader(); 'ConsistencyLevel' = 'eventual' }
			$uri = "https://graph.microsoft.com/v1.0/users/$UPN"
			$Body = @{ "accountEnabled" = $false } | ConvertTo-Json
			Try
			{
				
				Invoke-RestMethod -Uri $Uri -Body $body -Headers $Header -Method Patch -ContentType "application/Json"
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
			}
			$ResponseBody
		}
		function Remove-AADUserLicense
		{
			
			[CmdletBinding()]
			param (
				[Parameter(Mandatory = $True)]
				[String]$UPN,
				[Parameter()]
				[Switch]$All,
				[Parameter()]
				[Switch]$E3,
				[Parameter()]
				[Switch]$E5,
				[Parameter()]
				[Switch]$ExchangeStd,
				[Parameter()]
				[Switch]$ExchangeEnt,
				[Parameter()]
				[Switch]$Stream,
				[Parameter()]
				[Switch]$Essentials,
				[Parameter()]
				[Switch]$AutomateFree,
				[Parameter()]
				[Switch]$AutomatePro,
				[Parameter()]
				[Switch]$PBIFree,
				[Parameter()]
				[Switch]$PBIPro,
				[Parameter()]
				[Switch]$ProjectPrem,
				[Parameter()]
				[Switch]$ProjectPro,
				[Parameter()]
				[Switch]$Visio,
				[Parameter()]
				[Switch]$WStore
			)
			
        <#
            IMPORTANT:
            ===========================================================================
            This script is provided 'as is' without any warranty. Any issues stemming 
            from use is on the user.
            ===========================================================================
            .DESCRIPTION
            Removes license(s) to AAD user
            Known bugs/issues as of 3/14/22: 
            Adding multiple licenses in one call can result in function failure due to MS Graph rate limiting
            ===========================================================================
            .PARAMETER UPN
            REQUIRED - Email address/userPrincipalName of the user.
            .PARAMETER All
            Optional switch to remove all licenses from user
            .PARAMETER E3
            Removes user the M365 E3 license
            .PARAMETER ExchangeStd
            Removes user the M365 Exchange Online Standard license
            .PARAMETER ExchangeEnt
            Removes user the M365 Exchange Online Enterprise license
            .PARAMETER Stream
            Removes user the Microsoft Stream license
            .PARAMETER Essentials
            Removes user the O365 Business Essentials license
            .PARAMETER AutomateFree
            Removes user the Power Automate Free license
            .PARAMETER AutomatePro
            Removes user the Power Automate Pro license
            .PARAMETER PBIFree
            Removes user the PowerBI Free license
            .PARAMETER PBIPro
            Removes user the PowerBI Pro license
            .PARAMETER ProjPrem
            Removes user the Project Premium (Plan 3) license
            .PARAMETER ProjPro
            Removes user the Project Pro (Plan 5) license
            .PARAMETER Visio
            Removes user the Visio (Plan 2) license
            ===========================================================================
            .EXAMPLE
            Remove-AADUserLicense -UPN bjameson@example.com -E3 -Visio <--- Removes E3 and Visio licenses from bjameson@example.com
            Remove-AADUserLicense -UPN bjameson@example.com -All <--- Removes all licenses from bjameson@example.com
        #>
			
			$token = Get-MsalToken -clientid $ClientID -tenantid organizations
			$global:header = @{ 'Authorization' = $token.createauthorizationHeader(); 'ConsistencyLevel' = 'eventual' }
			$E3SkuId = "05e9a617-0261-4cee-bb44-138d3ef5d965"
			$E5SkuId = "06ebc4ee-1bb5-47dd-8120-11324bc54e06"
			$ExStdSkuId = "4b9405b0-7788-4568-add1-99614e613b69"
			$ExEntSkuId = "19ec0d23-8335-4cbd-94ac-6050e30712fa"
			$StreamSkuId = "1f2f344a-700d-42c9-9427-5cea1d5d7ba6"
			$EssentSkuId = "3b555118-da6a-4418-894f-7df1e2096870"
			$FlowFreeSkuId = "f30db892-07e9-47e9-837c-80727f46fd3d"
			$FlowProSkuId = "bc946dac-7877-4271-b2f7-99d2db13cd2c"
			$PBIFreeSkuId = "a403ebcc-fae0-4ca2-8c8c-7a907fd6c235"
			$PBIProSkuId = "f8a1db68-be16-40ed-86d5-cb42ce701560"
			$ProjPremSkuId = "09015f9f-377f-4538-bbb5-f75ceb09358a"
			$ProjProSkuId = "53818b1b-4a27-454b-8896-0dba576410e6"
			$VisioSkuId = "c5928f49-12ba-48f7-ada3-0d743a3601d5"
			$WStoreSkuId = "6470687e-a428-4b7a-bef2-8a291ad947c9"
			
			If ($E3)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
				$Body = @{
					
					addLicenses = @()
					removeLicenses = @($E3SkuId)
					
				}
				$JSON = $Body | Convertto-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
			}
			If ($E5)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
				$Body = @{
					
					addLicenses = @()
					removeLicenses = @($E5SkuId)
					
				}
				$JSON = $Body | Convertto-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
			}
			If ($ExchangeStd)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
				$Body = @{
					
					addLicenses = @()
					removeLicenses = @($ExStdSkuId)
					
				}
				$JSON = $Body | Convertto-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
			}
			If ($ExchangeEnt)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
				$Body = @{
					
					addLicenses = @()
					removeLicenses = @($ExEntSkuId)
					
				}
				$JSON = $Body | Convertto-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
			}
			If ($Stream)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
				$Body = @{
					
					addLicenses = @()
					removeLicenses = @($StreamSkuId)
					
				}
				$JSON = $Body | Convertto-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
			}
			If ($Essentials)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
				$Body = @{
					
					addLicenses = @()
					removeLicenses = @($EssentSkuId)
					
				}
				$JSON = $Body | Convertto-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
			}
			If ($AutomateFree)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
				$Body = @{
					
					addLicenses = @()
					removeLicenses = @($FlowFreeSkuId)
					
				}
				$JSON = $Body | Convertto-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
			}
			If ($AutomatePro)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
				$Body = @{
					
					addLicenses = @()
					removeLicenses = @($FlowProSkuId)
					
				}
				$JSON = $Body | Convertto-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
			}
			If ($PBIFree)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
				$Body = @{
					
					addLicenses = @()
					removeLicenses = @($PBIFreeSkuId)
					
				}
				$JSON = $Body | Convertto-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
				
			}
			If ($PBIPro)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
				$Body = @{
					
					addLicenses = @()
					removeLicenses = @($PBIProSkuId)
					
				}
				$JSON = $Body | Convertto-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
				
			}
			If ($ProjectPrem)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
				$Body = @{
					
					addLicenses = @()
					removeLicenses = @($ProjPremSkuId)
					
				}
				$JSON = $Body | Convertto-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
				
			}
			If ($ProjectPro)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
				$Body = @{
					
					addLicenses = @()
					removeLicenses = @($ProjProSkuId)
					
				}
				$JSON = $Body | Convertto-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
				
			}
			If ($Visio)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
				$Body = @{
					
					addLicenses = @()
					removeLicenses = @($VisioSkuId)
					
				}
				$JSON = $Body | Convertto-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
				
			}
			If ($WStore)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
				$Body = @{
					
					addLicenses = @()
					removeLicenses = @($WStoreSkuId)
					
				}
				$JSON = $Body | Convertto-Json
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
				
			}
			If ($All)
			{
				
				$detailUri = "https://graph.microsoft.com/v1.0/users/$UPN/licenseDetails"
				$Licenses = Invoke-RestMethod -Uri $detailUri -Headers $Header -Method Get
				foreach ($License in $Licenses)
				{
					
					$Uri = "https://graph.microsoft.com/v1.0/users/$UPN/assignLicense"
					$Body = @{
						
						addLicenses = @()
						removeLicenses = @($License.Value.SkuId)
						
					}
					$JSON = $Body | Convertto-Json
					Try
					{
						
						Invoke-RestMethod -Uri $Uri -Body $JSON -Headers $Header -Method Post -ContentType "application/Json"
						
					}
					catch
					{
						$ResponseResult = $_.Exception.Response.GetResponseStream()
						$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
						$ResponseBody = $ResponseReader.ReadToEnd()
					}
					$ResponseBody
					
				}
				
			}
			
		}
		function Get-AADUser
		{
			
			[cmdletbinding()]
			param (
				
				[Parameter()]
				[Switch]$All,
				[Parameter()]
				[String]$UPN
				
			)
			
        <#
            IMPORTANT:
            ===========================================================================
            This script is provided 'as is' without any warranty. Any issues stemming 
            from use is on the user.
            ===========================================================================
            .DESCRIPTION
            Gets an Azure AD User
            ===========================================================================
            .PARAMETER All
            Lists all AAD users by displayName.
            .PARAMETER Name
            The displayName of the user to get.
            ===========================================================================
            .EXAMPLE
            Get-AADUser -All <--- This will return all AzureAD users
            Get-AADUser -UPN bjameson@example.com <--- This will return the user bjameson@example.com
        #>
			
			$token = Get-MsalToken -clientid $ClientID -tenantid organizations
			$global:header = @{ 'Authorization' = $token.createauthorizationHeader() }
			
			If ($All)
			{
				
				$uri = "https://graph.microsoft.com/v1.0/users"
				$Users = While (!$NoMoreUsers)
				{
					
					$GetUsers = Invoke-RestMethod -uri $uri -headers $header -method GET
					$getUsers.value
					If ($getUsers."@odata.nextlink")
					{
						
						$uri = $getUsers."@odata.nextlink"
						
					}
					Else
					{
						
						$NoMoreUsers = $True
						
					}
				}
				$NoMoreUsers = $False
				$Users | select displayName | sort displayName
				
			}
			elseif ($UPN -ne $Null)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/users/$UPN"
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Headers $header -Method Get
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
				}
				$ResponseBody
				
			}
			else
			{
				
				Write-Host "Please specify individual group or use All switch."
				
			}
			
		}
		
		$User = Get-AADUser -UPN $UPN
		$NewName = "Z_Term_$($User.displayName)"
		$displayUri = "https://graph.microsoft.com/v1.0/users/$UPN"
		$displayBody = @{
			
			"displayName" = $NewName
			
		}
		$displayJSON = $displayBody | ConvertTo-Json
		Try
		{
			
			Start-Transcript -Path "$Env:ProgramData\AzureAdministrator\Logs\TermUser\TermUser_UpdateName_$Timestamp.log"
			Write-Host "Renaming user $($User.displayName)..." -f White
			Invoke-RestMethod -Uri $displayUri -Headers $header -Method Patch -Body $displayJSON -ContentType "application/Json"
			Write-Host "User renamed to $($User.displayName)." -f Green
			Write-host "===========" -f Green
			Stop-Transcript
			
		}
		catch
		{
			$ResponseResult = $_.Exception.Response.GetResponseStream()
			$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
			$ResponseBody = $ResponseReader.ReadToEnd()
		}
		$ResponseBody
		
		
		Write-Host "Removing $UPN from all groups..." -f White
		Try
		{
			
			Start-Transcript -Path "$Env:ProgramData\AzureAdministrator\Logs\TermUser\TermUser_RemoveGroups_$Timestamp.log"
			Remove-AADGroupMember -UPN $UPN -All | Out-Null
			Write-Host "User $UPN removed from all groups." -f Green
			Write-host "============" -f Green
			Stop-Transcript
			
		}
		catch
		{
			$ResponseResult = $_.Exception.Response.GetResponseStream()
			$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
			$ResponseBody = $ResponseReader.ReadToEnd()
		}
		$ResponseBody
		
		Write-Host "Removing all licenses for user $UPN..." -f White
		Try
		{
			
			Start-Transcript -Path "$Env:ProgramData\AzureAdministrator\Logs\TermUser\TermUser_RemoveLicenses_$Timestamp.log"
			Remove-AADUserLicense -UPN $UPN -All | Out-Null
			Write-Host "All licenses for user $UPN removed." -f Green
			Write-host "============" -f Green
			Stop-Transcript
			
		}
		catch
		{
			$ResponseResult = $_.Exception.Response.GetResponseStream()
			$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
			$ResponseBody = $ResponseReader.ReadToEnd()
		}
		$ResponseBody
		
		Write-Host "Disabling user $UPN..." -f White
		Try
		{
			
			Start-Transcript -Path "$Env:ProgramData\AzureAdministrator\Logs\TermUser\TermUser_DisableUser_$Timestamp.log"
			Disable-AADUser -UPN $UPN | Out-Null
			Write-Host "User $UPN disabled." -f Green
			Stop-Transcript
			
		}
		catch
		{
			$ResponseResult = $_.Exception.Response.GetResponseStream()
			$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
			$ResponseBody = $ResponseReader.ReadToEnd()
		}
		$ResponseBody
		
		
	}
	$Email = $textUserEmail.Text
	Try{
		
		Term-AADUser -UPN $Email
		
	}
	Catch
	{
		
		[System.Windows.Forms.MessageBox]::show("Error terming user.`r`nError Message: $($_.Exception).`r`nFor more info, see logs.", 'Error', 'OK', 'Error')
		
	}
	
	
	$formUserTermination.Close()
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>