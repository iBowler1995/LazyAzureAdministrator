<File version="3.2">
  <FileID>21e97806-a8e9-4db3-b2b2-f38303764575</FileID>
  <Preview>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
AJRSrcsAIEQFBgClVOsyAAhRgQFAKdW6DABCVGAAUEq1LgOAEBUYAJRSrcsAIEQFBgClVOsyAAhR
gQFAKdW6DABCVGAAUEq1LgOAEBUYAJRSrcsAIEQFBgClVOsyAAhRgQFAKdW6DABCVGAAUEq1LgOA
EBUYAJRSrcsAIEQFBgClVOsyAAhRgQFAKdW6DABCVGAAUEq1LgOAEBUYAJRSrcsAIEQFBgClVOsy
AAhRgQFAKdW6DABCVGAAUEq1LgOAEBUYAJRSrcsAIEQFBgClVOsyAAhRgQFAKdW6DABCVGAAUEq1
LgOAEBUYAJRSrcsAIEQFBgClVOsyAAhRgQFAKdW6DABCVGAAUEq1LgOAEBUYAJRSrcsAIEQFBgCl
VOsyAAhRgQFAKdW6DABCVGAAUEq1LgOAEBUYAJRSrcsAIEQFBgClVOsyAAhRgQFAKdW6DABCVGAA
UEq1LgOAEBUYAJRSrcsAIEQFBgClVOsyAAhRgQFAKdW6DABCVGAAUEq1LgOAEBUYAJRSrcsAIEQF
BgClVOsyAAhRgQFAKdW6DABCVGAAUEq1LgOAEBUYAJRSrcsAIEQFBgClVOsyAAhRgQFAKdW6DABC
VGAAUEq1LgOAEBUYAJRSrcsAIEQFBgClVOsyAAhRgQFAKdW6DABCVGAAUEq1LgOAEBUYAJRSrcsA
IEQFBgClVOsyAAhRgQFAKdW6DABCVGAAUEq1LgOAEBUYAJRSrcsAIEQFBgClVOsyAAhRgQFAKdW6
DABCVGAAUEq1LgOAEBUYAJRSrcsAIEQFBgClVOsyAAhRgQFAKdW6DABCVGAAUEq1LgOAEBUYAJRS
rcsAIEQFBgClVOsyAAhRgQFAKdW6DABCVGAAUEq1LgOAEBUYAJRSrcsAIEQFBgClVOsyAAhRgQFA
KdW6DABCVGAAUEq1LgOAEBUYAJRSrcsAIEQFBgClVOsyAAhRgQFAKdW6DABCVGAAUEq1LgOAEBUY
AJRSrcsAIEQFBgClVOsyAAhRgQFAKdW6DABCVGAAUEq1LgOAEBUYAJRSrcsAIEQFBgClVOsyAAhR
gQFAKdW6DABCVGAAUEq1LgOAEBUYAJRSrcsAIEQFBgClVOsyAAhRgQFAKdW6DABCVGAAUEq1LgOA
EBUYAJRSrcsAIEQFBgClVOsyAAhRgQFAKdW6DABCVGAAUEq1LgOAEBUYAJRSrcsAIEQFBgClVOsy
AAhRgQFAKdW6DABCVGAAUEq1LgOAEBUYAJRSrcsAIEQFBgClVOsyAAhRgQFAKdW6DABCVGAAUEq1
LgOAEBUYAJRSrcsAIEQFBgClVOsyAAhRgQFAKdW6DABCVGAAUEq1LgOAEBUYAJRSrcsAIEQFBgCl
VOsyAAhRgQFAKdW6DABCVGAAUEq1LgOAEBUYAJRSrcsAIEQFBgClVOsyAAhRgQFAKdW6DABCVGAA
UEq1LgOAEBUYAJRSrcsAIEQFBgClVOsyAAhRgQFAKdW6DABCVGAAUEq1LgOAEBUYAJRSrcsAIEQF
BgClVOsyAAhRgQFAKdW6DABCVGAAUEq1LgOAEBUYAJRSrcsAIEQFBgClVOsyAAhRgQFAKdW6DABC
VGAAUEq1LgOAEBUYAJRSrcsAIEQFBgClVOsyAAhRgQFAKdW6DABCVGAAUEq1LgOAEBUYAJRSrcsA
IEQFBgClVOsyAAhRgQFAKdW6DABCVGAAUEq1LgOAEBUYAJRSrcsAIEQFBgClVOsyAAhRgQFAKdW6
DABCVGAAUEq1LgOAEBUYAJRSrcsAIEQFBgClVOsyAAhRgQFAKdW6DABCVGAAUEq1LgOAEBUYAJRS
rcsAIEQFBgClVOsyAAhRgQFAKdW6DABCVGAAUEq1LgOAEBUYAJRSrcsAIEQFBgClVOsyAAhRgQFA
KdW6DABCVGAAUEq1LgOAEBUYAJRSrcsAIEQFBgClVOsyAAhRgQFAKdW6DABCVGAAUEq1LgOAEBUY
AJRSrcsAIEQFBgClVOsyAAhRgQFAKdW6DABCVGAAUEq1LgOAEBUYAJRSrcsAIEQFBgClVOsyAAhR
gQFAKdW6DABCVGAAUEq1LgOAEBUYAJRSrcsAIEQFBgClVOsyAAhRgQFAKdW6DABCVGAAUEq1LgOA
EBUYAJRSrcsAIEQFBgClVOsyAAhRgQFAKdW6DABCVGAAUEq1LgOAEBUYAJRSrcsAIEQFBgClVOsy
AAhRgQFAKdW6DABCVGAAUEq1LgOAEBUYAJRSrcsAIEQFBgClVOsyAAhRgQFAKdW6DABCVGAAUEq1
LgOAEBUYAJRSrcsAIEQFBgClVOsyAAhRgQFAKdW6DABCVGAAUEq1LgOAEBUYAJRSrcsAIEQFBgCl
VOsyAAhRgQFAKdW6DABCVGAAUEq1LgOAEBUYAJRSrcsAIEQFBgClVOsyAAhRgQFAKdW6DABCVGAA
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</Preview>
  <Form>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
SvI7487wqUbw/V8XQMb3MdTRn/8P3qH9qyDBAwA=</Form>
  <Code><![CDATA[
$formRenameDevice_Load={
	
	function Get-IntuneDevice
	{
		
    <#
		IMPORTANT:
        ===========================================================================
        This script is provided 'as is' without any warranty. Any issues stemming 
        from use is on the user.
        ===========================================================================
		.DESCRIPTION
		Retrieves Intune managed device.
		===========================================================================
		.PARAMETER Name
		Required if not using All switch - Name of the device to retrieve.
		.PARAMETER All
		Retrieves all Intune managed devices.
		===========================================================================
		.EXAMPLE
		Assign-IntuneDevice -Name DESKTOP-7XH8Z <--- Retrieves DESKTOP-7XH8Z if exist
        Assign-IntuneDevice -All <--- Retrieves all Intune managed devices.
	#>
		
		[CmdletBinding()]
		param (
			
			[Parameter()]
			[String]$Name,
			[Parameter()]
			[Switch]$All
			
		)
		
		$token = Get-MsalToken -clientid $ClientID -tenantid organizations
		$global:header = @{ 'Authorization' = $token.createauthorizationHeader(); 'ConsistencyLevel' = 'eventual' }
		
		If (!$All -and $Name)
		{
			
			$Uri = "https://graph.microsoft.com/beta/deviceManagement/managedDevices?`$filter=deviceName%20eq%20'$Name'"
			Try
			{
				
				$Device = (Invoke-RestMethod -Uri $Uri -Method Get -Headers $Header).value
				If ($Device -ne $Null)
				{
					
					$device
					
				}
				else
				{
					
					Write-Host "Device $Name not found." -f Red
					
				}
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
			
		}
		elseif (!$All -and !$Name)
		{
			
			Write-Host "Please specify a device using the -Name parameter or use the -All switch to see all devices." -f Red
			
		}
		elseif ($All -and !$Name)
		{
			
			$Uri = "https://graph.microsoft.com/beta/deviceManagement/managedDevices?`$filter=(((deviceType%20eq%20%27desktop%27)%20or%20(deviceType%20eq%20%27windowsRT%27)%20or%20(deviceType%20eq%20%27winEmbedded%27)%20or%20(deviceType%20eq%20%27surfaceHub%27)))"
			Try
			{
				
				(Invoke-RestMethod -uri $uri -headers $header -method GET).value
				
			}
			catch
			{
				
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
			
		}
		else
		{
			
			Write-Host "Please specify a device using the -Name parameter or use the -All switch to see all devices." -f Red
			
		}
		
	}
	#########################################
	$global:AllDevices = Get-IntuneDevice -All | sort -Property deviceName | select -Expand deviceName
	$buttonRenameDevice.Enabled = $False
	foreach ($item in $AllDevices)
	{
		
		$listboxDevices.Items.Add($Item) | Out-Null
		$listboxDevices.Sorted = $True
		
	}
	$RenameDeviceLogFolderExists = (Test-Path -Path "$Env:ProgramData\AzureAdministrator\Logs\RenameDevice" -PathType Container)
	If (!$RenameDeviceLogFolderExists)
	{
		
		New-Item -Path "$Env:ProgramData\AzureAdministrator\Logs" -Name 'RenameDevice' -ItemType directory -Force
		
	}
}




$textboxNewName_MouseHover={
	#TODO: Place custom script here
	$tooltipRandom.SetToolTip($textboxNewName, "Random numbers: {{rand:x}} where x is number of digits to use`r`nSerial number: {{serialnumber}}")
}

$buttonRenameDevice_Click={
	function Rename-IntuneDevice
	{
		
    <#
		IMPORTANT:
        ===========================================================================
        This script is provided 'as is' without any warranty. Any issues stemming 
        from use is on the user.
        ===========================================================================
		.DESCRIPTION
		Renames an Intune managed device.
		===========================================================================
		.PARAMETER Device
		Required if not using all or bulk switch - Name of device to rename.
        .PARAMETER Rename
        Required if not using all or bulk switch - New name of the device.
        .PARAMETER Bulk
        Switch to specify that you have a file of devices to rename. Must be used with FileName, Pattern, and either Numbers or Letters (or both) switches.
        .PARAMETER FileName
        Path to the file containing the devices to be renamed.
        .PARAMETER All
        Renames all Intune devices. Must be used with Pattern and either Numbers or Letters (or both) switches.
        .PARAMETER Pattern
        Prefix for your new device names. Example: -Pattern Desktop -Numbers -Letters will rename each specified device to DESKTOP-{randomly generated alphanumeric string}.
        .PARAMETER Numbers
        Switch to add randomized numbers to the end of new device names. Only use with Bulk or All switches.
        .PARAMETER Letters
        Switch to add randomized letters to the end of new device names. Only use with Bulk or All switches.
		===========================================================================
		.EXAMPLE
		Rename-IntuneDevice -Device DESKTOP-7XH8Z
	#>
		
		[CmdletBinding()]
		param (
			
			[Parameter()]
			[String]$Device,
			[Parameter()]
			[String]$Rename,
			[Parameter()]
			[Switch]$Bulk,
			[Parameter()]
			[Switch]$All,
			[Parameter()]
			[String]$FileName,
			[Parameter()]
			[Switch]$Pattern,
			[Parameter()]
			[Switch]$Numbers,
			[Parameter()]
			[Switch]$Letters
			
		)
		
		$token = Get-MsalToken -clientid $ClientID -tenantid organizations
		$global:header = @{ 'Authorization' = $token.createauthorizationHeader(); 'ConsistencyLevel' = 'eventual' }
		
		function Get-IntuneDevice
		{
			
			[CmdletBinding()]
			param (
				
				[Parameter()]
				[String]$Name,
				[Parameter()]
				[Switch]$All
				
			)
			
			If (!$All -and $Name)
			{
				
				$Uri = "https://graph.microsoft.com/beta/deviceManagement/managedDevices?`$filter=deviceName%20eq%20'$Name'"
				Try
				{
					
					$Device = (Invoke-RestMethod -Uri $Uri -Method Get -Headers $Header).value
					If ($Device -ne $Null)
					{
						
						$device
						
					}
					else
					{
						
						Write-Host "Device $Name not found." -f Red
						
					}
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
					$ResponseBody
				}
				
				
			}
			elseif (!$All -and !$Name)
			{
				
				Write-Host "Please specify a device using the -Name parameter or use the -All switch to see all devices." -f Red
				
			}
			elseif ($All -and !$Name)
			{
				
				$Uri = "https://graph.microsoft.com/beta/deviceManagement/managedDevices?`$filter=(((deviceType%20eq%20%27desktop%27)%20or%20(deviceType%20eq%20%27windowsRT%27)%20or%20(deviceType%20eq%20%27winEmbedded%27)%20or%20(deviceType%20eq%20%27surfaceHub%27)))"
				Try
				{
					
					(Invoke-RestMethod -uri $uri -headers $header -method GET).value
					
				}
				catch
				{
					
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
					$ResponseBody
				}
				
				
			}
			else
			{
				
				Write-Host "Please specify a device using the -Name parameter or use the -All switch to see all devices." -f Red
				
			}
			
		}
		###########################################################
		
		Function New-RandomComputerName
		{
			[CmdletBinding(SupportsShouldProcess = $True)]
			Param (
				[int]$Length,
				[switch]$Letters
			)
			
			If (!$Letters)
			{
				
				#Characters Sets to be for Password Creation
				
				$CharSimple = "A", "B", "C", "D", "E", "F", "G", "H", "J", "K", "L", "M", "N", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0"
				$CharNumbers = "1", "2", "3", "4", "5", "6", "7", "8", "9", "0"
				
				#Verify if the Password contains at least 1 digit character
				
				$ContainsNumber = $False
				$Name = $Null
				
				#Sets which Character Array to use based on $Complex
				
				#Loop to actually generate the password
				
				for ($i = 0; $i -lt $Length; $i++)
				{
					$c = Get-Random -InputObject $CharSimple
					if ([char]::IsDigit($c))
					{ $ContainsNumber = $True }
					$Name += $c
				}
				
				#Check to see if a Digit was seen, if not, fixit
				
				if ($ContainsNumber)
				{
					Return $Name
				}
				else
				{
					$Position = Get-Random -Maximum $Length
					$Number = Get-Random -InputObject $CharNumbers
					$NameArray = $Name.ToCharArray()
					$NameArray[$Position] = $Number
					$Name = ""
					foreach ($s in $NameArray)
					{
						$Name += $s
					}
					Return $Name
					
				}
				
			}
			else
			{
				
				$String = -join ((65 .. 90) + (97 .. 122) | Get-Random -Count 5 | % { [char]$_ })
				$Name = $String.ToUpper()
				Return $Name
				
			}
			
		}
		
		###########################################################
		If ($Device -and !$Bulk)
		{
			
			$IntuneDevice = Get-IntuneDevice -Name $Device
			$Uri = "https://graph.microsoft.com/beta/deviceManagement/managedDevices/$($IntuneDevice.Id)/setDeviceName"
			$Body = @{
				
				"deviceName" = $Rename
				
			}
			$JSON = $Body | ConvertTo-Json
			
			Try
			{
				
				Invoke-RestMethod -Uri $Uri -Headers $Header -Method POST -Body $JSON -ContentType "application/Json"
				
			}
			catch
			{
				
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
			
		}
		elseif ($Device -and $Bulk)
		{
			
			Write-Host "Cannot use both -Device and -Bulk parameter." -f Yellow
			
		}
		elseif (!$Device -and $Bulk -and $Pattern -and $FileName -and !$All -and $Numbers -and !$Letters)
		{
			
			$Devices = Get-Content $FileName
			$Random = Get-Random -Maximum 9999
			$NewName = "$Pattern-$Random"
			$DeviceExists = Get-IntuneDevice -Name $NewName
			while ($DeviceExists -ne $Null)
			{
				
				Write-Host "Device already exists with name generated, trying again." -f Yellow
				Write-Host "============" -f white
				$Random = Get-Random -Maximum 9999
				$NewName = "$Pattern-$Random"
				$DeviceExists = Get-IntuneDevice -Name $NewName
				
			}
			
			foreach ($Item in $Devices)
			{
				
				$IntuneDevice = Get-IntuneDevice -Name $Device
				$Uri = "https://graph.microsoft.com/beta/deviceManagement/managedDevices/$($IntuneDevice.Id)/setDeviceName"
				$Body = @{
					
					"deviceName" = $NewName
					
				}
				$JSON = $Body | ConvertTo-Json
				
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Headers $Header -Method POST -Body $JSON -ContentType "application/Json"
					
				}
				catch
				{
					
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
					$ResponseBody
				}
				
				
			}
			
		}
		elseif (!$Device -and $Bulk -and $Pattern -and $FileName -and !$All -and !$Numbers -and $Letters)
		{
			
			$Devices = Get-Content $FileName
			$Random = New-RandomComputerName -Length 5 -Letters
			$NewName = "$Pattern-$Random"
			$DeviceExists = Get-IntuneDevice -Name $NewName
			while ($DeviceExists -ne $Null)
			{
				
				Write-Host "Device already exists with name generated, trying again." -f Yellow
				Write-Host "============" -f white
				$Random = Get-Random -Maximum 9999
				$NewName = "$Pattern-$Random"
				$DeviceExists = Get-IntuneDevice -Name $NewName
				
			}
			
			foreach ($Item in $Devices)
			{
				
				$IntuneDevice = Get-IntuneDevice -Name $Device
				$Uri = "https://graph.microsoft.com/beta/deviceManagement/managedDevices/$($IntuneDevice.Id)/setDeviceName"
				$Body = @{
					
					"deviceName" = $NewName
					
				}
				$JSON = $Body | ConvertTo-Json
				
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Headers $Header -Method POST -Body $JSON -ContentType "application/Json"
					
				}
				catch
				{
					
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
					$ResponseBody
				}
				
				
			}
			
		}
		elseif (!$Device -and $Bulk -and $Pattern -and $FileName -and !$All -and $Numbers -and $Letters)
		{
			
			
			$Devices = Get-Content $FileName
			$Random = New-RandomComputerName -Length 5
			$NewName = "$Pattern-$Random"
			$DeviceExists = Get-IntuneDevice -Name $NewName
			while ($DeviceExists -ne $Null)
			{
				
				Write-Host "Device already exists with name generated, trying again." -f Yellow
				Write-Host "============" -f white
				$Random = Get-Random -Maximum 9999
				$NewName = "$Pattern-$Random"
				$DeviceExists = Get-IntuneDevice -Name $NewName
				
			}
			
			foreach ($Item in $Devices)
			{
				
				$IntuneDevice = Get-IntuneDevice -Name $Device
				$Uri = "https://graph.microsoft.com/beta/deviceManagement/managedDevices/$($IntuneDevice.Id)/setDeviceName"
				$Body = @{
					
					"deviceName" = $NewName
					
				}
				$JSON = $Body | ConvertTo-Json
				
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Headers $Header -Method POST -Body $JSON -ContentType "application/Json"
					
				}
				catch
				{
					
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
					$ResponseBody
				}
				
				
			}
			
		}
		elseif (!$Device -and !$Bulk -and $Pattern -and $All -and $Numbers -and !$Letters)
		{
			
			$Devices = Get-IntuneDevice -All
			$Random = Get-Random -Maximum 9999
			$NewName = "$Pattern-$Random"
			$DeviceExists = Get-IntuneDevice -Name $NewName
			while ($DeviceExists -ne $Null)
			{
				
				Write-Host "Device already exists with name generated, trying again." -f Yellow
				Write-Host "============" -f white
				$Random = Get-Random -Maximum 9999
				$NewName = "$Pattern-$Random"
				$DeviceExists = Get-IntuneDevice -Name $NewName
				
			}
			
			foreach ($Item in $Devices)
			{
				
				$IntuneDevice = Get-IntuneDevice -Name $Device
				$Uri = "https://graph.microsoft.com/beta/deviceManagement/managedDevices/$($IntuneDevice.Id)/setDeviceName"
				$Body = @{
					
					"deviceName" = $NewName
					
				}
				$JSON = $Body | ConvertTo-Json
				
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Headers $Header -Method POST -Body $JSON -ContentType "application/Json"
					
				}
				catch
				{
					
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
					$ResponseBody
				}
				
				
			}
			
		}
		elseif (!$Device -and !$Bulk -and $Pattern -and $All -and $Numbers -and !$Letters)
		{
			
			$Devices = Get-Content $FileName
			$Random = New-RandomComputerName -Length 5 -Letters
			$NewName = "$Pattern-$Random"
			$DeviceExists = Get-IntuneDevice -Name $NewName
			while ($DeviceExists -ne $Null)
			{
				
				Write-Host "Device already exists with name generated, trying again." -f Yellow
				Write-Host "============" -f white
				$Random = Get-Random -Maximum 9999
				$NewName = "$Pattern-$Random"
				$DeviceExists = Get-IntuneDevice -Name $NewName
				
			}
			
			foreach ($Item in $Devices)
			{
				
				$IntuneDevice = Get-IntuneDevice -Name $Device
				$Uri = "https://graph.microsoft.com/beta/deviceManagement/managedDevices/$($IntuneDevice.Id)/setDeviceName"
				$Body = @{
					
					"deviceName" = $NewName
					
				}
				$JSON = $Body | ConvertTo-Json
				
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Headers $Header -Method POST -Body $JSON -ContentType "application/Json"
					
				}
				catch
				{
					
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
					$ResponseBody
				}
				
				
			}
			
		}
		elseif (!$Device -and !$Bulk -and $Pattern -and $All -and $Numbers -and $Letters)
		{
			
			$Devices = Get-IntuneDevice -All
			$Random = New-RandomComputerName -Length 5
			$NewName = "$Pattern-$Random"
			$DeviceExists = Get-IntuneDevice -Name $NewName
			while ($DeviceExists -ne $Null)
			{
				
				Write-Host "Device already exists with name generated, trying again." -f Yellow
				Write-Host "============" -f white
				$Random = Get-Random -Maximum 9999
				$NewName = "$Pattern-$Random"
				$DeviceExists = Get-IntuneDevice -Name $NewName
				
			}
			
			foreach ($Item in $Devices)
			{
				
				$IntuneDevice = Get-IntuneDevice -Name $Device
				$Uri = "https://graph.microsoft.com/beta/deviceManagement/managedDevices/$($IntuneDevice.Id)/setDeviceName"
				$Body = @{
					
					"deviceName" = $NewName
					
				}
				$JSON = $Body | ConvertTo-Json
				
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Headers $Header -Method POST -Body $JSON -ContentType "application/Json"
					
				}
				catch
				{
					
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
					$ResponseBody
				}
				
				
			}
			
		}
		
	}
	#########################################
	Start-Transcript -Path "$env:ProgramData\AzureAdministrator\Logs\RenameDevice\RenameDevice_$Timestamp.log"
	$AllDevices = $false
	If ($checkboxAllDevices.Checked -eq $True)
	{
		
		$AllDevices = $True
		
	}
	$DeviceName = $textboxdeviceName.Text
	$NewName = $textboxNewName.Text
	$Selected = $listboxDevices.SelectedItem
	If ($AllDevices -eq $False)
	{
		
		If ($DeviceName -ne '')
		{
			
			Try
			{
				
				Rename-IntuneDevice -Device $DeviceName -Rename $NewName
				
			}
			Catch
			{
				
				[System.Windows.Forms.MessageBox]::show("Error renaming device.`r`nError Message: $($_.Exception).`r`nFor more info, see logs.", 'Error', 'OK', 'Error')
				
			}
			
			
		}
		else
		{
			
			Try
			{
				
				Rename-IntuneDevice -Device $Selected -Rename $NewName
				
			}
			Catch
			{
				
				[System.Windows.Forms.MessageBox]::show("Error renaming device.`r`nError Message: $($_.Exception).`r`nFor more info, see logs.", 'Error', 'OK', 'Error')
				
			}
			
		}
		
	}
	else
	{
		
		if ([System.Windows.Forms.MessageBox]::Show("Are you sure you want to rename all devices?", "Confirmation", [System.Windows.Forms.MessageBoxButtons]::YesNo, 'Question') -eq "Yes")
		{
			
			$Devices = Get-IntuneDevice -All | select -expand deviceName
			
			foreach ($Item in $Devices)
			{
				
				Try
				{
					
					Rename-IntuneDevice -Device $Item -Rename $NewName
					
				}
				Catch
				{
					
					[System.Windows.Forms.MessageBox]::show("Error renaming device.`r`nError Message: $($_.Exception).`r`nFor more info, see logs.", 'Error', 'OK', 'Error')
					
				}
				
			}
			
		}
		else
		{
			
			[System.Windows.Forms.MessageBox]::show("Rename aborted.", "Action Aborted", 'OK', 'Exclamation')
			
		}
		
	}
	Stop-Transcript
}

$checkboxAllDevices_CheckedChanged={
	#TODO: Place custom script here
	If ($checkboxAllDevices.Checked -eq $True)
	{
		
		$listboxDevices.Enabled = $false
		$textboxdeviceName.Enabled = $false
		
	}
	else
	{
		
		$listboxDevices.Enabled = $True
		$textboxdeviceName.Enabled = $True
		
	}
}

$listboxDevices_SelectedIndexChanged={
	#TODO: Place custom script here
	If (($listboxDevices.SelectedItem -ne '') -or ($textboxdeviceName.Text.Trim() -ne ''))
	{
		
		$buttonRenameDevice.Enabled = $true
		
	}
}

$textboxdeviceName_TextChanged={
	#TODO: Place custom script here
	If (($listboxDevices.SelectedItem -ne '') -or ($textboxdeviceName.Text.Trim() -ne ''))
	{
		
		$buttonRenameDevice.Enabled = $true
		
	}
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>