<File version="3.2">
  <FileID>ff791687-03e6-4051-a4c6-355db38f102e</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAGtfSURBVHhe7d0FfBTnvsZxrK64E/dAQggS3KG4
u7tbgeIOxd0hEJIQd3cXkhDc3SlUTt1Oz33u+04SJN32lDmQ7qTP/3O/t2SzOzPJbmZ+s7vJKcHh
cDgcDofD4XA4HA6Hw+FwOBwOh8PhcDgcDodThHNaePjaa689rFat6sNBAwc+HDJ06MNhw4Y9HDqU
iIioaMnjzzDx3xEjRjw0NjJ6WKZMmYfyOCVclwctzkuakiVLflW+fHl89NFHmDZ9OnyDwnH28l1c
ufUIl288JCIiKlo3P1P+m5lzEsuXr0Dnzp1RpUoVlCpV6rf8QxfnZYwIgIfy4L9p83Zknb2O5FM3
kKK4SURE9LdJOnkDZ649hPOhI+jWrRtee+217/MPXZyXMVWrVnk4efI0ZJ+9geTTN5F44hoREZF+
EBFw7vpnWLFyNWrVqskAeJkzcMCAhx4+wUgRB//kk9eRJL7hRERE+iL51E0cO34W48aNZQC8zBk6
dOjDi9fuIe3sbSUA5EsARERE+uTBFz9g8uTJDICXOfLdlrfvf5kXADq+6URERH+r0zdx57NvMGnS
JAbAyxwZADfvfo6Mc3eQKr7JREREeuXMLdyVATCRAfBSRwmAe58j8/xdpIlvsi4675C/SNfyiIi0
Iv3sbZ2XvyrpZ5/9d1Gv++n6/s51/474HAPgFcxfCQD5gJR3zovTvTwiIn0n92Fp4iQmMOY4drlE
YNvBMGx3frUO+yYiLusSMs7lrzsuF7tdIl/5urcdDMUhnwTEHbuEdLlu8fUHxZ/A7iNFse4wHPJO
QGzmxbzveaH7QSEuZwC8gskLgC9w7MK9Zw7ceeQ3XX7zv/r2R/z0y79f2Odf/4DU02rjgYjo75N1
8b44AJ/AwaOxSMy6gLQTV5Fy/PKrkXsZqblXEBSdhf1ifXLdwQmnxL+jkXjs/Ktdt5Aq1h8ck419
7jHiWHAXoUlnsN89GgmZutZ9pdDHgrj9cwqu9+Tj/H8/e93828qvOzQuR1m3fNZYvhz9u/tDXHb3
0TeYyAB4uVMQAPIBJ7/xz5LfdPnN//Hnf0PNfP/jLyIgbv9uuURE+i7n8gN4hh3DEXFWfvLKg7xf
R5O/KfWKpIuTrVRxoJRn49mXHsAnMhuHvOL/dN3yj7bJfbR8BvfPyBM5XbcvkHbmJtLFgX6rWPex
i/fgF5OLg56xYt33/3jdJ59ft/yeye1RDuIvsG7l+qeuY+uBUOXfBct6jrjs7qNvGQAve/5KAPyQ
HwB3HnyJG3ce48uvv1c+/m/z7Q8/PxcAmRfuK880ZOZ/nHH+nniw3Rd3eME674rP51/n4gOlRAtu
+9+J28rb6HrwvCSZBdv75DLxANeH7Tx/H1mXHuZ5bvuISC0ZAF7hWXDzT0bu5fuIy7mC+ONXXxl5
QJVn29sPhSsB4BuVgyM+iTjxB+tOyP9vQGwOnL2jccgn5necvWPg4hePiLSz4vrXntymMHkglgfh
7c7hSgD4x+bisHc8Toj4iMu5rNyuQLyIlCfrFmfuct3OXtHwDk9HYu41xB67BLfARHF5FA77xiE8
5UzebXPEbXRIzL2OzNM3lHUzAIp4ZADcEgEgH3AFxVagoOLk0/lnLt5Brwk70G7oBuzzSMw/xP/5
yABIPysPnHkH9rQT55GUexXp5wsOmteRdOwCUuWBVBz0s87dQPLxy+LBeAVJmafEA+8aMpQgeH67
dLshlnUOyadkkYqA0Hkd9eQ2pJ++gsRjF5F2ToSAjIELt5GSLb+mG0rM6Lrd7+Vv5+k/2k7xfcg/
kMtI+P3nC7nwANnnriA2NRsRiVmITruANPG9PHbxIbLFDuzPlnFM3vbyw7/4/SX6Zzl+5SG8I7Lg
HpCCk1cfIvGE2F+Jg/SrIk+W0k9eww4RADni59Iv+njesw9/sO40sW8Nij+OTxatx+Il67Fk2UYd
NmDBorVYtfGA2DfeVBRejiTfZZ8hD8Ji3VmX7ouoOCECIAEnxLoTxAFfHtjlgTrPNXGgvoVAse75
SzZi9afbsWjxOkz/eDn2uYdhzVYXzJ23Rtkm+blln+5WAiDpxA3xX7mcgpiQQXINyeLyzDM3lXXL
ZwuUE8DC94e4jAHwCqYgAOQDTn7jC8sWD4Zf/v0fzFrlgY0HIrFyRwimLT+KKzc/yz/M//F8+8Mv
4iAvDzTioHb5MdKSI+EVloT4U5+JH677SD+RAQ9nDwRm3hIHosc4fuoEAkIjEZR8GrEx8QhJuYB0
cSDLEkVaeLueo5yFn4a/qw8CU68qZ+VZuq6n2n2xfXeRnJYAT9dwRJ8RB1exjuwrlxHq6wffyBNI
u/joL2ynjJlT8HfzQVDaNR3bKc/kbyH52GnxgyGqWH7+z5Yplpd1QfxQxUThqK8/jnoHwMs/GtGn
RaycvID4DBkDupYhbicuyzh9CfHp55Aqn0H4b9tO9A+Te/Uz5Wn4oyIATl37TDlDTxUH0FclUxzQ
M8SZ+M7DETgu1u0fkwtXvyScFutOFusu/Hfys8S+UZ7lL1+5KX+Pq3seP36MSdOXKMuQB+7Cy5Hk
M73HxNn3DrFueeIQGHcSLj6J4usWASAO+kooiAN1gQxxEuQVlo6Zc1bg9u27ynrSM3IwbvJCfLJg
LT777LFyWXJyJqbPXqkc8OXv8svbygP+k5cARNiknrqFrLO3RPhEKNuhnPwUui/kZfcYAC9/CgIg
98pn4qAmDnTPuvQAx8WDISbtvAgAT+UO/c///R/W7gnH+n0Rysd/Nt/++Itypqws6/IjnDidDa+g
eERl3xQ/XA+RkRYFN08/eMZeEh8/RsaxDBEAMYg6+Rinbn2Fk9ceIUccBI9fE3EgPn/i+hc4ce1z
ZZvytvGhuPxznLjxL1Gq5xHo4Y+g9GviICoCQ65PXl+6KpZzSWzHFbEc8XXmiKjJlteRyxVfozyY
51yWt5FnzY+Qm3+7XHEGkLcesQ1X7iElIwneRyMRe1ZcV5ylH792BeH+gaLUTyH90ufidnL5+bfX
uZ1fim05h8Cj/ghOvy6i6DPxdedvo9wWue6b1xHu5w+/mHPIuval8jTkc9skdgx5yxTE7XNy03BU
bFP06fti+Y+QffYiUs6KbU2Ng5dnPJKufq08jacs41r+usT3I1f8YKfnpMDbLRxxF78S13mIHPH9
ebp8+fXJbRK3Vb7Wp7dVvn8F20BUTMn9j0/kceUZAHkQ1hkAJ28iTRxU5c9LrrJ/+SOPkCkOmr+7
/TOUADh1QwmAE2LdSgD4igC4Ltctr3PrOTIAXHzjsGLVFmV/e/3GbXh5B8PbO0gRIvalP//8Cx49
eoQpM5cry0g7fft3y5EyxLqzxAFaiQ+xLwiKP6k8+yDXLQ/+hYNBLkcGxbqdbpgyYzEuXLyibENi
YjquX7+t/DsmJgmjJ8yDa0A8Us/cRkp+fBR8vU+WJT6Xfe62sm65HTnKPvn5+0Jedu8xA+CljxIA
978UD3bxIBUHwGfJKDghDggTFrti4qIj+EEc0OWcOn8bmw5EKf+Wc+iQM7Kzs5UH2qpVK/Hbb78p
l38nrp8XEXJ5YllXxAEzOAphaZfEAekOEsL94RubDB//LGTduo+kxCQEBKch7eYDcQDLRtwxcTC/
fBMJCVmIT8tEQEgkAqLSkXD6gVjWI5y8egdJqanwDwxHcEoa/N2DEJp5UxysxIHw1CmEhETALygc
IUmnkXnlaxzLzkJc9mUck882XLqKuPhsJJ+TX+ddpOaeF6UrfqhOnEJ4WDh8gyIQlnFVxIQ4KMrv
w/UHSDuWAh+PKMSfFzEi1n/ixjVEBAQhIPaMWP4tJCRmIyH7hPjBi4R/ZP52igOmsp0pYjvFthRs
Z9gxudMQ34P4KGUb/aKOIUn+uuWxZHg4H4aLRwD84kUEiFDJPXcOYWGR8A2MQXjKBWSLA708MMud
yomzOSJKfOCfdAW5IoRO3XwsfphOIsjLA4cPueNohFiu2I6snGyEhIXBLzgGoemXkX3hPML8fXD4
oCvcQ9MQf/KaWHcuYtMv4ZjYYeVevoZ48X1PPH1PRNh1xMfEiO9JGIJis5FyTn5Pnn+sEBU3p288
Vp6GPxqYijPi36nioJd25s5zMs7eVc5o97mFYv7yHVi0atfvLFixE8vW7UdAdJY4w5Vvint+GQWO
nb+vPBW+0yUKp258rpyFu/on46z4mZYH3HRxnWfliKh39U9QnuYXp2Y4dNgTQ0bPxZZ9vli33R19
B07CtWs3cOfOXUwVAZB2Om97Cy9HUk7UxP5np0ukEj4hCadxxCdJWbd81kAepAukC/KArrwn6sJ9
bDvgh2mzliM9PVvZ7//737/Czz8Mk2Ysg1d4mtiHiZMNcWaf93Xm3f7Z5clniXMu3FHWLbdD7m8L
3xfysvuPv2MAvOwpCAD5gJNnf8+SFXry+iNMXe6hPAPwU/6bAY+Jg8Xmg08DIDg4COfPn8cPP/yA
bdu2YuaM6fjppx/x4y//EWeV4s4rWN7Nz5EYLQ6YCeKM+eJVhAXGIybrFMLEQSlJHGRiYmPhH3sB
p+7dQoSvH3yixIH76kX4uxzBEb9YhMfEwdfTA+7hp5Fz95F4wMXCyysYfuJgGxYVAtfD3gjJFjV5
8SxCxcHNQ8RERGwkvH0CEJB8HRkZ4qxYPCCTz4kD54kkuLt4wi/9Lk5duoyImGjxoD+JqNho+ATH
IyI+FTHHbyrPGigH8ZviQZyVHwAXP1eC6dSt63kBEHcOx66eF9vpAhefaITGJcDfT6w/JAfHbj67
nRkIiwzO38474oF9H6kZmYhOToFfgPx8FpJzc+Dr6gZXnwiEZlwRX8slRIWKQIjOQFRMAoIiEhF1
+qFYf/79dP0e0jLT4evlB++gaMSdFQfnSxcQFuCLIy4+8BPf6zQROdmnzyI2OQ3h8dE46hmF2BPn
ERUejCOHPOAdewKpF64iJjQIXsFiJ3X9XyJazsDfzU8E1TWx/BR4+EcjPC4JEamnxX0nvicF6ycq
ps7c+kI5Cz8alCYOhJ8rBzB5AH+WPAjLp8LnLVqH4BBxchMW+zuhodFwc/fDvKWbxUFTvtla/sr1
88uRsi48EAFwC7uOROG0WHdQ/Kn8APiDdYt9k1tgEuYvXINffvkR+/a7Ysio2VizxUUJjv6Dp+DU
qTM4d+48psxcJpYh33ele93Ky4LyLFwchE+J2AlJOgMX37wAUA7a4sxc+bVwQTmAy5cMxG3kv9fv
dMfM2SuQnpGFr7/+Cp9//kgEQCgmiwBw8Y/DsUt5bzCX71mQy8lb1lMyJHIu3FXWLZ/ql8edwveF
vOz+5wyAlz4yAOT/FsDpm18o3+RnnbwuDnLiwTBtRV4A/Pvf/1EO+DmiUp8NgII5eOAAPvvsIbZs
3oSf8wNAvpb1ZJk3vsLx7AR4RWYiKSMN3uEncOzsdcTFRYoH3ElEREcg6NgDnL93E1GBeQfWrGuX
ECTPcFNv4uy9L5CRFgcPzwSkXbuJSHFG6x97Hifu/YhTF47D190XYdk3kJ6djKNukUi49g0u3P8a
6clR8AlLFgV8DgHBSYg7IR54iaHwiwiHV8RpZJzIFT+kMUg4dRnhId5wDTkuzrK/w/nb8nsiHoDK
wf4zZIjl+nhEI+GSCKbrn+P07RuILNhOESpB7t7wS7yMk/e+xfHcLAQEhiL+3C1EPbed4gDv5qME
wClxJp+VkyHOrIPhfkSciQdkIPPuQ8QGhyAw4RJy736D3DMZcD/oAldfsQx/X7h4+CEg5YbYOX2e
/339XGzb58jKFfES6Q83H/F1XHiEjGPJ8PUVX/ONb8XO5EucuXgBkdFR8BJh4uLsg/DT4gf+VBb8
PEV8XRVf6707iAkT35Pw48i88TVOXTuHII9gRGRfR1paJA55RIq4+BLn7/5LfO3yh/Lp44SoODp7
5yvxc3sCHkGpf3gQlk/vH/SKxlJxFv7bb7/ixx+//51ff/kZl8RJxoSpi8WB8L8EwNmbSgCcvf0l
gkS8uwYk45z4+ZZn6fLs/Vly3TIAPpm/Co8fi7NmsQ/w9QuGj0+gIiQ0Cjdv3kBOTi6mzFiqrEO+
DFF4OVKWOJgrT8O7iPgQX2tocl4AKOsWB2l5lp6eTz5NL3+jK/XkDaza5IwZs5bi5MnT+O7br+Es
TiiixYnKt+Lf4eExGDtxHpy9xJm9uL58U7lczrPLkuTnCgJAPmMsjzuF7wt5GQPgFUxBAJwRBwn5
TX6WfFZAhoEMgD4Td2KHSyzuPvwKExYewU7XuPzDft6cO3cOaamp+O6773D79i1Mmjge3/zws1iO
OFsuWOYNeSA6Cb/ABEREBMI//YY4kNxHWlYSPHyjRS3HIeHi1zh394YSAIHiwJp9/RJCPIIQmXsf
p+88Vg7Cvl7xSL10HZERcQhNvYrT974R23kRIV6BygErPTMZnp5JSBNf09m73yP7WBKCohKQfOkh
4sIiEZ6eheCwNCTmnEJESCwi0pLhH5aDHHHAP37hBpJTk+Hn542A5CvIufaV8n04desxjuVmI8g/
ComX/yW+X//C2etinb4hCEm7guM3LiD4qNjOkw9xRhy4j58Q1w0MQdwpsZ2RcQhLu/Z0O8XXE5Ej
/+cts+Avvu6oE+cQHRkptiEdGbfvIkZ+7QkXkHv7X8g9kQYP1xCEHTuD5Jy836I4Jr4OGWbK91TE
yckbX4h1fouzV0WQBHvDM/mcqPEE+PokIfX6dzh3/Yq4PFKESjYSco4jyCdYeaNg5gkRHx7y6/la
CYDYsBARALnIuvUdztw4h2CPQITn3BEBJH54s08iLMQXnmEpSL7wlfL06JP7lagYOidiV74bXgkA
cSBUzmALHbzke5Pkr9l9Mm8lrl27inNnz/7O5cuXERsbr5wRy99qkr8xVHg5UtbFB+KE6CZ2iwA4
J+IjOPG08iuI5259IQ7C4sAtD97PkO8rchcBMHvucly7ehVXrlzGrVs3lIN+gWtXryA5KUWsWwSA
uE3BMxCFyXVnn7+txId85iMs+awSAPIkSPl1bbHdz5LrDojJwpTpi5CRkYmHD+7hyBEvTJy+FFNn
LUNCQjLui32Kr2+g+HiF8vXJg3vh5UjyPUYFASDfjC73t4Xvi1NiH8cAeAUzbKgIgAfiQHk7/0D3
DHnwl2Ewb4Mf+k7eiXnrfHDt9iN0G7MVu9zi8w/9eSMP/AUjXwO6eOG88h4AGQBPlymXdxexIfK1
ZzeE5j4QB/UvkXMqDW47D+Jo8DFkiQOZEgABgcqZdfYNEQBHA8SBSATA3c+RKQ7mPh5xSBVn5Ekx
gfAKTBUx8CWyM2PhJuozNPcOss8cg5+7PyJyH+H01WuIDo8QJX8KOfe+w/G0aHh7H4V71EUcv3wX
aTG+8AiORWDGHeWHXHnAXb6DpGh/eESKs+HLMo6+EGfRX+HE+YsI9j0K39izyL35JTLTYuHuG474
0w/FGcJ5BLodhVfcRRE1t5GcGAPvgEwcu/cQidFyO9PEdn6BrMwYsZ1eCBMBkJ4aA1f/TBy/dQ+J
MWHwDExH5t37iA0ScRR9Eseuiyi7eEJ8LSJGUq+LM++CH4j876fYhtOnzyL+xDUck29iFBEWIs7w
AzIuix/KRPh4xyJBxMq588fFGUGY8uzICRlg7gGIPC1+6E9mwtc9FDHnHuPMnUdITQiFT0gKUi58
iRO5SXA74o2QnLvK/aY8W5GZBL+gMEScEDtHsWN4er8SFT8X7n2tvA7vGZSG82I/pfyqrzhgPUu+
Dyc64zzmL92MSVMXigPiYh0WKf/ddsBHOdjJ31oqvBxJvhE5++xtJQDkM20hiWeUNyBeEDFQ8Hr7
s3LEumMyL2LB8q1/vO5pYt3Clr2eykFeiYxCy1GWJV9rFwdhuW55LAhPOaf8BsJFsR1ye5VAkG/O
E+SbD+WbtuOzL2PJym2Y8fFSTBbrl+/294s+hr1in1Kw7plzlmPjLnflNvKN11lyGeLfBduivNlY
fB25l+5jl0uU+PdnynGn8H1xWuzrHnz+PQPgZU9BAJy78y/lG1+Y3Pk/+uo7fPX19/ju+5+UA3yi
eNDpegmg8Hz/07/F2WleSBQ4I85qszNicdQ3HskXH4kz9G9w6oI4yPt7wz/lutgO+QyAOBsNj0Ro
8iUcv3kNEX4RiBZn1vIlgKzjGQgUVZx683ucv3AaIYE+OOTqCe+oWPh5hYvriVC4/RkyM+Jx1M0T
ruJzPhFZSL8mztjF13jm0ikE+gQiNPuu2JYvkJ2VAG9R8ElXvsVFEQsxUcFwcfeCm1soIk/cxEnx
w3BG2XYRSXfE+nMz4X/UFa4ennA5GoqIrOsiYr4WZ8zyGQA/eAUEwc3DXQmD6FPiNmIncvb8qWe2
Mw7+XhGIPXUfuRcvINTnKFy9AuDhHYKQuBwcu/0DstLj4HXUBa7hJ3H8unynfwo8xNfi5n4ULj6R
iBRn5efFTuH0za9EeFxFZEgw3F2P4oiHOPuPPo2Tt77BCRkDPs5w9k1AonzNLikKHu5u4oc6HH7i
+xl3XvxgXb6OSP/DOCi2JzL3IS5eOouQILGdYl3uIWHw9QxH3Kk7yBLR5e7pJb6XfiJMcpEl7sOz
z9ynRMXRxfvfKK/Dewan5x+E5cHzefJpe/lf+ettEannEJl2XqfoDPl37uVZvvx1698vR5K/BSSf
ht/jGq3ER2jSWRwNSP3DdRf4b+uOyriQv27dt5eU34KSASDWLY8FEannxb4iGZdEAMgDt/z8U+KM
XcaKIH8DQi5fRlBS7nXlGREZOTIOosXl8o8CKa/x519fuX2h5cmYOCECYPeRaOWlRXnSWfi+OCNO
wPICYCID4GVOXgB8JYpTHMTka8WFyAPfr3kv/eP//u//cPXWI7gGpP+lXwP8/ud/i7PUvGcRnhIH
VHGmnfdswLPreays62zBx/nhoJx95xegct2b4t/yY7Ec+TrZaXFmeuLqg7zQKLieOGifFbeTf0BD
/iELZV3yQK4sO395+euRB3f5er7cLnkb+fq2vM0J8aBUriPWkXc7+e+8dcrfjZXrlL+6J28nn647
LQNAealCPmWe95pV3nb82XaKy5X1faZcv+CBrnx/5Dryl39Wnm0r65Q+e/5792QZ8jcOxOfk9zD/
a827/JFy2Rnx/VW+H2LblKLOv/3pG3nrP3VD3u7pdp6Q2yPf5yBum3fZ03XL6z1ZP1ExdenBt0oA
eIVm4PL9b8XZqzhAy4N0IfKNgHm/Yvvln5Kv2eu6fYGTYhm5F+6JAIhR4kM+DX80MO2/r1v5VWLd
6yxw/MrnOm9fQL6X6OTlB0p8yGNBhAgHN/8UXHnwjTig563nd+RvIYltPnXjK+XlXflrwvJsXr48
cFL8W1528vpXyvbJuJHXV/4ryOvJj+W/c8X1T4t9i1y33OcV7L+edVacdDz4ggHw0qcgAC7c+0b5
xhcmD0DyDwHJ+ea7H7FqRzA+WeuD4Nhc5bI/m59+/U050PxuuaIwZWWee3KZ/Fic+YsDacF1lM8L
eZ+T8j/33G3lv+UzBvK24t+iVp+7nrw8/3MFy/3duv5oecrtCm7zjGeXm38defszN88jyNUfESc/
E2f93ypP4T29/TPLVW5f8LnCy8rfzoJ1FP74yfUKlpu/jOe2ueBrzbvNk+14dhny3/m3l7eVP/BP
tufJdsr/6r7t03UTFV+XH36H4ITT8AxKx63Pf8QlcSB+la4+/F4JAHkWLuNDPg3vHpCKm49/0Hn9
l+mq+Frl/+aAPAuXx4LItAvKMwA3H32Pi2J/luebZ4iPRaRcKrhcLKPgst9d73e3fUre/sqD75QA
kC8/yJc3de1j5P6IAfAKZqgIgDsiAOQdqBwYChMHhS+/+xnf/vjrE/Ld/dKzl+ny+Tc/iztPxzKL
GeUAevsm4qPSkHxevnnoG5zXcT0i0g55EE4+cRPu/qmITjmLpCz5p8AvvxJJWeK/mZfgH5EN38gc
XBYHxdRTt8VZeCqiks+80nXnuYSAqBx4h2crxwL5WwdFt+7LCJTrDstSnjHNOyF5/r44L/apD7/4
ARMnMABe6hQEwKX734mDljgbLOSCcPa2JKtM3jF5nl72Z+Tt5cHw98stbi7cESX9QNSyeKDK75mu
6xCRdlwQP8vy7DXp+A24+qfhiDggyv++Kkf8UpX32Jy+8aVYt9if3PsOybk34RpQBOsWy/eNPI5T
178Q+zC57m+ReuIW3ALSi2TdPhFi3dc+V77nuu+LbxkAr2IKAuDyw++Vp36IiOgpuW+89vjHInH1
0Q/KGbh+rPs7ndd7Fa4++vG5dRd2UZygygCYwAB4uVMQAFceijv/yes14o4QJXbjy39D/BPin0RE
RK+UPN7c+uo35fijHPjzj0fy2dWHXzIAXvoMHTJUZwDc/OLf2LzbBcNGT8L4KR8TERG9UsPHTsGq
jTtx7fEvysvSvw+ACQyAlzl/FADi/zBcHPw/eL8catY0IiIieqXKlquAbr3649ZX/2EAFMX8UQDI
p2Nkkck7xdrGjoiI6JUyMDRB/yGjcPPL3xgARTEMACIi0gcMgCIeBgAREekDBkARDwOAiIj0AQOg
iIcBQERE+oABUMTDACAiIn3AACjiYQAQEZE+YAAU8TAAiIhIHzAAinj0OQCsrOvA6rnLxMfismev
89+puc2fyVveU08/p3z83HWJXoQtTI0tYGJRWzyO7GFjawdLSysYG1vC/JnH2Z+xsa0DC3NLGJtY
w1IsQ9d1XvhnwtoWZqbmYudsJpjDVG6f2Dbrv/B4588EvQgGQBGP/gaA3JFZw9xS7gzzLrOSOyIz
G1j+xZ2htbIDtYGZua3YGer4vCR2UJZWf30nZWUllmdmJZZpA3Nz+V+xbLk91rVhYZH/bx23I/oz
8rFtYd4V0zdtwdwh7WFvZQkTEwe06DYTa7YvRt/6VjC10n3bp2xhYtQYPSeuwJoVE9DW1kLnbZTH
sHj8/qXHqoUFatZtj+HLDiM2OgaRMYcxt89HsDMSoSJ/PsXPjs7bKeqInxH5M/wyA5yKMwZAEY9+
BoDYQZl0wawd+7ByYnfUt7IQZzR10azTx9jssh7DGovP/+mOR7KFsaETekxYi23b56BzHXHm8l93
oH9G7FyNHdGm7xK4pSQiPiYG8cnpcF81Gq3sjWDWchp2HHXGJz2bwMaKIUAvxsraWpxlD8XOlBS4
fNILjpamMDBwRKcROxGZ7YkpTcxhaF5bBK0IBcHcwgYWz/wMWIkANbcwR/UqzTBmXSAigz9F79rG
MBKBaiGum3d9G5ga10XLHp9gy8FV6OdgDmMLO9iIA7VcrryO+bMRa2UNI8sW6LtsL3w8d2Nev0EY
PHsLlk/pg9aO3fHJ/r2Y07sJrMVB3lKGtIjtJ8sQtzU1Fj/DO/di6eiOsDO3ELEgIlmsp2D5VuLn
xCI/8OW/824rwkQGuXLd2k++PvpnYAAU8ehnAFjDxLAfNsYkw23ZIDhZmogHhoM4+G5E6HE/zGpl
BSMzcWaRv8MwlWfkytOmebeXOxMzMzNUrdwIgxd7ISpqCwbYm8DQLO/sPe/6cmdoh6YffYLdPlsx
rEHeDlbuDC0sxM5LuZ7YaT55qtQGhrUaoffUQ4g/7o+l/dqi1fgtCMoIx87RnWFv0QgtO36EZo4O
eTszeeZTsJyCZwnkcuSO2vzpNpjLM7En25x/udwpih3gcztjKtbyAmAQNkVFY++sHqhnaQZDQ0d0
HLoZAUmHMcHJEma29VC7Tj3UreeERk5N4GBnl3fgFY8pS2sH1GvUCHUsOmL8Gg/4eS1HD1tjmNVp
hAaNmonrNxbXrw1jYyf0nnwAMTm+mNPeAda17cXjrA5qOzihYWNxvYYNYCsf8/JxJ87+a9TriU9c
IxG7ayKsPqiICoZ1UdehPho2nQ63nDQcmN4dTvbigG3rAIcGzeDUuCkaOjqKCJaP65HYLSLZY8UI
tKortlFcx66uI2rbyq/XHrZ2jrC3dxDXFQd6uwaor2xnU9Szr/v0czq+V1R8MQCKePQ2AIz64NOQ
aDgvHIBG4mzI0MgBrXt/Cr/Uo5ja3BZW9o1Qr35jNGrcCm3bd0TT+vWUsyALeVZh2xBN27RHk3rd
MH7pEfgHrkefOkawqNcCLdt2Qrt27dGsgQNMTZug94S9iD0ZhhV9W6BevbowMa+Dug1boU0Hcb02
zVFXbI+VcqZlAyMDGQD7EBC2Gb2M30WZSl2xJjgBXqtHobE4w7Gu2wB1xA61dp0GqCd2ZA2cWqO9
2LYWTo3ETk/upEUYWDqgYfP2aNu2A5o3dIJj48awtxE7wDoN0bhVR7QX623ZROzIxbIaNhKfE8tT
dsa/+x5RcfLnAbAfw8RjetDi/Tjk5Y4jh7yRePwMEvbPQrsGtiJcm6CLeFwm5mYg1jMQoZFh8HJZ
gs7m1dB28mZ4RKQjJT4BEbs/EY+vWTiceRbX7tzApZgjmDewJao7DsMq5yAkpiQgOsFVhEEL1FZe
IhCPeePGSvQmpftg+fhucKhjCUODTphzMAbnHtzFtZxEeCwZAPvmXbHoUALi4lNxPOoQZvQbhpEr
PHFcXOfqqQyEbZiKNl3mYV+oM6a1tkaN6s0wbIkzjhyYg3ZWDTFu/VFEpmUjNS4Sqyd0Qk/xuWjn
eWgmn8F4EuFU3DEAini0FwBHMKZuI/T75AC8owLh4eyJuJyLOCbOeHo1t4ORWRN0m+mM5NxUxPmF
IDwqEv7en6KHRVW0GLMah4OSEB+dhCT3lejWcRr2JOTiyt2buBjnjiXD2qFWw+FY6RyIhIRoRCR5
Y1mv9rAXZ/MW+QHQY9JehKd7YVG/dmg+eAH2uu7B7L5tYGM5AjvjArGsd2u06bwQLsdEGBz2QmLO
eZyMO4xZPRvCoGZtNOi3Bv6JyUiNj0WouzcC4w9htFM9dBm/Fv4px5AkeKwchtZjlyMq8jAmtWsC
CzMbvpGqmMsLgMHYHB3zXAB0GLwJ/skHMMymEYauDsPle3FYPawTHFpPg2tCPLaP/ggtOiyCd1o0
Ph1aD3Xbj8a22HNIO7IIXWxqoqZda3TtO0L8LO9CRE4oFnZpgx5jtyM4xR0z29YWP1cfYcbecEQF
bsOs4YMwYmMgYrdPEvFcJ++1exGtpsaO6DZhFXxybiDFfTWGtbVF7XqTcDA1DrumdIOTnS1MrOqi
QbveGDBgNrb7xSPIeTY62PbGuqh4uCwZgmYiYht3Wgn/rAB80s4KVas0Fwd9f4R4zEf7rtPgG+iL
NZO7w1Z8H0zqNEbnefsQtGsWmlgwAP5JGABFPPobAH2xLjQGh54JgFY918A3zRVjZQDM88X5u/FY
M6QtzOoOxo7IJByc0Qut2syFd3oMVg2oA4tGfbAy6BSyfNegd+2aqGLdHJ37jcTEKTsRfiIWa8SB
u33vNSIqPDC9pTmq1WqPqTvCkRjjjIVjhmLkphCkOM9B20Z2MLWwFgHQAF1H70bK7XNIT87F9dwg
LBzaGjWrmcHGfiKc06Owpl8btOq2FinXMnFoentUcBiCjZEJCF4zCg0M+mJzZKrYIfaAo30DDNkY
i1MZ7hjVtRfm7YtAzK7JsDM3Rk0DM1j0nI/DB9ZgSEsnWIqzIAZA8ZYXAP2xPjwC2yd3Rl0LU7Ez
rI/2IzYjOGkvBps6YeQGH/i5LsBHFrVQw9AW43Yl4vCSQegp4jHAYzFayJe9KjXGsGXu8Pdahq7W
lqg3cQN8g2KREpeEzNxILG7fBO0GrIdfwkGMcaiB8rb9scY3BWdPpiMqKBzR0dEI3jIF9evaKwFg
I5+1MrOEiZkVjB16Yv6RdKS6zUHnRkOxOSYCG4e3gJWROSxaDcLs/SHICI9C6pmTCN0xHa1EXCwP
icLe2d1Qp5YlGnVcAZ90b8xuY4VqlZti1CoP+B1dgI4Nu2H+3gCEuq3F+KF90bJBHViamsHA2JqP
+38YBkARj/4GQA+sCAjH7lm9UF8cFA2M66FF/7UISj2EkZZOGCx2cr5Hl6KLpdgZip3L8C1xcF09
Aj1Gr4C/51K0trRGtYr10XfWQfgHrUUvWxs0mroRPoFRiBM7pZTcOKzq3hJteqyET7I7JjsZooJN
Lyxyi8Pp48kI9gpAUHAwvNdPhpNjXbEzlAHQCL2m7ENgxCb0tGuMsft94LF6EpoaGYuzlgk4kBKO
VSIq2vVcBd8kV0xqbIRKlVpi8rZA+B6YgbatJ8DFbwdGtWsMg8rWaNRuITzEmdjElk3RZfJW+Ae4
YMPSj9GvU0s4WBiicjUTmMizMPkrVzq/T1RsyPeGmDXGx+6x8Fk3EQ0NqqCcCM5Rm8OQ5L8ADco2
xugNQYgJWI5OFhXxXq3OWBeegn3T+6DToHUIi9qFXrWr4MMaLTFtbyxiXOeiTdtJcE0KwIpuTjAw
6YNtEYFY3KkVOg3disDEPRhsXQHvGYqz9NB4hGwah7oVK+LDitVRuaY55HtPbOR7CxyboGHzVqhv
XANl36+EBpMPIjPyoIjWmdgWF4pP+zmgsmFDDFrniyTP2bB5zRx9Vh2B195P0M60Oz6NjMauae1g
WtkIDToshm96MGa3qII3KzXF+O3hiPVYhm5W1VC2QmVY9ZoHt7jzCF3TG03bd0Pvru1gL87+GQH/
HAyAIh79DIDaMBUH/EkHIhGybz5amYodRA17DNsQjtTAxWhQoRGGLPVFQtRm9KlTCW9V+whrwpLh
PLs/2vdYjpCEIxjesDrK1myKSbvikeS9GO3bjoNLYhDW9nFCxUpdsDE8FKv7tEOH3usQkHIYI+0q
4t0aXbDUMxbRB6bDsfwHeOO9CviwigksrOTvV+e9BCADICh6F4bYVkKt5rNx0MsV8wc3gaXlSOx9
NgCS3TClmSmqVG2DqTsC4SMCoI3jCByMDMGKoU6oXskYbSYfQVKGLz5uaYEq5T/Eh5atMP3wSeT6
rMSAPp0xcMgAtKnvqLwhUPf3iYoNccCVv7/ffsxmxBzPhOuWDVi7eSci4yKxZmgrVBRnzGNW+yPz
bAwOrFuKJeLgGRexHsMb1YNt/TFYH52N1KMrsHjFboSdvIIMj4Vo36I/tovg9XfeidWbPJByJhmr
OzdCi97z4XviJELWTkH3pm3RfrIzkrOjcGT3WixZuhKLxvdB3Tp2sBTbY+TwEQZ+vA2uu1ZiwaLN
CAiLwZENk9DEoTNWRWYj0W0zpg/ri57zDiAl0Q+rF2yEZ1ouYpzno71pA3zsnYKkIBesHtUZ9s0G
YJF3OpLcVmDesl0IOH4RmR6L0Ulsw/AZy7B61Qps9w/BrhmjMXhrJC6Er0ErM74E8E/CACji0c8A
kDtDczTvuwSBWccR7HoIe/c7IzY+DCsGtUblqo0xZMFRpF1Igeeuzdh0OAHxYeswsqkDLG37Y0FA
FnLDd2PzZmeEZZ9DZtAadG7SBas9IhDpfxQ7d3sh+VwGNvZthiYdJ8FN7IiS9i/B8A5t4TRwEyIz
kxDqsw+bt+zElrnD0cDBXkSANQxrOaHvTFfEpjtjlKMRqlZ2xKDNgUgK3YbRbWficFY8NgwQUdFn
A8Jz/TCzuQkqV2mHWc7RiDg6Hx1E1PTZEovsJE8479qBw74JSEs9iokdm6PzxNXYs2UTdgYEw2PN
THSeshvHc/zx8UfNYGHKp0L/EcSBToZvj6krsf2ACw4f2Imlk3rCxsgUtWq0wvh1bvCP8cHedVtx
4MA+zO7XFLWtzGBoZQ/H3h9j54Ej2L1yFeZ/PBVjJwxAExMrtB42Dxv2Hcb+TYswc+4c9HaqDVvH
5hi28ACO7FyDcT2dUMGoGQbOWIM9hw7Def8BbP9kGBzs5GPeFmbGDmjRZTLWHHaBs/NhHFgxCS3r
10FNEwt0GLUMW3ftw5oJPWHfsCsmrTuAQ7s2YNWqhRg9oA+crAzRpP9sfLr9EHbOGwxbOwexnbOw
Y/9hHFq/AauXL8DoUT3RsGUffLx6D1xdDmHHxhnoYO+Epn2nYP7k/nC0lG+eZQD8UzAAinj0NQDk
HxExNbRDu6GzsHzDNmzZtBZzxnSFjbEZDGo0x/Alh+Af64nNC5Zhw6ZNmNyrmdgZmsNYnC3X7jAG
y9dtw9oFCzFt3EgMHtUXjU0t0bjHBCwQO89Ny2aKr20yujeuC5u6DdBz0qfYsmYxxvRojMqGDdB5
+Bx8ukVcb+NmfDpjsPJ6qNwZmpvXQ5MOQzFm4mC0qiN/BdECNi37Y+rMyejZsicGTRyPns0aoUGT
Phg1ZSQ61LOGsUkjdBg4HqOGdEMDKxPUbNQL0xZ+ik9XbcAKcbYWEL8XQxs1w0djF2Pblu1infMx
qE1jWDfshQkTh6NdA0dY8feh/0Fqw8TQGNWrG6BadSPUNLKCpY21eMy3woTNfvB3mYtWBhVQtooB
apnI94bY5/3qqqmpuL4BqhuYoJaBfM+MFSxs7cQB3BQ15LJqmsBAXG5iJX+rxRZGtQxQtYYJjM1F
ENjYwFisU96+Wg1D1DC0QsFfuMz7y4LmqKlsj1DLDGbyvQHKssV2iuvXlK/VW1rBoKa8vbHYZ5jA
UMSHpU1dWJiI9dcQ2yWWKQMnbzsNxXKMUaOWuJ6xuJ6liGsDEdTi8uo1xfLFz7CFqVn+1174+0PF
GQOgiEd/A0CqDVMjE2UHUq2G2BkaWio7Q0MRACNXeiHIayk6GFZAOWVnKH/vOG9nKN9AJHdM1cUO
ppahOEMyslR2huYmZnnLqin/yIrYGYodmfzVQWMDQ2VnaGQmd4byr6mZiB2wuL1chlxnoZ2hgYEF
zK3ln2q1h5W5hdjhmsFU7ACNxH9N5BmLpfxVKXOYKdepLXaUYhvkjk5c39LYCBXLlceH1awxcmcS
joWvx0em4rZGcgcsdozV8/54i5VYRi1DsYz/+gePqPizRq3qrTF5ezDCvJehm60xjC11XY9I2xgA
RTz6HQC65AfAKm+E+K9Br9riLEYDO0PlL7WZN8Wo1YcQEBWH+KQ4HMsOxZIu8lcIn/4RI6LfE+Fp
4Ygm7Xqga+e2qCcilX8gioojBkARj/YCQP7JUQfUbyr/mE5LONjI1wh1XU/fyD9vWg/NOvXFgCEj
MWTIEPTs3Ap15P9oC3fm9F/IZ5/MzeSfxM77H/nhX8ij4ogBUMSjvQDIfyrewgom8n8Y6A//F8/0
kdyJW8LISL4sYQ4jEytY6LweEdE/DwOgiEeLAUBERMUPA6CIhwFARET6gAFQxMMAICIifcAAKOLR
1wCQv2JnYmohHhCmMCTSQ8pj08gMVir/UI18jMv/OWu509O1fCJ9Jh//xiYWOh/bajEAinj0NQAs
LG3Rq/cAjBg1HoOHjiLSO0OGjcbwEWNh79AAlir+XLO5hTVat+mA0WMm6Vw+kT4bMXI8evcdqOyr
dT2+1WAAFPHoawAYGZtjw8btuH33Ab797kf88OMvRHrl4WefIyomEQ2dmsHc3Frn4/jPyJ3dSBG4
5y9ewxdffq1zHUSvyqPHX+L2nfu4I/ax6jzE1u17YGJqqfpZsMIYAEU8+hoA8qmlVas34Nd//4Y1
a1ZjypTJRHrl1q1bSE7JhGODxqoCwNDIFAMGj8DX33yHoMAAnesgelUyMzMg57fffsN//vPXyevL
+c///R/Wrt/CANDy6HMArP50I3744SdUq1YNYlOJ9EpcXBwyj+X+TwEwUATAjz/9irFjx+hcB9Gr
smXLFuVA/tVXX+Ff//rXXyav/8MP3+Onn39hAGh9tBAANjY2hR68JVGydGmUKV0KJZ+7vCiUROky
ZVCmTOmn6y5ZSrmsdKmSha5LxVlycjIyMo//zwHw/Q8/Y8aM6TrXQfSq7NmzRwkAeVD/+uuv/zJ5
/R9//IEBUBxGGwFgqTxgq1qNwnrnT9CsemU0m7oFu5f0hvnrv39glyz1Gt548w2UKSk/roiWoz7F
xhW9YF7699f968qgmvUYHExNQnxUBGKSsuCzfjAcypVCiUqdsGT/bsxsXRWv67wtFUcMANIyBgBH
UwFgUG8BfDMOYqBhabz5QTmU/+BtvKYc5J/3Yc0R2Oq3Dl2ryI8rofsCLwS4jIF1oeu9mDdg3nwl
grNdMdHOEEb1h2NrbAScRzRG2TLv4MPy5fH+m6V13I6KKwYAadmfBcA333yjKHy5xAAoRqOlAKhV
dw7cE3ahX/WSeOPd8qhY8T28Ji5/o1xNWNnXg4O9HUyr1oBTj3UIPxmK5V0sUaOsMTrOPAiXPZPQ
xsQcdevZwaTiW09/EF6vALM6DqjnWA9WtcqhjLjs7SrGMK0h/i3j4o2KMDGphndKvAWzZktwNPJT
tFGeSTDAmN1h8F7TDTVKvIYPKlXCh2+XwWtl3keFWjVQpboJHOo5wMaoMt5+LX9dJV5HJSMb1K1b
FxbVKqGyQRW8L5ZVssx7qGFlD0fH+rA1roR3n1yf9BkDgLTsjwJAHvjlZV988QW+/fbb5z4nMQCK
0WgvALai87vvo+m4/fASZ/VWH1TG4GWH4BsVjSBfHywfPARrgxJx7tY1nA3dhrEtWqDp2F3wiw2E
6859CEw+i3T3GXCs+jpeK10dzaceQGJGKCJjjiE+cDtGOpaHQ5+NCA1chebVy8NgzGYEbBkPq1Jv
w6DBfPhl+WJJj3Zo02kUFm1eiQnNa4ltc8Ly0EAs72qMGtUGY292Co7uO4jwuGwcT/PE7HZVUEpE
QiWnmTgcFYHY8CB4HziKsPTDGGz2Lizbz4BbdBxCIuLhvLA7rMvq/oEl/cIAIC3TFQDy4C8P+hcu
XEB2drbyue+++44BUFxHqwHQbPxBeB8cDlOHHjjgLw6+/U2fPLArmk3FkcT9GFhLflwB7accxakr
HhhVu7w4o6+HJQEx2NTPAgZ1psI3wx9TbOT1yqP1PFeEHp6Ouq+VR9tF67Fp9n64Oc9Eu8pvi8+X
goHjfIRfPY6o0BicOxGKBd1N8tfZGqvDg7GymzGqVR+FwHOp2DvUDCVKmWLI/jBEru2Fym9ZY5Zb
LPbPtMe7JUvAasRhZGS4YVBDC3Rb6Y/k3cNQ5X96jwIVNQYAaVnhAJAHf3mwv3z5MmJiYhAdHY3c
3FzlXf/PRgADoBiNpp8BODwGNh/WQsfJa7Bv/3p8PGEompu8iWoWk+GSeBBDjOUDvTK6zDmMw9sG
wFR54JdG15UR2DWzPmwHLoB/yHK0yP+BqNRsAjbv2oAeNcTHRuMQceNbxH1cC6WVz78J8+ZL4BGx
Eo3ffgt1Zm2H++oxsH5bfq4lVuU/A1DTYCT2xztjqIm8vCzaTDwAr0MjYWHYEiud12Fg7crKul5/
tx92xh/GiNofwKDVJGzcuxVrl83G4DbmKK/jjY2kfxgApGW6ngEoOPinpqYiJycHkZGROH78+HMv
BzAAitFoOgBcp6J+qfwHdNXmWOZ7CkHzmsHCbgaOJOxCzwryc+XQaZY34oPmwF55bb0elodGY21X
CxjVn4uQY24YrFyvFBwmbcLRnTNgW+Z12IxdjgPbIuC/cyBqvyk/XxqmzZbAM3Yrun0oPq7YCkt2
H8GigTXxZglHLA0JehIABxJdMMpS3qYC2k91FgEwAuYf2GOBewjWDjYQl5dA5Y6bEJvhi8m28nrS
22i5JApZgWvQ1bJM/mWkzxgApGXPBoA8+5cH+fj4eCQkJODOnTvKx5mZmQgLC8P169fx/fffMwCK
22gpAAwdFyMoZz96vPcBWk49ilCvSbA1scOguRuwf9t67A/1wYqWVqhUoyU2p15C5qEF6OPohNZT
3JB9IxXuW9djt1syIl1HoeG7b+GNMnUxZGMA4sN3Yu8BL3j5bMP4BjVh3WEJAmO3o7uZFfpt8UHA
qqEwLPkmTJuvEsGwD/2qyh+gt2A7egdi43agv2kvfBoRgbW9TGFgNAEeub6YqLysUBGd53ghzG8a
7Eu8A6sxh5CU6oeju7di70Gx3nRXDHesCMvec7B3+zbs8POAy7IJcKzEANACBgBpWeEAePz4MVJS
UpS/cCkP9vJp/88//1x5NuDKlSsMgOI42ggAa+UB+3ZZKzi1dkC1Mq+homkDNK5viHcqGqJZj2GY
NGEchvZvhprywV2yFMyaDcCYYb3hZGKAcoa10ahjZ/TqPQzjxgxHC9M3n/wQlCxXB92GjcH4iSPR
zclY+T3+KnXbo1NTK7xTpgReM3RCt04NUanEa3invDUat3JADeUZAaGsMZp3aIM6Vc1Qp3Fj2FZ/
F2+/Y4wGbRrB+H15nTdQxbwhmjQyQzl5/TdroEmnQRgzYiQGjlwGz4Rt6FH5Q1Rv1B3jx47DuLG9
0MiwXP5LDqTvGACkZYVfApCv9d+9e/e51/vlQf/hw4f47LPPlEhgABSz0UYAFP5LgNrXZnk4MkKW
o76Oz5E2MABIy3S9B6DwO/4l+dr/s78OyAAoRsMAKCrvo9W4tfCMTEBsbBTSj3lginV1vKHzuqQF
DADSMl0B8FcwAIrRMACKSml8UNkA5tY2sLG2gnHNcsofMdJ9XdICBgBpGQOAwwAgUokBQFrGAOAw
AIhUYgCQljEAOAwAIpUYAKRlDAAOA4BIJQYAaRkDgMMAIFKJAUBaxgDgMACIVGIAkJYxADgMACKV
GACkZQwADgOASCUGAGkZA4DDACBSiQFAWsYA4DAAiFRiAJCWMQA4DAAilRgApGUMAA4DgEglBgBp
GQOAwwAgUokBQFrGAOAwAIhUYgCQljEAOAwAIpUYAKRlDAAOA4BIJQYAaRkDgMMAIFKJAUBaxgDg
MACIVGIAkJYxADgMACKVGACkZQwADgOASCUGAGkZA4DDACBSiQFAWsYA4DAAiFRiAJCWMQA4DAAi
lRgApGUMAA4DgEglBgBpGQOAwwAgUokBQFrGAOAwAIhUYgCQljEAOAwAIpUYAKRlDAAOA4BIJQYA
aRkDgMMAIFKJAUBaxgDgMACIVGIAkJYxADgMACKVGACkZQwADgOASCUGAGkZA4DDACBSiQFAWsYA
4DAAiFRiAJCWMQA4DAAilRgApGUMAA4DgEglBgBpGQOAwwAgUokBQFrGAOAwAIhUYgCQljEAOAwA
IpUYAKRlDAAOA4BIJQYAaRkDgMMAIFKJAUBaxgDgMACIVGIAkJYxADgMACKVGACkZQwADgOASCUG
AGkZA4DDACBSiQFAWsYA4DAAiFRiAJCWMQA4DAAilRgApGUMAA4DgEglBgBpGQOAwwAgUokBQFrG
AOAwAIhUYgCQljEAOAwAIpUYAKRlDAAOA4BIJQYAaRkDgMMAIFKJAUBaxgDgMACIVGIAkJYxADgM
ACKVGACkZQwADgOASCUGAGkZA4DDACBSiQFAWsYA4DAAiFRiAJCWMQA4DAAilRgApGUMAA4DgEgl
BgBpGQOAwwAgUokBQFrGAOAwAIhUYgCQljEAOAwAIpUYAKRlDAAOA4BIJQYAaRkDgMMAIFKJAUBa
xgDgMACIVGIAkJYxADgMACKVGACkZQwADgOASCUGAGkZA4DDACBSiQFAWsYA4DAAiFRiAJCWMQA4
DAAilRgApGUMAA4DgEglBgBpGQOAwwAgUokBQFrGAOAwAIhUYgCQljEAOAwAIpUYAKRlDAAOA4BI
JQYAaRkDgMMAIFKJAUBaxgDgMACIVGIAkJYxADgMACKVGACkZQwADgOASCUGAGkZA4DDACBSiQFA
WsYA4DAAiFRiAJCWMQA4DAAilRgApGUMAA4DgEglBgBpGQOAwwAgUokBQFrGAOAwAIhUYgCQljEA
OAwAIpUYAKRlDAAOA4BIJQYAaRkDgMMAIFKJAUBaxgDgMACIVGIAkJYxADgMACKVGACkZQwADgOA
SCUGAGkZA4DDACBSiQFAWsYA4DAAiFRiAJCWMQA4DAAilRgApGUMAA4DgEglBgBpGQOAwwAgUokB
QFrGAOAwAIhUYgCQljEAOAwAIpUYAKRlDAAOA4BIJQYAaRkDgMMAIFKJAUBaxgDgMACIVGIAkJYx
ADgMACKVGACkZQwADgOASCUGAGkZA4DDACBSiQFAWsYA4DAAiFRiAJCWMQA4DAAilRgApGUMAA4D
gEglBgBpGQOAwwAgUokBQFrGAOAwAIhUYgCQljEAOAwAIpUYAKRlDAAOA4BIJQYAaRkDgMMAIFKJ
AUBaxgDgMACIVGIAkJYxADgMACKVGACkZQwADgOASCUGAGkZA4DDACBSiQFAWsYA4DAAiFRiAJCW
MQA4DAAilRgApGUMAA4DgEglBgBpGQOAwwAgUokBQFrGAOAwAIhUYgCQljEAOAwAIpUYAKRlDAAO
A4BIJQYAaRkDgMMAIFKJAUBaxgDgMACIVGIAkJYxADgMACKVGACkZQwADgOASCUGAGkZA4DDACBS
iQFAWsYA4DAAiFRiAJCWMQA4DAAilRgApGUMAA4DgEglBgBpGQOAwwAgUokBQFrGAOAwAIhUYgCQ
ljEAOAwAIpUYAKRlDAAOA4BIJQYAaRkDgMMAIFKJAUBaxgDgMACIVGIAkJYxADgMACKVGACkZQwA
DgOASCUGAGkZA4DDACBSiQFAWsYA4DAAiFRiAJCWMQA4DAAilRgApGUMAA4DgEglBgBpGQOAwwAg
UokBQFrGAOAwAIhUYgCQljEAOAwAIpUYAKRlDAAOA4BIJQYAaRkDgMMAIFKJAUBaxgDgMACIVGIA
kJYxADgMACKVGACkZQwADgOASCUGAGkZA4DDACBSiQFAWsYA4DAAiFRiAJCWMQA4DAAilRgApGUM
AA4DgEglBgBpGQOAwwAgUokBQFrGAOAwAIhUYgCQljEAOAwAIpUYAKRlDAAOA4BIJQYAaRkDgMMA
IFKJAUBaxgDgMACIVGIAkJYxADgMACKVGACkZQwADgOASCUGAGkZA4DDACBSiQFAWsYA4DAAiFRi
AJCWMQA4DAAilRgApGUMAA4DgEglBgBpGQOAwwAgUokBQFrGAOAwAIhUYgCQljEAOAwAIpUYAKRl
DAAOA4BIJQYAaRkDgMMAIFKJAUBaxgDgMACIVGIAkJYxADgMACKVGACkZQwADgOASCUGAGkZA4DD
ACBSiQFAWsYA4DAAiFRiAJCWMQA4DAAilRgApGUMAA4DgEglBgBpGQOAwwAgUokBQFrGAOAwAIhU
YgCQljEAOAwAIpUYAKRlDAAOA4BIJQYAaRkDgMMAIFKJAUBaxgDgMACIVGIAkJYxADgMACKVGACk
ZQwADgOASCUGAGkZA4DDACBSiQFAWsYA4DAAiFRiAJCWMQA4DAAilRgApGUMAA4DgEglBgBpGQOA
wwAgUokBQFrGAOAwAIhUYgCQljEAOAwAIpUYAKRlDAAOA4BIJQYAaRkDgMMAIFKJAUBaxgDgMACI
VGIAkJYxADgMACKVGACkZQwADgOASCUGAGkZA4DDACBSiQFAWsYA4DAAiFRiAJCWMQA4DAAilRgA
pGUMAA4DgEglBgBpGQOAwwAgUokBQFrGAOAwAIhUYgCQljEAOAwAIpUYAKRlDAAOA4BIJQYAaRkD
gMMAIFKJAUBaxgDgMACIVGIAkJYxADgMACKVGACkZQwADgOASCUGAGkZA4DDACBSiQFAWsYA4DAA
iFRiAJCWMQA4DAAilRgApGUMAA4DgEglBgBpGQOAwwAgUokBQFrGAOAwAIhUYgCQljEAOAwAIpUY
AKRlDAAOA4BIJQYAaRkDgMMAIFKJAUBaxgDgMACIVGIAkJYxADgMACKVGACkZQwADgOASCUGAGkZ
A4DDACBSiQFAWsYA4DAAiFRiAJCWMQA4DAAilRgApGUMAA4DgEglBgBpGQOAwwAgUokBQFrGAOAw
AIhUYgCQljEAOAwAIpUYAKRlDAAOA4BIJQYAaRkDgMMAIFKJAUBaxgDgMACIVGIAkJYxADgMACKV
GACkZQwADgOASCUGAGkZA4DDACBSiQFAWsYA4DAAiFRiAJCWMQA4DAAilRgApGUMAA4DgEglBgBp
GQOAwwAgUokBQFrGAOAwAIhUYgCQljEAOAwAIpUYAKRlDAAOA4BIJQYAaRkDgMMAIFKJAUBaxgDg
MACIVGIAkJYxADgMACKVGACkZQwADgOASCUGAGkZA4DDACBSiQFAWsYA4DAAiFRiAJCWMQA4DAAi
lRgApGUMAA4DgEglBgBpGQOAwwAgUokBQFrGAOAwAIhUYgCQljEAOAwAIpUYAKRlDAAOA4BIJQYA
aRkDgMMAIFKJAUBaxgDgMACIVGIAkJYxADgMACKVGACkZQwADgOASCUGAGkZA4DDACBSiQFAWsYA
4DAAiFRiAJCWMQA4DAAilRgApGUMAA4DgEglBgBpGQOAwwAgUokBQFrGAOAwAIhUYgCQljEAOAwA
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
TkSuQmCC</Preview>
  <Form>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
p91r76HYEdcQutyQhrSNjfp7yTu36XofpdAcvCtSJdM2F30PzBfxHH98sXV0OGPb3EKjVekqC71P
8+pX1NsN335zdEmPh/h9QTys3OJS98KpVxl2PcqvlNuOPRSHkRvSkBYSLUW1dK2UMp24h1W7Vzb1
dSVwjDNNGNkcuSstcp96XMnZ1af2WzjayK3f8rZhZ1U8qNxk9WaisoJpYdej/FK5bc7XcEC5IQ1p
YdIk695SpdZNR1m0e5n/t16+tQCstdpWRzdTWX9knoY4nKr9ZuuSWVmlvgZ3usS33Mqz+7SdvDGs
PI3fIbet+RoOJjekIS1MGnMCl3pG3YmDmMc5WBW+oEA3VVjfY3FkM2W+hg9Pwynab0u+BuGwcnN8
Ddbq28GJyc2HryGY3JCGtNBpqXFdU6T7dAucOAfmeyhlLjQY1943aoJjmumHr+HU/ZbufQ0B5Ob4
GmgkrN/9C8cgN3++Bs9yGwpjHWbkvRCE9/d34Mr92y68pZ6e7XuGS41rOqElDL1KXibisrofub2Z
IgcgRCPUB2hv79cFzgTyqY/Hi9NCvE9VXqY0NiZhZYw78hDYs1r5PuuzmQpbiJ77a3JzRyDjO7Dc
FmnsXNpjYCbvzayuQfZRaq35e5NN6obYTQt3bN6brD9aiu1rOFH77cPXYMLzNOftLvMst/KsnoU+
/7hxJfJk5OY5rsGD3Lh0K6lw2c5NF5RiEmCabN2o0sNVW4HLSazg+OOYnXL9WK/ArPUejdyRh+bL
dRn6t/1XkPkG70kH07Vx7ro9qJG3zymVW3zaLJtyrfzC23v8PRNdzdRlY5oi9fTSU+UquUKuLSi/
pFSIp1oVRW6UE2nQq8J4/bjsVFJlSS2LUIrHm86c6uUXEcrXKdKPN+m6jNykhHLiug2Ji3bFlFuV
fg4qmdsO6XdYv5Qjf79okyNU8ov1cg8cAiM2WL8nt6jcyLdV+4glAiNed5y/s18sxacN4A1JVWEi
KQfev/AYjcQaWahmekNnlu1KX4GX65eSE9/L4nltu5f6HuSn53gRZKUY24Q7Et1bjdUtWI1qOCX7
7cPXIEK8/iQdVm5xSbtcjGs4UbvX3kPx4GYPhQe5SeXrqSrBw3Nu4R5YvCdW94LO9+NHI/aO/Ekh
DXZc/dtt5tExb/Y1ZjHW+OspTB4yFyBlohEaX8Qi8yejfNrkGtrr3oAXLzP10mRR5UGa3BdzcHFe
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</Form>
  <Code><![CDATA[
$formWindowsUpdateStatus_Load={
	#TODO: Initialize Form Controls here
	
	function Get-IntuneDeviceConfiguration
	{
		
    <#
		IMPORTANT:
        ===========================================================================
        This script is provided 'as is' without any warranty. Any issues stemming 
        from use is on the user.
        ===========================================================================
		.DESCRIPTION
		Retrieves Intune configuration policy.
		===========================================================================
		.PARAMETER Name
		Required if not using All switch - Name of the configuration policy to retrieve.
		.PARAMETER All
		Retrieves all Intune configuration policies.
        .PARAMETER Status
        Returns device status for the specified configuration policy.
		===========================================================================
		.EXAMPLE
		Get-IntuneConfigurationPolicy -Policy BlockAllUSB <--- Retrieves BlockAllUSB configuration policy
        Get-IntuneConfigurationPolicy -Policy BlockAllUSB -Status <--- Retrieves BlockAllUSB compliance policy device status
	#>
		
		[CmdletBinding()]
		param (
			[Parameter()]
			[String]$Name,
			[Parameter()]
			[Switch]$All,
			[Parameter()]
			[Switch]$Status
		)
		
		$token = Get-MsalToken -clientid $ClientID -tenantid organizations
		$global:header = @{ 'Authorization' = $token.createauthorizationHeader(); 'ConsistencyLevel' = 'eventual' }
		
		If ($All -and !$Name)
		{
			
			$Uri = "https://graph.microsoft.com/beta/devicemanagement/deviceConfigurations"
			Try
			{
				
				(Invoke-RestMethod -Uri $Uri -Headers $Header).value
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
		}
		elseif ($Name -and !$All -and !$Status)
		{
			
			$Uri = "https://graph.microsoft.com/beta/devicemanagement/deviceConfigurations?`$filter=displayName%20eq%20'$Name'"
			Try
			{
				
				(Invoke-RestMethod -Uri $Uri -Headers $Header).value
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
		}
		elseif ($Name -and !$All -and $Status)
		{
			
			$Uri = "https://graph.microsoft.com/beta/deviceManagement/deviceConfigurations?`$filter=displayName%20eq%20'$Name'"
			Try
			{
				
				$ConfigurationPolicy = (Invoke-RestMethod -Uri $Uri -Headers $Header -Method GET).value
				$ConfigurationPolicyId = $ConfigurationPolicy | select -expand id
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
			Try
			{
				
				$Uri = "https://graph.microsoft.com/beta/deviceManagement/deviceConfigurations/$ConfigurationPolicyId/deviceStatuses"
				(Invoke-RestMethod -Uri $Uri -Headers $Header).value | select id, deviceDisplayName, LastReportedDateTime, status, userPrincipalName
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
		}
		
	}
	
	#######################################################################
	$buttonGetUpdateStatus.Enabled = $false
	$buttonExport.Enabled = $false
	$UpdatesLogFolderExists = (Test-Path -Path "$Env:ProgramData\AzureAdministrator\Logs\UpdateStatus" -PathType Container)
	If (!$UpdatesLogFolderExists)
	{
		
		New-Item -Path "$Env:ProgramData\AzureAdministrator\Logs" -Name 'UpdateStatus' -ItemType directory -Force
		
	}
	$AllRings = Get-IntuneDeviceConfiguration -All | where { $_.microsoftUpdateServiceAllowed -eq 'true' }
	foreach ($item in $AllRings)
	{
		
		$listboxRings.Items.Add($Item.displayName) | Out-Null
		$listboxRings.Sorted = $True
		
	}
	
}

$buttonGetUpdateStatus_Click={
	#TODO: Place custom script here
	function Get-IntuneUpdateRing
	{
		
		[CmdletBinding()]
		param (
			[Parameter()]
			[String]$Ring,
			[Parameter()]
			[Switch]$Status,
			[Parameter()]
			[Switch]$All
		)
		
<#
		IMPORTANT:
        ===========================================================================
        This script is provided 'as is' without any warranty. Any issues stemming 
        from use is on the user.
        ===========================================================================
		.DESCRIPTION
		Retrieves Intune Update Ring and status.
		===========================================================================
		.PARAMETER Ring
		Name of the Update Ring to pull
        Returns update status for the specified Update Ring.
		===========================================================================
		.EXAMPLE
		Get-IntuneUpdateRing -Ring StandardUsers <--- This will retrieve details about the Update Ring itself
        Get-IntuneUpdateRing -Ring StandardUsers -Status <--- This will retrieve update status for Update Ring devices
	#>
		
		###########################################################
		
		function Get-IntuneDeviceConfiguration
		{
			
    <#
		IMPORTANT:
        ===========================================================================
        This script is provided 'as is' without any warranty. Any issues stemming 
        from use is on the user.
        ===========================================================================
		.DESCRIPTION
		Retrieves Intune configuration policy.
		===========================================================================
		.PARAMETER Name
		Required if not using All switch - Name of the configuration policy to retrieve.
		.PARAMETER All
		Retrieves all Intune configuration policies.
        .PARAMETER Status
        Returns device status for the specified configuration policy.
		===========================================================================
		.EXAMPLE
		Get-IntuneConfigurationPolicy -Policy BlockAllUSB <--- Retrieves BlockAllUSB configuration policy
        Get-IntuneConfigurationPolicy -Policy BlockAllUSB -Status <--- Retrieves BlockAllUSB compliance policy device status
	#>
			
			[CmdletBinding()]
			param (
				[Parameter()]
				[String]$Name,
				[Parameter()]
				[Switch]$All,
				[Parameter()]
				[Switch]$Status
			)
			
			$token = Get-MsalToken -clientid $ClientID -tenantid organizations
			$global:header = @{ 'Authorization' = $token.createauthorizationHeader(); 'ConsistencyLevel' = 'eventual' }
			
			If ($All -and !$Name)
			{
				
				$Uri = "https://graph.microsoft.com/beta/devicemanagement/deviceConfigurations"
				Try
				{
					
					(Invoke-RestMethod -Uri $Uri -Headers $Header).value
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
					$ResponseBody
				}
				
			}
			elseif ($Name -and !$All -and !$Status)
			{
				
				$Uri = "https://graph.microsoft.com/beta/devicemanagement/deviceConfigurations?`$filter=displayName%20eq%20'$Name'"
				Try
				{
					
					(Invoke-RestMethod -Uri $Uri -Headers $Header).value
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
					$ResponseBody
				}
				
			}
			elseif ($Name -and !$All -and $Status)
			{
				
				$Uri = "https://graph.microsoft.com/beta/deviceManagement/deviceConfigurations?`$filter=displayName%20eq%20'$Name'"
				Try
				{
					
					$ConfigurationPolicy = (Invoke-RestMethod -Uri $Uri -Headers $Header -Method GET).value
					$ConfigurationPolicyId = $ConfigurationPolicy | select -expand id
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
					$ResponseBody
				}
				
				Try
				{
					
					$Uri = "https://graph.microsoft.com/beta/deviceManagement/deviceConfigurations/$ConfigurationPolicyId/deviceStatuses"
					(Invoke-RestMethod -Uri $Uri -Headers $Header).value | select id, deviceDisplayName, LastReportedDateTime, status, userPrincipalName
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
					$ResponseBody
				}
				
			}
			
		}
		
		
		##########################################################
		
		$token = Get-MsalToken -clientid $ClientID -tenantid organizations
		$global:header = @{ 'Authorization' = $token.createauthorizationHeader(); 'ConsistencyLevel' = 'eventual' }
		
		If ($Ring -and !$Status)
		{
			
			$UpdateRing = Get-IntuneDeviceConfiguration -All | where { $_.displayName -like "*$Ring*" }
			$UpdateRingId = $UpdateRing.Id
			$Uri = "https://graph.microsoft.com/v1.0/deviceManagement/deviceConfigurations/$UpdateRingId"
			Try
			{
				
				Invoke-RestMethod -Uri $Uri -Headers $Header -Method Get
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
		}
		elseif ($Ring -and $Status)
		{
			
			$UpdateRing = Get-IntuneDeviceConfiguration -All | where { $_.displayName -like "*$Ring*" }
			$UpdateRingId = $UpdateRing.Id
			$Uri = "https://graph.microsoft.com/v1.0/deviceManagement/deviceConfigurations/$UpdateRingId/deviceStatuses"
			Try
			{
				
				(Invoke-RestMethod -Uri $Uri -Headers $Header -Method Get).value
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
		}
		elseif ($All)
		{
			
			Get-IntuneDeviceConfiguration -All | where { $_.microsoftUpdateServiceAllowed -eq 'true' }
			
		}
		
	}
	#######################################################################
	function Get-IntuneDevice
	{
		
    <#
		IMPORTANT:
        ===========================================================================
        This script is provided 'as is' without any warranty. Any issues stemming 
        from use is on the user.
        ===========================================================================
		.DESCRIPTION
		Retrieves Intune managed device.
		===========================================================================
		.PARAMETER Name
		Required if not using All switch - Name of the device to retrieve.
		.PARAMETER All
		Retrieves all Intune managed devices.
		===========================================================================
		.EXAMPLE
		Assign-IntuneDevice -Name DESKTOP-7XH8Z <--- Retrieves DESKTOP-7XH8Z if exist
        Assign-IntuneDevice -All <--- Retrieves all Intune managed devices.
	#>
		
		[CmdletBinding()]
		param (
			
			[Parameter()]
			[String]$Name,
			[Parameter()]
			[Switch]$All
			
		)
		
		$token = Get-MsalToken -clientid $clientID -tenantid organizations
		$global:header = @{ 'Authorization' = $token.createauthorizationHeader(); 'ConsistencyLevel' = 'eventual' }
		
		If (!$All -and $Name)
		{
			
			$Uri = "https://graph.microsoft.com/beta/deviceManagement/managedDevices?`$filter=deviceName%20eq%20'$Name'"
			Try
			{
				
				$Device = (Invoke-RestMethod -Uri $Uri -Method Get -Headers $Header).value
				If ($Device -ne $Null)
				{
					
					$device
					
				}
				else
				{
					
					Write-Output "Device $Name not found."
					
				}
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
			
		}
		elseif (!$All -and !$Name)
		{
			
			Write-Host "Please specify a device using the -Name parameter or use the -All switch to see all devices." -f Red
			
		}
		elseif ($All -and !$Name)
		{
			
			$Uri = "https://graph.microsoft.com/beta/deviceManagement/managedDevices?`$filter=(((deviceType%20eq%20%27desktop%27)%20or%20(deviceType%20eq%20%27windowsRT%27)%20or%20(deviceType%20eq%20%27winEmbedded%27)%20or%20(deviceType%20eq%20%27surfaceHub%27)))"
			Try
			{
				
				(Invoke-RestMethod -uri $uri -headers $header -method GET).value
				
			}
			catch
			{
				
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
			
		}
		else
		{
			
			Write-Host "Please specify a device using the -Name parameter or use the -All switch to see all devices." -f Red
			
		}
		
	}
	#######################################################################
	Start-Transcript -Path "$env:ProgramData\AzureAdministrator\Logs\UpdateStatus\DeviceUserUpdate_$Timestamp.log"
	$textboxStatus.Clear()
	$Selected = Get-IntuneUpdateRing -Ring $listboxRings.SelectedItem | select -expand displayName
	If ($textboxDeviceName.Text.Trim() -eq '')
	{
		
		Try
		{
			
			$Statuses = Get-IntuneUpdateRing -Ring $Selected -Status | Sort-Object deviceDisplayName
			
		}
		Catch
		{
			
			[System.Windows.Forms.MessageBox]::show("Error getting statuses.`r`nError Message: $($_.Exception).`r`nFor more info, see logs.", 'Error', 'OK', 'Error')
			
		}
		Foreach ($Item in $Statuses)
		{
			
			$textboxStatus.AppendText("Status on $($Item.deviceDisplayName): $($Item.Status)`r`n")
			
		}
	}
	else
	{
		Try
		{
			
			$Device = $textboxDeviceName.Text.Trim()
			$DeviceCheck = Get-IntuneDevice -Name $Device
			If ($DeviceCheck -notlike '*not found*')
			{
				
				$Status = Get-IntuneUpdateRing -Ring $Selected -Status | where { $_.deviceDisplayName -eq $Device }
				$textboxStatus.AppendText("Status on $($Status.deviceDisplayName): $($Status.Status)")
				
			}
			else
			{
				
				[System.Windows.Forms.MessageBox]::show("Device $Device not found.", 'Error', 'OK', 'Error')
				
			}
			
		}
		Catch
		{
			
			[System.Windows.Forms.MessageBox]::show("Error getting status.`r`nError Message: $($_.Exception).`r`nFor more info, see logs.", 'Error', 'OK', 'Error')
			
		}
	}
	Stop-Transcript
	
}

$buttonExport_Click={
	#TODO: Place custom script here
	function Get-IntuneUpdateRing
	{
		
		[CmdletBinding()]
		param (
			[Parameter()]
			[String]$Ring,
			[Parameter()]
			[Switch]$Status,
			[Parameter()]
			[Switch]$All
		)
		
<#
		IMPORTANT:
        ===========================================================================
        This script is provided 'as is' without any warranty. Any issues stemming 
        from use is on the user.
        ===========================================================================
		.DESCRIPTION
		Retrieves Intune Update Ring and status.
		===========================================================================
		.PARAMETER Ring
		Name of the Update Ring to pull
        Returns update status for the specified Update Ring.
		===========================================================================
		.EXAMPLE
		Get-IntuneUpdateRing -Ring StandardUsers <--- This will retrieve details about the Update Ring itself
        Get-IntuneUpdateRing -Ring StandardUsers -Status <--- This will retrieve update status for Update Ring devices
	#>
		
		###########################################################
		
		function Get-IntuneDeviceConfiguration
		{
			
    <#
		IMPORTANT:
        ===========================================================================
        This script is provided 'as is' without any warranty. Any issues stemming 
        from use is on the user.
        ===========================================================================
		.DESCRIPTION
		Retrieves Intune configuration policy.
		===========================================================================
		.PARAMETER Name
		Required if not using All switch - Name of the configuration policy to retrieve.
		.PARAMETER All
		Retrieves all Intune configuration policies.
        .PARAMETER Status
        Returns device status for the specified configuration policy.
		===========================================================================
		.EXAMPLE
		Get-IntuneConfigurationPolicy -Policy BlockAllUSB <--- Retrieves BlockAllUSB configuration policy
        Get-IntuneConfigurationPolicy -Policy BlockAllUSB -Status <--- Retrieves BlockAllUSB compliance policy device status
	#>
			
			[CmdletBinding()]
			param (
				[Parameter()]
				[String]$Name,
				[Parameter()]
				[Switch]$All,
				[Parameter()]
				[Switch]$Status
			)
			
			$token = Get-MsalToken -clientid $ClientID -tenantid organizations
			$global:header = @{ 'Authorization' = $token.createauthorizationHeader(); 'ConsistencyLevel' = 'eventual' }
			
			If ($All -and !$Name)
			{
				
				$Uri = "https://graph.microsoft.com/beta/devicemanagement/deviceConfigurations"
				Try
				{
					
					(Invoke-RestMethod -Uri $Uri -Headers $Header).value
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
					$ResponseBody
				}
				
			}
			elseif ($Name -and !$All -and !$Status)
			{
				
				$Uri = "https://graph.microsoft.com/beta/devicemanagement/deviceConfigurations?`$filter=displayName%20eq%20'$Name'"
				Try
				{
					
					(Invoke-RestMethod -Uri $Uri -Headers $Header).value
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
					$ResponseBody
				}
				
			}
			elseif ($Name -and !$All -and $Status)
			{
				
				$Uri = "https://graph.microsoft.com/beta/deviceManagement/deviceConfigurations?`$filter=displayName%20eq%20'$Name'"
				Try
				{
					
					$ConfigurationPolicy = (Invoke-RestMethod -Uri $Uri -Headers $Header -Method GET).value
					$ConfigurationPolicyId = $ConfigurationPolicy | select -expand id
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
					$ResponseBody
				}
				
				Try
				{
					
					$Uri = "https://graph.microsoft.com/beta/deviceManagement/deviceConfigurations/$ConfigurationPolicyId/deviceStatuses"
					(Invoke-RestMethod -Uri $Uri -Headers $Header).value | select id, deviceDisplayName, LastReportedDateTime, status, userPrincipalName
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
					$ResponseBody
				}
				
			}
			
		}
		
		
		##########################################################
		
		$token = Get-MsalToken -clientid $ClientID -tenantid organizations
		$global:header = @{ 'Authorization' = $token.createauthorizationHeader(); 'ConsistencyLevel' = 'eventual' }
		
		If ($Ring -and !$Status)
		{
			
			$UpdateRing = Get-IntuneDeviceConfiguration -All | where { $_.displayName -like "*$Ring*" }
			$UpdateRingId = $UpdateRing.Id
			$Uri = "https://graph.microsoft.com/v1.0/deviceManagement/deviceConfigurations/$UpdateRingId"
			Try
			{
				
				Invoke-RestMethod -Uri $Uri -Headers $Header -Method Get
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
		}
		elseif ($Ring -and $Status)
		{
			
			$UpdateRing = Get-IntuneDeviceConfiguration -All | where { $_.displayName -like "*$Ring*" }
			$UpdateRingId = $UpdateRing.Id
			$Uri = "https://graph.microsoft.com/v1.0/deviceManagement/deviceConfigurations/$UpdateRingId/deviceStatuses"
			Try
			{
				
				(Invoke-RestMethod -Uri $Uri -Headers $Header -Method Get).value
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
		}
		elseif ($All)
		{
			
			Get-IntuneDeviceConfiguration -All | where { $_.microsoftUpdateServiceAllowed -eq 'true' }
			
		}
		
	}
	#######################################################################
	Start-Transcript -Path "$env:ProgramData\AzureAdministrator\Logs\UpdateStatus\DeviceUserUpdateExport_$Timestamp.log"
	$Selected = Get-IntuneUpdateRing -Ring $listboxRings.SelectedItem | select -expand displayName
	Try
	{
		
		Get-IntuneUpdateRing -Ring $Selected -Status | Sort-Object -Property deviceDisplayName | Export-Csv "$env:TEMP\Azure Administrator\Exports\$Selected_UpdateRingReport.csv"
		
	}
	Catch
	{
		
		[System.Windows.Forms.MessageBox]::show("Error exporting statuses.`r`nError Message: $($_.Exception).`r`nFor more info, see logs.", 'Error', 'OK', 'Error')
		
	}
	Stop-Transcript
}

$buttonClose_Click={
	#TODO: Place custom script here
	$formWindowsUpdateStatus.Close()
}

$listboxRings_SelectedIndexChanged={
	#TODO: Place custom script here
	If (($listboxDevices.SelectedItem -ne '') -or ($textboxdeviceName.Text.Trim() -ne ''))
	{
		
		$buttonGetUpdateStatus.Enabled = $true
		$buttonExport.Enabled = $true
		
	}
}

$textboxDeviceName_MouseHover={
	#TODO: Place custom script here
	$tooltipOptional.SetToolTip($textboxDeviceName, "If you want to check update status for just one device, use this field.")
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>