<File version="3.2">
  <FileID>a6c4b8aa-d804-48e8-b1bf-f99ce49c8c26</FileID>
  <Preview>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
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
AAwA0hIDgPSEAaAeBoABMABISwwA0hMGgHoYAAbAACAtMQBITxgA6mEAGAADgLTEACA9YQCohwFg
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
pmwpTkCkrYkMAErjGABEqSB5AJhmzYVs6TOSzkwpXQnODABKwxgARKmgjAiAyTb1EGTTDPaWDbHT
sgHpjLt1E+yxaYIaDABKoxgARKmgnAiAgTa1sNymARaXb4glpDuLyzfALJv6qCoCwCqF+5Dofx0D
gCgVlBcsRATIEDAjXUvp/iNKCxgAREREaRADgIiIKA1iABAREaVBDAAiIqI0iAFARESUBjEAiIiI
0iAGABERURrEACAiIkqDGABERERpEAOAiIgoDWIAEBERpUEMACIiojSIAUBERJQGMQCIiIjSIAYA
ERFRGsQAICIiSoMYAERERGkQA4CIiCgNYgAQERGlQQwAIiKiNIgBQERElAYxAIiIiNIgBgAREVEa
xAAgIiJKgz5pAEydNgPFipdWNkpERETasbKuCDMzq9QMgPjE6R+YPHkqChYsCjNzKyIiItJQOTNL
lClTFn7hh9QOAOGuOO3ec9x+8oNi//HL8Np7QNkYERERacc3PA4+YbE4de0xrjz4Ptn8rUYACBfl
KwEiBKTrT35B/Is/ES9Kg4iIiDT24o+EyV/M0e/mbpUCgIiIiIyEAUBERJQG/cMAuP/ktQiAH5UL
EhERkVF9j8evfvt7ATBkyLD7z1/9gqdv/sATUQ1ERERkUGLy/+EXiACY+HviNP+fR9euXa9NmDjp
lwkTJv4iioGIiIgMSs7lEyd++0v37j1eJ07zHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwc
HBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwc
n2J89tn/ATAnxKgs/w81AAAAAElFTkSuQmCC</Preview>
  <Form>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</Form>
  <Code><![CDATA[
$formCompliancePolicies_Load={
	#TODO: Initialize Form Controls here
	function Get-IntuneCompliancePolicy
	{
		
    <#
        IMPORTANT:
        ===========================================================================
        This script is provided 'as is' without any warranty. Any issues stemming 
        from use is on the user.
        ===========================================================================
        .DESCRIPTION
        Retrieves Intune compliancy policy.
        ===========================================================================
        .PARAMETER Policy
        Required if not using All switch - Name of the compliance policy to retrieve.
        .PARAMETER All
        Retrieves all Intune compliance policies.
        .PARAMETER Status
        Returns device status for the specified compliance policy.
        ===========================================================================
        .EXAMPLE
        Get-IntuneCompliancePolicy -Policy StandardUser <--- Retrieves StandardUser compliance policy
        Get-IntuneCompliancePolicy -Policy StandardUser -Status <--- Retrieves StandardUser compliance policy device status
    #>
		
		[CmdletBinding()]
		param (
			[Parameter()]
			[String]$Policy,
			[Parameter()]
			[Switch]$All,
			[Parameter()]
			[Switch]$Status
		)
		
		$token = Get-MsalToken -clientid $ClientID -tenantid organizations
		$global:header = @{ 'Authorization' = $token.createauthorizationHeader(); 'ConsistencyLevel' = 'eventual' }
		
		If (!$Policy -and $All)
		{
			
			$Uri = "https://graph.microsoft.com/v1.0/deviceManagement/deviceCompliancePolicies"
			Try
			{
				
				(Invoke-RestMethod -Uri $Uri -Headers $Header).value
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
		}
		elseif ($Policy -and !$All -and !$Status)
		{
			
			$Uri = "https://graph.microsoft.com/v1.0/deviceManagement/deviceCompliancePolicies?`$filter=displayName%20eq%20'$Policy'"
			Try
			{
				
				(Invoke-RestMethod -Uri $Uri -Headers $Header).value
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
		}
		elseif ($Policy -and !$All -and $Status)
		{
			
			$Uri = "https://graph.microsoft.com/v1.0/deviceManagement/deviceCompliancePolicies?`$filter=displayName%20eq%20'$Policy'"
			Try
			{
				
				$CompliancePolicy = (Invoke-RestMethod -Uri $Uri -Headers $Header -Method GET).value
				$CompliancePolicyId = $CompliancePolicy | select -expand id
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
			Try
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/deviceManagement/deviceCompliancePolicies/$CompliancePolicyId/deviceStatuses"
				(Invoke-RestMethod -Uri $Uri -Headers $Header).value
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
		}
		
	}
	###########################################################################
	
	$global:AllCompliancePolicies = Get-IntuneCompliancePolicy -All | sort -Property displayName | select -expand displayName
	$buttonGetPolicyStatus.Enabled = $false
	$buttonExport.Enabled = $false
	$buttonAssignPolicy.Enabled = $false
	foreach ($item in $AllCompliancePolicies)
	{
		
		$listboxCompliancePolicies.Items.Add($Item) | Out-Null
		$listboxCompliancePolicies.Sorted = $True
		$listbox1.Items.Add($Item) | Out-Null
		$listbox1.Sorted = $True
		
	}
	
	$Uri = "https://graph.microsoft.com/v1.0/groups"
	$Groups = while (!$NoMorePages)
	{
		$GetGroups = Invoke-RestMethod -Uri $Uri -Headers $Header -Method Get
		$GetGroups.Value
		If ($GetGroups."@odata.nextlink")
		{
			$Uri = $GetGroups."@odata.nextlink"
		}
		else
		{
			$NoMorePages = $True
		}
	}
	$NoMorePages = $false
	$Groups | select -expand displayName | sort displayName
	$listboxGroups.SelectionMode = 'MultiExtended'
	
	foreach ($Item in $Groups)
	{
		$listboxGroups.Items.Add($Item.displayName) | Out-Null
		$listboxGroups.Sorted = $True
	}
	$AssignComplianceLogFolderExists = (Test-Path -Path "$Env:ProgramData\AzureAdministrator\Logs\AssignCompliance" -PathType Container)
	If (!$AssignComplianceLogFolderExists)
	{
		
		New-Item -Path "$Env:ProgramData\AzureAdministrator\Logs" -Name 'AssignCompliance' -ItemType directory -Force
		
	}
	$ComplianceStatusLogFolderExists = (Test-Path -Path "$Env:ProgramData\AzureAdministrator\Logs\ComplianceStatus" -PathType Container)
	If (!$ComplianceStatusLogFolderExists)
	{
		
		New-Item -Path "$Env:ProgramData\AzureAdministrator\Logs" -Name 'ComplianceStatus' -ItemType directory -Force
		
	}
}


$buttonAssignPolicy_Click={
	#TODO: Place custom script here
	function Assign-IntuneCompliancePolicy
	{
		
    <#
        IMPORTANT:
        ===========================================================================
        This script is provided 'as is' without any warranty. Any issues stemming 
        from use is on the user.
        ===========================================================================
        .DESCRIPTION
        Adds or Removes assignment to an Intune compliance policy using an AAD group.
        ===========================================================================
        .PARAMETER Policy
        Required - Name of compliance policy to assign.
        .PARAMETER Group
        Required - Name of the group to assign the policy to.
        .PARAMETER RemoveAssignment
        Optional switch to remove group assignment from Intune compliance policy.
        ===========================================================================
        .EXAMPLE
        Assign-IntuneCompliancePolicy -Policy StandardUser -Group StandardUsers <--- Assigns StandardUser compliance policy to AAD group StandardUsers
        Assign-IntuneCompliancePolicy -Policy StandardUser -Group StandardUsers -RemoveAssignment <--- Unassigns StandardUser compliance policy from StandardUsers AAD group
    #>
		
		[CmdletBinding()]
		param (
			[Parameter(Mandatory = $True)]
			[String]$Policy,
			[Parameter(Mandatory = $True)]
			[String]$Group,
			[Parameter()]
			[Switch]$RemoveAssignment
		)
		
		$token = Get-MsalToken -clientid $ClientID -tenantid organizations
		$global:header = @{ 'Authorization' = $token.createauthorizationHeader(); 'ConsistencyLevel' = 'eventual' }
		
		function Get-IntuneCompliancePolicy
		{
			
        <#
            IMPORTANT:
            ===========================================================================
            This script is provided 'as is' without any warranty. Any issues stemming 
            from use is on the user.
            ===========================================================================
            .DESCRIPTION
            Retrieves Intune compliancy policy.
            ===========================================================================
            .PARAMETER Policy
            Required if not using All switch - Name of the compliance policy to retrieve.
            .PARAMETER All
            Retrieves all Intune compliance policies.
            .PARAMETER Status
            Returns device status for the specified compliance policy.
            ===========================================================================
            .EXAMPLE
            Get-IntuneCompliancePolicy -Policy StandardUser <--- Retrieves StandardUser compliance policy
            Get-IntuneCompliancePolicy -Policy StandardUser -Status <--- Retrieves StandardUser compliance policy device status
        #>
			
			[CmdletBinding()]
			param (
				[Parameter()]
				[String]$Policy,
				[Parameter()]
				[Switch]$All,
				[Parameter()]
				[Switch]$Status
			)
			
			
			If (!$Policy -and $All)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/deviceManagement/deviceCompliancePolicies"
				Try
				{
					
					(Invoke-RestMethod -Uri $Uri -Headers $Header).value
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
					$ResponseBody
				}
				
			}
			elseif ($Policy -and !$All -and !$Status)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/deviceManagement/deviceCompliancePolicies?`$filter=displayName%20eq%20'$Policy'"
				Try
				{
					
					(Invoke-RestMethod -Uri $Uri -Headers $Header).value
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
					$ResponseBody
				}
			}
			elseif ($Policy -and !$All -and $Status)
			{
				
				$Uri = "https://graph.microsoft.com/beta/deviceManagement/deviceCompliancePolicies?`$filter=displayName%20eq%20'$Policy'"
				Try
				{
					
					$CompliancePolicy = (Invoke-RestMethod -Uri $Uri -Headers $Header -Method GET).value
					$CompliancePolicyId = $CompliancePolicy | select -expand id
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
					$ResponseBody
				}
				
				Try
				{
					
					$Uri = "https://graph.microsoft.com/beta/deviceManagement/deviceCompliancePolicies/$CompliancePolicyId/deviceStatuses"
					(Invoke-RestMethod -Uri $Uri -Headers $Header).value | select id, deviceDisplayName, LastReportedDateTime, status, userPrincipalName
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
					$ResponseBody
				}
				
			}
			
		}
		
		###########################################################
		
		function Get-AADGroup
		{
			
        <#
            IMPORTANT:
            ===========================================================================
            This script is provided 'as is' without any warranty. Any issues stemming 
            from use is on the user.
            ===========================================================================
            .DESCRIPTION
            Gets an Azure AD Group
            ===========================================================================
            .PARAMETER All
            Lists all AAD groups by displayName.
            .PARAMETER Name
            The displayName of the group to get.
            ===========================================================================
            .EXAMPLE
            Get-AADGroup -All <--- This will return all AzureAD groups
            Get-AADGroup -Name Azure-Test <--- This will return the group Azure-Test
        #>
			
			[cmdletbinding()]
			param (
				
				[Parameter()]
				[Switch]$All,
				[Parameter()]
				[String]$Name
				
			)
			
			
			If ($All)
			{
				
				$uri = "https://graph.microsoft.com/v1.0/groups"
				$Groups = While (!$NoMoreGroups)
				{
					
					Try
					{
						
						$GetGroups = Invoke-RestMethod -uri $uri -headers $header -method GET
						
					}
					catch
					{
						$ResponseResult = $_.Exception.Response.GetResponseStream()
						$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
						$ResponseBody = $ResponseReader.ReadToEnd()
						$ResponseBody
					}
					
					$getGroups.value
					If ($getGroups."@odata.nextlink")
					{
						
						$uri = $getGroups."@odata.nextlink"
						
					}
					Else
					{
						
						$NoMoreGroups = $True
						
					}
				}
				$NoMoreGroups = $False
				$Groups | select displayName | sort displayName
				
			}
			elseif ($Name -ne $Null)
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/groups"
				$Groups = While (!$NoMoreGroups)
				{
					
					Try
					{
						
						$GetGroups = Invoke-RestMethod -uri $uri -headers $header -method GET
						
					}
					catch
					{
						$ResponseResult = $_.Exception.Response.GetResponseStream()
						$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
						$ResponseBody = $ResponseReader.ReadToEnd()
						$ResponseBody
					}
					
					$getGroups.value
					If ($getGroups."@odata.nextlink")
					{
						
						$uri = $getGroups."@odata.nextlink"
						
					}
					Else
					{
						
						$NoMoreGroups = $True
						
					}
				}
				$NoMoreGroups = $False
				$Groups | where { $_.displayName -eq $Name }
				
			}
			else
			{
				
				Write-Host "Please specify individual group or use All switch."
				
			}
			
		}
		
		###########################################################
		
		$ComplianceId = Get-IntuneCompliancePolicy -Policy $Policy | select -expand id
		$Target = Get-AADGroup -Name $Group | select -expand id
		If (!$RemoveAssignment)
		{
			
			$Uri = "https://graph.microsoft.com/v1.0/deviceManagement/deviceCompliancePolicies/$ComplianceId/assign"
			$Body = @{
				"assignments" = @(
					@{
						
						"@odata.type" = "microsoft.graph.deviceCompliancePolicyAssignment";
						"id"		  = $Target;
						"target"	  = @{ "@odata.type" = "microsoft.graph.groupAssignmentTarget"; "groupId" = $Target };
						
					}
				)
			}
			$JSON = $Body | ConvertTo-Json -Depth 3
			Try
			{
				
				Invoke-RestMethod -Uri $Uri -Headers $Header -Body $JSON -Method POST -ContentType "application/Json" | out-null
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
		}
		else
		{
			
			$ComplianceId = Get-IntuneCompliancePolicy -Policy $Policy | select -expand id
			$Target = Get-AADGroup -Name '~Intune-Test' | select -expand id
			$GetUri = "https://graph.microsoft.com/v1.0/deviceManagement/deviceCompliancePolicies/$ComplianceId/assignments"
			Try
			{
				
				$Get = (Invoke-RestMethod -Uri $GetUri -Headers $Header -Method GET).value
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
			$Id = $Get.id | select-string -pattern $Target | foreach { $_.Line }
			If ($Get.id -like "*$Target*")
			{
				
				$Uri = "https://graph.microsoft.com/v1.0/deviceManagement/deviceCompliancePolicies/$ComplianceId/assignments/$Id"
				Try
				{
					
					Invoke-RestMethod -Uri $Uri -Headers $Header -Method Delete | out-null
					
				}
				catch
				{
					$ResponseResult = $_.Exception.Response.GetResponseStream()
					$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
					$ResponseBody = $ResponseReader.ReadToEnd()
					$ResponseBody
				}
				
			}
			
		}
		
	}
	##############################################################
	Start-Transcript -Path "$env:ProgramData\AzureAdministrator\Logs\AssignCompliance\AssignCompliance_$Timestamp.log"
	$Policy = $listboxCompliancePolicies.SelectedItem
	$Groups = $listboxGroups.SelectedItems
	foreach ($GroupItem in $Groups)
	{
		
		Try
		{
			
			Assign-IntuneCompliancePolicy -Policy $Policy -Group $GroupItem
			
		}
		Catch
		{
			
			[System.Windows.Forms.MessageBox]::show("Error assigning policy.`r`nError Message: $($_.Exception).`r`nFor more info, see logs.", 'Error', 'OK', 'Error')
			
		}
		
	}
	Stop-Transcript
	$formCompliancePolicies.close()
}

$buttonGetPolicyStatus_Click={
	#TODO: Place custom script here
	function Get-IntuneCompliancePolicy
	{
		
    <#
		IMPORTANT:
        ===========================================================================
        This script is provided 'as is' without any warranty. Any issues stemming 
        from use is on the user.
        ===========================================================================
		.DESCRIPTION
		Retrieves Intune compliancy policy.
		===========================================================================
		.PARAMETER Policy
		Required if not using All switch - Name of the compliance policy to retrieve.
		.PARAMETER All
		Retrieves all Intune compliance policies.
        .PARAMETER Status
        Returns device status for the specified compliance policy.
		===========================================================================
		.EXAMPLE
		Get-IntuneCompliancePolicy -Policy StandardUser <--- Retrieves StandardUser compliance policy
        Get-IntuneCompliancePolicy -Policy StandardUser -Status <--- Retrieves StandardUser compliance policy device status
	#>
		
		[CmdletBinding()]
		param (
			[Parameter()]
			[String]$Policy,
			[Parameter()]
			[Switch]$All,
			[Parameter()]
			[Switch]$Status
		)
		
		$token = Get-MsalToken -clientid $ClientID -tenantid organizations
		$global:header = @{ 'Authorization' = $token.createauthorizationHeader(); 'ConsistencyLevel' = 'eventual' }
		
		If (!$Policy -and $All)
		{
			
			$Uri = "https://graph.microsoft.com/v1.0/deviceManagement/deviceCompliancePolicies"
			Try
			{
				
				(Invoke-RestMethod -Uri $Uri -Headers $Header).value
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
		}
		elseif ($Policy -and !$All -and !$Status)
		{
			
			$Uri = "https://graph.microsoft.com/v1.0/deviceManagement/deviceCompliancePolicies?`$filter=displayName%20eq%20'$Policy'"
			Try
			{
				
				(Invoke-RestMethod -Uri $Uri -Headers $Header).value
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
		}
		elseif ($Policy -and !$All -and $Status)
		{
			
			$Uri = "https://graph.microsoft.com/beta/deviceManagement/deviceCompliancePolicies?`$filter=displayName%20eq%20'$Policy'"
			Try
			{
				
				$CompliancePolicy = (Invoke-RestMethod -Uri $Uri -Headers $Header -Method GET).value
				$CompliancePolicyId = $CompliancePolicy | select -expand id
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
			Try
			{
				
				$Uri = "https://graph.microsoft.com/beta/deviceManagement/deviceCompliancePolicies/$CompliancePolicyId/deviceStatuses"
				(Invoke-RestMethod -Uri $Uri -Headers $Header).value | select id, deviceDisplayName, LastReportedDateTime, status, userPrincipalName
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
		}
		
	}
	##########################################################
	Start-Transcript -Path "$env:ProgramData\AzureAdministrator\Logs\ComplianceStatus\ComplianceStatus_$Timestamp.log"
	$textboxStatus.Text = ''
	$Selected = $listboxCompliancePolicies.SelectedItem
	Try
	{
		
		Get-IntuneCompliancePolicy -Policy $Selected -Status | Sort-Object -Property deviceName | ForEach-Object { $textboxStatus.AppendText("Status on $($_.deviceDisplayName): $($_.Status)`r`n") }
		
	}
	Catch
	{
		
		[System.Windows.Forms.MessageBox]::show("Error retrieving policy status.`r`nError Message: $($_.Exception).`r`nFor more info, see logs.", 'Error', 'OK', 'Error')
		
	}
	Stop-Transcript
}

$buttonExport_Click={
	#TODO: Place custom script here
	function Get-IntuneCompliancePolicy
	{
		
    <#
		IMPORTANT:
        ===========================================================================
        This script is provided 'as is' without any warranty. Any issues stemming 
        from use is on the user.
        ===========================================================================
		.DESCRIPTION
		Retrieves Intune compliancy policy.
		===========================================================================
		.PARAMETER Policy
		Required if not using All switch - Name of the compliance policy to retrieve.
		.PARAMETER All
		Retrieves all Intune compliance policies.
        .PARAMETER Status
        Returns device status for the specified compliance policy.
		===========================================================================
		.EXAMPLE
		Get-IntuneCompliancePolicy -Policy StandardUser <--- Retrieves StandardUser compliance policy
        Get-IntuneCompliancePolicy -Policy StandardUser -Status <--- Retrieves StandardUser compliance policy device status
	#>
		
		[CmdletBinding()]
		param (
			[Parameter()]
			[String]$Policy,
			[Parameter()]
			[Switch]$All,
			[Parameter()]
			[Switch]$Status
		)
		
		$token = Get-MsalToken -clientid $ClientID -tenantid organizations
		$global:header = @{ 'Authorization' = $token.createauthorizationHeader(); 'ConsistencyLevel' = 'eventual' }
		
		If (!$Policy -and $All)
		{
			
			$Uri = "https://graph.microsoft.com/v1.0/deviceManagement/deviceCompliancePolicies"
			Try
			{
				
				(Invoke-RestMethod -Uri $Uri -Headers $Header).value
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
		}
		elseif ($Policy -and !$All -and !$Status)
		{
			
			$Uri = "https://graph.microsoft.com/v1.0/deviceManagement/deviceCompliancePolicies?`$filter=displayName%20eq%20'$Policy'"
			Try
			{
				
				(Invoke-RestMethod -Uri $Uri -Headers $Header).value
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
		}
		elseif ($Policy -and !$All -and $Status)
		{
			
			$Uri = "https://graph.microsoft.com/beta/deviceManagement/deviceCompliancePolicies?`$filter=displayName%20eq%20'$Policy'"
			Try
			{
				
				$CompliancePolicy = (Invoke-RestMethod -Uri $Uri -Headers $Header -Method GET).value
				$CompliancePolicyId = $CompliancePolicy | select -expand id
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
			Try
			{
				
				$Uri = "https://graph.microsoft.com/beta/deviceManagement/deviceCompliancePolicies/$CompliancePolicyId/deviceStatuses"
				(Invoke-RestMethod -Uri $Uri -Headers $Header).value | select id, deviceDisplayName, LastReportedDateTime, status, userPrincipalName
				
			}
			catch
			{
				$ResponseResult = $_.Exception.Response.GetResponseStream()
				$ResponseReader = New-Object System.IO.StreamReader($ResponseResult)
				$ResponseBody = $ResponseReader.ReadToEnd()
				$ResponseBody
			}
			
		}
		
	}
	##########################################################
	Start-Transcript -Path "$env:ProgramData\AzureAdministrator\Logs\ComplianceStatus\ComplianceStatusExport_$Timestamp.log"
	$Selected = $listboxCompliancePolicies.SelectedItem
	$CompliancePolicy = Get-IntuneCompliancePolicy -Policy $Selected
	Try
	{
		
		Get-IntuneCompliancePolicy -Policy $Selected -Status | Export-Csv "$env:TEMP\Azure Administrator\Exports\$($CompliancePolicy.displayName)_CompliancePolicy_Status.csv"
		
	}
	Catch
	{
		
		[System.Windows.Forms.MessageBox]::show("Error retrieving policy status.`r`nError Message: $($_.Exception).`r`nFor more info, see logs.", 'Error', 'OK', 'Error')
		
	}
	Stop-Transcript
	$formCompliancePolicies.Close()
}

$listboxCompliancePolicies_SelectedIndexChanged={
	#TODO: Place custom script here
	If (($listboxCompliancePolicies.SelectedItem -ne '') -and ($listboxGroups.SelectedItem -ne ''))
	{
		
		$buttonAssignPolicy.Enabled = $True
		
	}
}

$listbox1_SelectedIndexChanged={
	#TODO: Place custom script here
	If (($listbox1.SelectedItem -ne '') -and ($listboxGroups.SelectedItem -ne ''))
	{
		
		$buttonGetPolicyStatus.Enabled = $true
		$buttonExport.Enabled = $True
		
	}
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>